"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[85983],{15868:(e,n,s)=>{s.d(n,{A:()=>t});var i=s(65162),o=s(62540);function t(e){let{header:n,inline:s,updated:t,version:r}=e;return(0,o.jsx)(i.A,{text:`v${r}`,variant:t?"success":"info",className:n?"absolute right-0 top-1.5":s?"inline-block ml-1":"ml-2"})}},43023:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(63696);const o={},t=i.createContext(o);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(t.Provider,{value:n},e.children)}},58977:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"concepts/token","title":"Tokens","description":"Tokens are variables and functions that can be used by command,","source":"@site/docs/concepts/token.mdx","sourceDirName":"concepts","slug":"/concepts/token","permalink":"/docs/concepts/token","draft":false,"unlisted":false,"editUrl":"https://github.com/moonrepo/moon/tree/master/website/docs/concepts/token.mdx","tags":[],"version":"current","frontMatter":{"title":"Tokens"},"sidebar":"docs","previous":{"title":"Task inheritance","permalink":"/docs/concepts/task-inheritance"},"next":{"title":"Toolchain","permalink":"/docs/concepts/toolchain"}}');var o=s(62540),t=s(43023),r=s(15868);const c={title:"Tokens"},l=void 0,d={},a=[{value:"Functions",id:"functions",level:2},{value:"File groups",id:"file-groups",level:3},{value:"<code>@group</code>",id:"group",level:3},{value:"<code>@dirs</code>",id:"dirs",level:3},{value:"<code>@files</code>",id:"files",level:3},{value:"<code>@globs</code>",id:"globs",level:3},{value:"<code>@root</code>",id:"root",level:3},{value:"<code>@envs</code><VersionLabel></VersionLabel>",id:"envs",level:3},{value:"Inputs &amp; outputs",id:"inputs--outputs",level:3},{value:"<code>@in</code>",id:"in",level:3},{value:"<code>@out</code>",id:"out",level:3},{value:"Miscellaneous",id:"miscellaneous",level:3},{value:"<code>@meta</code><VersionLabel></VersionLabel>",id:"meta",level:3},{value:"Variables",id:"variables",level:2},{value:"Environment<VersionLabel></VersionLabel>",id:"environment",level:3},{value:"Workspace",id:"workspace",level:3},{value:"Project",id:"project",level:3},{value:"Task",id:"task",level:3},{value:"Date/Time",id:"datetime",level:3},{value:"VCS<VersionLabel></VersionLabel>",id:"vcs",level:3}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Tokens are variables and functions that can be used by ",(0,o.jsx)(n.a,{href:"../config/project#command",children:(0,o.jsx)(n.code,{children:"command"})}),",\n",(0,o.jsx)(n.a,{href:"../config/project#args",children:(0,o.jsx)(n.code,{children:"args"})}),", ",(0,o.jsx)(n.a,{href:"../config/project#env",children:(0,o.jsx)(n.code,{children:"env"})})," (>= v1.12),\n",(0,o.jsx)(n.a,{href:"../config/project#inputs",children:(0,o.jsx)(n.code,{children:"inputs"})}),", and ",(0,o.jsx)(n.a,{href:"../config/project#outputs",children:(0,o.jsx)(n.code,{children:"outputs"})})," when configuring a\ntask. They provide a way of accessing file group paths, referencing values from other task fields,\nand referencing metadata about the project and task itself."]}),"\n",(0,o.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,o.jsxs)(n.p,{children:["A token function is labeled as such as it takes a single argument, starts with an ",(0,o.jsx)(n.code,{children:"@"}),", and is\nformatted as ",(0,o.jsx)(n.code,{children:"@name(arg)"}),". The following token functions are available, grouped by their\nfunctionality."]}),"\n",(0,o.jsx)(n.admonition,{type:"caution",children:(0,o.jsxs)(n.p,{children:["Token functions ",(0,o.jsx)(n.em,{children:"must"})," be the only content within a value, as they expand to multiple files. When\nused in an ",(0,o.jsx)(n.code,{children:"env"})," value, multiple files are joined with a comma (",(0,o.jsx)(n.code,{children:","}),")."]})}),"\n",(0,o.jsx)(n.h3,{id:"file-groups",children:"File groups"}),"\n",(0,o.jsx)(n.p,{children:"These functions reference file groups by name, where the name is passed as the argument."}),"\n",(0,o.jsx)(n.h3,{id:"group",children:(0,o.jsx)(n.code,{children:"@group"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"args"}),", ",(0,o.jsx)(n.code,{children:"env"}),", ",(0,o.jsx)(n.code,{children:"inputs"}),", and ",(0,o.jsx)(n.code,{children:"outputs"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@group(file_group)"})," token is a standard token that will be replaced with the file group items\nas-is, for both file paths and globs. This token merely exists for reusability purposes."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"fileGroups:\n  storybook:\n    - '.storybook/**/*'\n    - 'src/**/*'\n    - '**/*.stories.*'\n\n# Configured as\ntasks:\n  build:\n    command: 'build-storybook'\n    inputs:\n      - '@group(storybook)'\n  start:\n    command: 'start-storybook'\n    inputs:\n      - '@group(storybook)'\n\n# Resolves to\ntasks:\n  build:\n    command: 'build-storybook'\n    inputs:\n      - '/path/to/project/.storybook/**/*'\n      - '/path/to/project/src/**/*'\n  start:\n    command: 'start-storybook'\n    inputs:\n      - '/path/to/project/.storybook/**/*'\n      - '/path/to/project/src/**/*'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"dirs",children:(0,o.jsx)(n.code,{children:"@dirs"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"args"}),", ",(0,o.jsx)(n.code,{children:"env"}),", ",(0,o.jsx)(n.code,{children:"inputs"}),", and ",(0,o.jsx)(n.code,{children:"outputs"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@dirs(file_group)"})," token will be replaced with an expanded list of directory paths, derived\nfrom the file group of the same name. If a glob pattern is detected within the file group, it will\naggregate all directories found."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["This token walks the file system to verify each directory exists, and filters out those that don't.\nIf using within ",(0,o.jsx)(n.code,{children:"outputs"}),", you're better off using ",(0,o.jsx)(n.a,{href:"#group",children:(0,o.jsx)(n.code,{children:"@group"})})," instead."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"fileGroups:\n  lintable:\n    - 'src'\n    - 'tests'\n    - 'scripts'\n    - '*.config.js'\n\n# Configured as\ntasks:\n  lint:\n    command: 'eslint @dirs(lintable) --color'\n    inputs:\n      - '@dirs(lintable)'\n\n# Resolves to\ntasks:\n  lint:\n    command:\n      - 'eslint'\n      - 'src'\n      - 'tests'\n      - 'scripts'\n      - '--color'\n    inputs:\n      - '/path/to/project/src'\n      - '/path/to/project/tests'\n      - '/path/to/project/scripts'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"files",children:(0,o.jsx)(n.code,{children:"@files"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"args"}),", ",(0,o.jsx)(n.code,{children:"env"}),", ",(0,o.jsx)(n.code,{children:"inputs"}),", and ",(0,o.jsx)(n.code,{children:"outputs"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@files(file_group)"})," token will be replaced with an expanded list of file paths, derived from\nthe file group of the same name. If a glob pattern is detected within the file group, it will\naggregate all files found."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["This token walks the file system to verify each file exists, and filters out those that don't. If\nusing within ",(0,o.jsx)(n.code,{children:"outputs"}),", you're better off using ",(0,o.jsx)(n.a,{href:"#group",children:(0,o.jsx)(n.code,{children:"@group"})})," instead."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"fileGroups:\n  config:\n    - '*.config.js'\n    - 'package.json'\n\n# Configured as\ntasks:\n  build:\n    command: 'webpack build @files(config)'\n    inputs:\n      - '@files(config)'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'webpack'\n      - 'build'\n      - 'babel.config.js'\n      - 'webpack.config.js'\n      - 'package.json'\n    inputs:\n      - '/path/to/project/babel.config.js'\n      - '/path/to/project/webpack.config.js'\n      - '/path/to/project/package.json'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"globs",children:(0,o.jsx)(n.code,{children:"@globs"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"args"}),", ",(0,o.jsx)(n.code,{children:"env"}),", ",(0,o.jsx)(n.code,{children:"inputs"}),", and ",(0,o.jsx)(n.code,{children:"outputs"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@globs(file_group)"})," token will be replaced with the list of glob patterns as-is, derived from\nthe file group of the same name. If a non-glob pattern is detected within the file group, it will be\nignored."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"fileGroups:\n  tests:\n    - 'tests/**/*'\n    - '**/__tests__/**/*'\n\n# Configured as\ntasks:\n  test:\n    command: 'jest --testMatch @globs(tests)'\n    inputs:\n      - '@globs(tests)'\n\n# Resolves to\ntasks:\n  test:\n    command:\n      - 'jest'\n      - '--testMatch'\n      - 'tests/**/*'\n      - '**/__tests__/**/*'\n    inputs:\n      - '/path/to/project/tests/**/*'\n      - '/path/to/project/**/__tests__/**/*'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"root",children:(0,o.jsx)(n.code,{children:"@root"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"args"}),", ",(0,o.jsx)(n.code,{children:"env"}),", ",(0,o.jsx)(n.code,{children:"inputs"}),", and ",(0,o.jsx)(n.code,{children:"outputs"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@root(file_group)"})," token will be replaced with the lowest common directory, derived from the\nfile group of the same name. If a glob pattern is detected within the file group, it will walk the\nfile system and aggregate all directories found before reducing."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"fileGroups:\n  sources:\n    - 'src/app'\n    - 'src/packages'\n    - 'src/scripts'\n\n# Configured as\ntasks:\n  format:\n    command: 'prettier --write @root(sources)'\n    inputs:\n      - '@root(sources)'\n\n# Resolves to\ntasks:\n  format:\n    command:\n      - 'prettier'\n      - '--write'\n      - 'src'\n    inputs:\n      - '/path/to/project/src'\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["When there's no directies, or too many directories, this function will return the project root\nusing ",(0,o.jsx)(n.code,{children:"."}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"envs",children:[(0,o.jsx)(n.code,{children:"@envs"}),(0,o.jsx)(r.A,{version:"1.21.0"})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"inputs"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@envs(file_group)"})," token will be replaced with all environment variables that have been\nconfigured in the group of the provided name."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"fileGroups:\n  sources:\n    - 'src/**/*'\n    - '$NODE_ENV'\n\n# Configured as\ntasks:\n  build:\n    command: 'vite build'\n    inputs:\n      - '@envs(sources)'\n\n\n# Resolves to\ntasks:\n  build:\n    command: 'vite build'\n    inputs:\n      - '$NODE_ENV'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"inputs--outputs",children:"Inputs & outputs"}),"\n",(0,o.jsx)(n.h3,{id:"in",children:(0,o.jsx)(n.code,{children:"@in"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"script"})," and ",(0,o.jsx)(n.code,{children:"args"})," only."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@in(index)"})," token will be replaced with a single path, derived from\n",(0,o.jsx)(n.a,{href:"../config/project#inputs",children:(0,o.jsx)(n.code,{children:"inputs"})})," by numerical index. If a glob pattern is referenced by index,\nthe glob will be used as-is, instead of returning the expanded list of files."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configured as\ntasks:\n  build:\n    command:\n      - 'babel'\n      - '--copy-files'\n      - '--config-file'\n      - '@in(1)'\n      - '@in(0)'\n    inputs:\n      - 'src'\n      - 'babel.config.js'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'babel'\n      - '--copy-files'\n      - '--config-file'\n      - 'babel.config.js'\n      - 'src'\n    inputs:\n      - '/path/to/project/src'\n      - '/path/to/project/babel.config.js'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"out",children:(0,o.jsx)(n.code,{children:"@out"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"script"})," and ",(0,o.jsx)(n.code,{children:"args"})," only."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@out(index)"})," token will be replaced with a single path, derived from\n",(0,o.jsx)(n.a,{href:"../config/project#outputs",children:(0,o.jsx)(n.code,{children:"outputs"})})," by numerical index."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configured as\ntasks:\n  build:\n    command:\n      - 'babel'\n      - '.'\n      - '--out-dir'\n      - '@out(0)'\n    outputs:\n      - 'lib'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'babel'\n      - '.'\n      - '--out-dir'\n      - 'lib'\n    outputs:\n      - '/path/to/project/lib'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,o.jsxs)(n.h3,{id:"meta",children:[(0,o.jsx)(n.code,{children:"@meta"}),(0,o.jsx)(r.A,{version:"1.28.0"})]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Usable in ",(0,o.jsx)(n.code,{children:"command"}),", ",(0,o.jsx)(n.code,{children:"script"}),", ",(0,o.jsx)(n.code,{children:"args"}),", ",(0,o.jsx)(n.code,{children:"env"}),", ",(0,o.jsx)(n.code,{children:"inputs"}),", and ",(0,o.jsx)(n.code,{children:"outputs"})," only."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@meta(key)"})," token can be used to access project metadata and will be replaced with a value\nderived from ",(0,o.jsx)(n.a,{href:"../config/project#project",children:(0,o.jsx)(n.code,{children:"project"})})," in ",(0,o.jsx)(n.a,{href:"../config/project",children:(0,o.jsx)(n.code,{children:"moon.yml"})}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The top-level fields (like ",(0,o.jsx)(n.code,{children:"name"})," and ",(0,o.jsx)(n.code,{children:"description"}),") will be used as-is (no quotes). If the setting\nis not defined, it will default to nothing or an empty string. For lists of values, they will be\njoined with ",(0,o.jsx)(n.code,{children:","}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Custom metadata defined in ",(0,o.jsx)(n.a,{href:"../config/project#metadata-1",children:(0,o.jsx)(n.code,{children:"project.metadata"})})," can also be accessed\nby key, but will return a JSON stringified value. For example, a custom string value of ",(0,o.jsx)(n.code,{children:"example"}),"\nwill be stringified to ",(0,o.jsx)(n.code,{children:'"example"'})," (with quotes)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"project:\n  name: 'example'\n  metadata:\n    index: 123\n\n# Configured as\ntasks:\n  build:\n    script: 'build --name @meta(name) --index @meta(index)'\n\n# Resolves to\ntasks:\n  build:\n    script: 'build --name example --index 123'\n"})}),"\n",(0,o.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,o.jsxs)(n.p,{children:["A token variable is a value that starts with ",(0,o.jsx)(n.code,{children:"$"})," and is substituted to a value derived from the\ncurrent workspace, project, and task. And unlike token functions, token variables can be placed\n",(0,o.jsx)(n.em,{children:"within"})," content when necessary, and supports multiple variables within the same content."]}),"\n",(0,o.jsxs)(n.h3,{id:"environment",children:["Environment",(0,o.jsx)(r.A,{version:"1.30.0"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$arch"})," - The current host architecture, derived from the Rust\n",(0,o.jsxs)(n.a,{href:"https://doc.rust-lang.org/std/env/consts/constant.ARCH.html",children:[(0,o.jsx)(n.code,{children:"ARCH"})," constant"]}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$os"})," - The current operating system, derived from the Rust\n",(0,o.jsxs)(n.a,{href:"https://doc.rust-lang.org/std/env/consts/constant.OS.html",children:[(0,o.jsx)(n.code,{children:"OS"})," constant"]}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$osFamily"})," - The current operating system family, either ",(0,o.jsx)(n.code,{children:"unix"})," or ",(0,o.jsx)(n.code,{children:"windows"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configured as\ntasks:\n  build:\n    command: 'example --arch $arch'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'example'\n      - '--arch'\n      - 'aarch64'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"workspace",children:"Workspace"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$workingDir"})," - The current working directory."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$workspaceRoot"})," - Absolute file path to the workspace root."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configured as\ntasks:\n  build:\n    command:\n      - 'example'\n      - '--cwd'\n      - '$workspaceRoot'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'example'\n      - '--cwd'\n      - '/path/to/repo'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"project",children:"Project"}),"\n",(0,o.jsxs)(n.p,{children:["Most values are derived from settings in ",(0,o.jsx)(n.a,{href:"../config/project",children:(0,o.jsx)(n.code,{children:"moon.yml"})}),'. When a setting is not\ndefined, or does not have a config, the variable defaults to "unknown" (for enums) or an empty\nstring.']}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$language"})," Programming language the project is written in, as defined with\n",(0,o.jsx)(n.a,{href:"../config/project#language",children:(0,o.jsx)(n.code,{children:"language"})}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$project"})," - ID of the project that owns the currently running task, as defined in\n",(0,o.jsx)(n.a,{href:"../config/workspace",children:(0,o.jsx)(n.code,{children:".moon/workspace.yml"})}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectAlias"})," - Alias of the project that owns the currently running task."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectChannel"})," - The discussion channel for the project, as defined with\n",(0,o.jsx)(n.a,{href:"../config/project#channel",children:(0,o.jsx)(n.code,{children:"project.channel"})}),".","\n",(0,o.jsx)(r.A,{version:"1.28.0"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectLayer"})," - The project layer, as defined with ",(0,o.jsx)(n.a,{href:"../config/project#layer",children:(0,o.jsx)(n.code,{children:"layer"})}),".","\n",(0,o.jsx)(r.A,{version:"1.39.0"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectName"})," - The human-readable name of the project, as defined with\n",(0,o.jsx)(n.a,{href:"../config/project#name",children:(0,o.jsx)(n.code,{children:"project.name"})}),".","\n",(0,o.jsx)(r.A,{version:"1.28.0"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectOwner"})," - The owner of the project, as defined with\n",(0,o.jsx)(n.a,{href:"../config/project#name",children:(0,o.jsx)(n.code,{children:"project.owner"})}),".","\n",(0,o.jsx)(r.A,{version:"1.28.0"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectRoot"})," - Absolute file path to the project root."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectSource"})," - Relative file path from the workspace root to the project root, as defined in\n",(0,o.jsx)(n.a,{href:"../config/workspace",children:(0,o.jsx)(n.code,{children:".moon/workspace.yml"})}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectStack"})," - The stack of the project, as defined with ",(0,o.jsx)(n.a,{href:"../config/project#stack",children:(0,o.jsx)(n.code,{children:"stack"})}),".","\n",(0,o.jsx)(r.A,{version:"1.22.0"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$projectType"})," - The type of project, as defined with ",(0,o.jsx)(n.a,{href:"../config/project#layer",children:(0,o.jsx)(n.code,{children:"type"})}),".\nDeprecated, use ",(0,o.jsx)(n.code,{children:"$projectLayer"})," instead."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configured as\ntasks:\n  build:\n    command: 'example debug $language'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'example'\n      - 'debug'\n      - 'node'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"task",children:"Task"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$target"})," - Fully-qualified target that is currently running."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$task"})," - ID of the task that is currently running. Does not include the project ID."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$taskToolchain"})," - The toolchain that task will run against, as defined in\n",(0,o.jsx)(n.a,{href:"../config/project",children:(0,o.jsx)(n.code,{children:"moon.yml"})}),". ",(0,o.jsx)(r.A,{version:"1.31.0"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$taskType"})," - The ",(0,o.jsx)(n.a,{href:"./task#types",children:"type of task"}),", based on its configured settings."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configured as\ntasks:\n  build:\n    command: 'example $target'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'example'\n      - 'web:build'\n"})}),"\n",(0,o.jsx)(n.h3,{id:"datetime",children:"Date/Time"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$date"})," - The current date in the format of ",(0,o.jsx)(n.code,{children:"YYYY-MM-DD"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$datetime"})," - The current date and time in the format of ",(0,o.jsx)(n.code,{children:"YYYY-MM-DD_HH:MM:SS"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$time"})," - The current time in the format of ",(0,o.jsx)(n.code,{children:"HH:MM:SS"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$timestamp"})," - The current date and time as a UNIX timestamp in seconds."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configured as\ntasks:\n  build:\n    command: 'example --date $date'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'example'\n      - '--date'\n      - '2023-03-17'\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"vcs",children:["VCS",(0,o.jsx)(r.A,{version:"1.30.0"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$vcsBranch"})," - The current branch."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$vcsRepository"})," - The repository slug, in the format of ",(0,o.jsx)(n.code,{children:"owner/repo"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"$vcsRevision"})," - The current revision (commit, etc)."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Configured as\ntasks:\n  build:\n    command: 'example --branch $vcsBranch'\n\n# Resolves to\ntasks:\n  build:\n    command:\n      - 'example'\n      - '--branch'\n      - 'master'\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},65162:(e,n,s)=>{s.d(n,{A:()=>c});var i=s(11750),o=s(74599),t=s(62540);const r={failure:"bg-red-100 text-red-900",info:"bg-pink-100 text-pink-900",success:"bg-green-100 text-green-900",warning:"bg-orange-100 text-orange-900"};function c(e){let{className:n,icon:s,text:c,variant:l}=e;return(0,t.jsxs)("span",{className:(0,i.A)("inline-flex items-center px-1 py-0.5 rounded text-xs font-bold uppercase",l?r[l]:"bg-gray-100 text-gray-800",n),children:[s&&(0,t.jsx)(o.A,{icon:s,className:"mr-1"}),c]})}}}]);