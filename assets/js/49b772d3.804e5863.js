"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[50863],{22491:(e,n,t)=>{t.d(n,{A:()=>r});t(63696);var o=t(11750);const a={tabItem:"tabItem_wHwb"};var s=t(62540);function r(e){let{children:n,hidden:t,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,o.A)(a.tabItem,r),hidden:t,children:n})}},43023:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(63696);const a={},s=o.createContext(a);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},49187:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"guides/rust/handbook","title":"Rust handbook","description":"Utilizing Rust in a monorepo is a trivial task, thanks to Cargo, and also moon. With this handbook,","source":"@site/docs/guides/rust/handbook.mdx","sourceDirName":"guides/rust","slug":"/guides/rust/handbook","permalink":"/docs/guides/rust/handbook","draft":false,"unlisted":false,"editUrl":"https://github.com/moonrepo/moon/tree/master/website/docs/guides/rust/handbook.mdx","tags":[],"version":"current","frontMatter":{"title":"Rust handbook","sidebar_label":"Handbook","toc_max_heading_level":6},"sidebar":"guides","previous":{"title":"Vue","permalink":"/docs/guides/examples/vue"}}');var a=t(62540),s=t(43023),r=t(78296),i=t(22491);const l={title:"Rust handbook",sidebar_label:"Handbook",toc_max_heading_level:6},c=void 0,d={},u=[{value:"moon setup",id:"moon-setup",level:2},{value:"Enabling the language",id:"enabling-the-language",level:3},{value:"Utilizing the toolchain",id:"utilizing-the-toolchain",level:3},{value:"Repository structure",id:"repository-structure",level:2},{value:"Example <code>moon.yml</code>",id:"example-moonyml",level:3},{value:"Cargo integration",id:"cargo-integration",level:2},{value:"Global binaries",id:"global-binaries",level:3},{value:"Lockfile handling",id:"lockfile-handling",level:3},{value:"FAQ",id:"faq",level:2},{value:"Should we cache the <code>target</code> directory as an output?",id:"should-we-cache-the-target-directory-as-an-output",level:3},{value:"How can we improve CI times?",id:"how-can-we-improve-ci-times",level:3}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Utilizing Rust in a monorepo is a trivial task, thanks to Cargo, and also moon. With this handbook,\nwe'll help guide you through this process."}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["moon is not a build system and does ",(0,a.jsx)(n.em,{children:"not"})," replace Cargo. Instead, moon runs ",(0,a.jsx)(n.code,{children:"cargo"})," commands, and\nefficiently orchestrates those tasks within the workspace."]})}),"\n",(0,a.jsx)(n.h2,{id:"moon-setup",children:"moon setup"}),"\n",(0,a.jsxs)(n.p,{children:["For this part of the handbook, we'll be focusing on ",(0,a.jsx)(n.a,{href:"/moon",children:"moon"}),", our task runner. To start,\nlanguages in moon act like plugins, where their functionality and support ",(0,a.jsx)(n.em,{children:"is not"})," enabled unless\nexplicitly configured. We follow this approach to avoid unnecessary overhead."]}),"\n",(0,a.jsx)(n.h3,{id:"enabling-the-language",children:"Enabling the language"}),"\n",(0,a.jsxs)(n.p,{children:["To enable Rust, define the ",(0,a.jsx)(n.a,{href:"../../config/toolchain#rust",children:(0,a.jsx)(n.code,{children:"rust"})})," setting in\n",(0,a.jsx)(n.a,{href:"../../config/toolchain",children:(0,a.jsx)(n.code,{children:".moon/toolchain.yml"})}),", even if an empty object."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"# Enable Rust\nrust: {}\n\n# Enable Rust and override default settings\nrust:\n  syncToolchainConfig: true\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["In moon v1.37+, use ",(0,a.jsx)(n.code,{children:"unstable_rust"})," instead of ",(0,a.jsx)(n.code,{children:"rust"})," to enable the new WASM powered Rust toolchain,\nwhich is far more accurate and efficient. The non-WASM toolchain will be deprecated in the future."]})}),"\n",(0,a.jsxs)(n.p,{children:["Or by pinning a ",(0,a.jsx)(n.code,{children:"rust"})," version in ",(0,a.jsx)(n.a,{href:"../../proto/config",children:(0,a.jsx)(n.code,{children:".prototools"})})," in the workspace root."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",metastring:'title=".prototools"',children:'rust = "1.69.0"\n'})}),"\n",(0,a.jsx)(n.p,{children:"This will enable the Rust toolchain and provide the following automations around its ecosystem:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Manifests and lockfiles are parsed for accurate dependency versions for hashing purposes."}),"\n",(0,a.jsxs)(n.li,{children:["Cargo binaries (in ",(0,a.jsx)(n.code,{children:"~/.cargo/bin"}),") are properly located and executed."]}),"\n",(0,a.jsxs)(n.li,{children:["Automatically sync ",(0,a.jsx)(n.code,{children:"rust-toolchain.toml"})," configuration files."]}),"\n",(0,a.jsxs)(n.li,{children:["For non-workspaces, will inherit ",(0,a.jsx)(n.code,{children:"package.name"})," from ",(0,a.jsx)(n.code,{children:"Cargo.toml"})," as a project alias."]}),"\n",(0,a.jsx)(n.li,{children:"And more to come!"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"utilizing-the-toolchain",children:"Utilizing the toolchain"}),"\n",(0,a.jsxs)(n.p,{children:["When a language is enabled, moon by default will assume that the language's binary is available\nwithin the current environment (typically on ",(0,a.jsx)(n.code,{children:"PATH"}),"). This has the downside of requiring all\ndevelopers and machines to manually install the correct version of the language, ",(0,a.jsx)(n.em,{children:"and to stay in\nsync"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Instead, you can utilize ",(0,a.jsx)(n.a,{href:"../../concepts/toolchain",children:"moon's toolchain"}),", which will download and\ninstall the language in the background, and ensure every task is executed using the exact version\nacross all machines."]}),"\n",(0,a.jsxs)(n.p,{children:["Enabling the toolchain is as simple as defining the\n",(0,a.jsx)(n.a,{href:"../../config/toolchain#version-2",children:(0,a.jsx)(n.code,{children:"rust.version"})})," setting."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"# Enable Rust toolchain with an explicit version\nrust:\n  version: '1.69.0'\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["Versions can also be defined with ",(0,a.jsx)(n.a,{href:"../../proto/config",children:(0,a.jsx)(n.code,{children:".prototools"})}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["moon requires ",(0,a.jsx)(n.code,{children:"rustup"})," to exist in the environment, and will use this to install the necessary Rust\ntoolchains. This requires Rust to be manually installed on the machine, as moon does not\nauto-install the language, just the toolchains."]})}),"\n",(0,a.jsx)(n.h2,{id:"repository-structure",children:"Repository structure"}),"\n",(0,a.jsxs)(n.p,{children:["Rust/Cargo repositories come in two flavors: a single crate with one ",(0,a.jsx)(n.code,{children:"Cargo.toml"}),", or multiple\ncrates with many ",(0,a.jsx)(n.code,{children:"Cargo.toml"}),"s using\n",(0,a.jsx)(n.a,{href:"https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html",children:"Cargo workspaces"}),". The latter is\nhighly preferred as it enables Cargo incremental caching."]}),"\n",(0,a.jsxs)(n.p,{children:["Regardless of which flavor your repository uses, in moon, both flavors are a single\n",(0,a.jsx)(n.a,{href:"../../concepts/project",children:"moon project"}),". This means that all Rust crates are grouped together into a\nsingle moon project, and the ",(0,a.jsx)(n.a,{href:"../../config/project",children:(0,a.jsx)(n.code,{children:"moon.yml"})})," file is located at the root relative\nto ",(0,a.jsx)(n.code,{children:"Cargo.lock"})," and the ",(0,a.jsx)(n.code,{children:"target"})," folder."]}),"\n",(0,a.jsx)(n.p,{children:"An example of this layout is demonstrated below:"}),"\n",(0,a.jsxs)(r.A,{groupId:"repo-layout",defaultValue:"workspaces",values:[{label:"Workspaces",value:"workspaces"},{label:"Non-workspaces",value:"project"}],children:[(0,a.jsx)(i.A,{value:"workspaces",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"/\n\u251c\u2500\u2500 .moon/\n\u251c\u2500\u2500 crates/\n\u2502   \u251c\u2500\u2500 client/\n|   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2502   \u2514\u2500\u2500 Cargo.toml\n\u2502   \u251c\u2500\u2500 server/\n|   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2502   \u2514\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 utils/\n|       \u251c\u2500\u2500 ...\n\u2502       \u2514\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 target/\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 moon.yml\n"})})}),(0,a.jsx)(i.A,{value:"project",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"/\n\u251c\u2500\u2500 .moon/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 target/\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 moon.yml\n"})})})]}),"\n",(0,a.jsxs)(n.h3,{id:"example-moonyml",children:["Example ",(0,a.jsx)(n.code,{children:"moon.yml"})]}),"\n",(0,a.jsx)(n.p,{children:"The following configuration represents a base that covers most Rust projects."}),"\n",(0,a.jsxs)(r.A,{groupId:"repo-layout",defaultValue:"workspaces",values:[{label:"Workspaces",value:"workspaces"},{label:"Non-workspaces",value:"project"}],children:[(0,a.jsx)(i.A,{value:"workspaces",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="<project>/moon.yml"',children:"language: 'rust'\nlayer: 'application'\n\nenv:\n  CARGO_TERM_COLOR: 'always'\n\nfileGroups:\n  sources:\n    - 'crates/*/src/**/*'\n    - 'crates/*/Cargo.toml'\n    - 'Cargo.toml'\n  tests:\n    - 'crates/*/benches/**/*'\n    - 'crates/*/tests/**/*'\n\ntasks:\n  build:\n    command: 'cargo build'\n    inputs:\n      - '@globs(sources)'\n  check:\n    command: 'cargo check --workspace'\n    inputs:\n      - '@globs(sources)'\n  format:\n    command: 'cargo fmt --all --check'\n    inputs:\n      - '@globs(sources)'\n      - '@globs(tests)'\n  lint:\n    command: 'cargo clippy --workspace'\n    inputs:\n      - '@globs(sources)'\n      - '@globs(tests)'\n  test:\n    command: 'cargo test --workspace'\n    inputs:\n      - '@globs(sources)'\n      - '@globs(tests)'\n"})})}),(0,a.jsx)(i.A,{value:"project",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="<project>/moon.yml"',children:"language: 'rust'\nlayer: 'application'\n\nenv:\n  CARGO_TERM_COLOR: 'always'\n\nfileGroups:\n  sources:\n    - 'src/**/*'\n    - 'Cargo.toml'\n  tests:\n    - 'benches/**/*'\n    - 'tests/**/*'\n\ntasks:\n  build:\n    command: 'cargo build'\n    inputs:\n      - '@globs(sources)'\n  check:\n    command: 'cargo check'\n    inputs:\n      - '@globs(sources)'\n  format:\n    command: 'cargo fmt --check'\n    inputs:\n      - '@globs(sources)'\n      - '@globs(tests)'\n  lint:\n    command: 'cargo clippy'\n    inputs:\n      - '@globs(sources)'\n      - '@globs(tests)'\n  test:\n    command: 'cargo test'\n    inputs:\n      - '@globs(sources)'\n      - '@globs(tests)'\n"})})})]}),"\n",(0,a.jsx)(n.h2,{id:"cargo-integration",children:"Cargo integration"}),"\n",(0,a.jsx)(n.p,{children:"You can't use Rust without Cargo -- well you could but why would you do that? With moon, we're doing\nour best to integrate with Cargo as much as possible. Here's a few of the benefits we currently\nprovide."}),"\n",(0,a.jsx)(n.h3,{id:"global-binaries",children:"Global binaries"}),"\n",(0,a.jsxs)(n.p,{children:["Cargo supports global binaries through the\n",(0,a.jsx)(n.a,{href:"https://doc.rust-lang.org/cargo/commands/cargo-install.html",children:(0,a.jsx)(n.code,{children:"cargo install"})})," command, which\ninstalls a crate to ",(0,a.jsx)(n.code,{children:"~/.cargo/bin"}),", or makes it available through the ",(0,a.jsx)(n.code,{children:"cargo <crate>"})," command. These\nare extremely beneficial for development, but they do require every developer to manually install\nthe crate (and appropriate version) to their machine."]}),"\n",(0,a.jsxs)(n.p,{children:["With moon, this is no longer an issue with the ",(0,a.jsx)(n.a,{href:"../../config/toolchain#bins",children:(0,a.jsx)(n.code,{children:"rust.bins"})})," setting.\nThis setting requires a list of crates (with optional versions) to install, and moon will install\nthem as part of the task runner install dependencies action. Furthermore, binaries will be installed\nwith ",(0,a.jsx)(n.a,{href:"https://crates.io/crates/cargo-binstall",children:(0,a.jsx)(n.code,{children:"cargo-binstall"})})," in an effort to reduce build and\ncompilation times."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml" {2-4}',children:"rust:\n  bins:\n    - 'cargo-make@0.35.0'\n    - 'cargo-nextest'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["At this point, tasks can be configured to run this binary as a command. The ",(0,a.jsx)(n.code,{children:"cargo"})," prefix is\noptional, as we'll inject it when necessary."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="<project>/moon.yml"',children:"tasks:\n  test:\n    command: 'nextest run --workspace'\n    toolchain: 'rust'\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"cargo-binstall"})," crate may require a ",(0,a.jsx)(n.code,{children:"GITHUB_TOKEN"})," environment variable to make GitHub Releases\nAPI requests, especially in CI. If you're being rate limited, or fail to find a download, try\ncreating a token with necessary permissions."]})}),"\n",(0,a.jsx)(n.h3,{id:"lockfile-handling",children:"Lockfile handling"}),"\n",(0,a.jsxs)(n.p,{children:["To expand our integration even further, we also take ",(0,a.jsx)(n.code,{children:"Cargo.lock"})," into account, and apply the\nfollowing automations when a target is being ran:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If the lockfile does not exist, we generate one with\n",(0,a.jsx)(n.a,{href:"https://doc.rust-lang.org/cargo/commands/cargo-generate-lockfile.html",children:(0,a.jsx)(n.code,{children:"cargo generate-lockfile"})}),"."]}),"\n",(0,a.jsx)(n.li,{children:"We parse and extract the resolved checksums and versions for more accurate hashing."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,a.jsxs)(n.h3,{id:"should-we-cache-the-target-directory-as-an-output",children:["Should we cache the ",(0,a.jsx)(n.code,{children:"target"})," directory as an output?"]}),"\n",(0,a.jsx)(n.p,{children:"No, we don't believe so. Both moon and Cargo support incremental caching, but they're not entirely\ncompatible, and will most likely cause problems when used together."}),"\n",(0,a.jsx)(n.p,{children:"The biggest factor is that moon's caching and hydration uses a tarball strategy, where each task\nwould unpack a tarball on cache hit, and archive a tarball on cache miss. The Cargo target directory\nis extremely large (moon's is around 50gb), and coupling this with our tarball strategy is not\nviable. This would cause massive performance degradation."}),"\n",(0,a.jsxs)(n.p,{children:["However, at maximum, you ",(0,a.jsx)(n.em,{children:"could"})," cache the compiled binary itself as an output, instead of the\nentire target directory. Example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"tasks:\n  build:\n    command: 'cargo build --release'\n    outputs: ['target/release/moon']\n"})}),"\n",(0,a.jsx)(n.h3,{id:"how-can-we-improve-ci-times",children:"How can we improve CI times?"}),"\n",(0,a.jsx)(n.p,{children:"Rust is known for slow build times and CI is no exception. With that being said, there are a few\npatterns to help alleviate this, both on the moon side and outside of it."}),"\n",(0,a.jsxs)(n.p,{children:["To start, you can cache Rust builds in CI. This is a non-moon solution to the ",(0,a.jsx)(n.code,{children:"target"})," directory\nproblem above."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["If you use GitHub Actions, feel free to use our\n",(0,a.jsx)(n.a,{href:"https://github.com/moonrepo/setup-rust",children:"moonrepo/setup-rust"})," action, which has built-in caching."]}),"\n",(0,a.jsxs)(n.li,{children:["A more integrated solution is ",(0,a.jsx)(n.a,{href:"https://crates.io/crates/sccache",children:"sccache"}),", which stores build\nartifacts in a cloud storage provider."]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},78296:(e,n,t)=>{t.d(n,{A:()=>w});var o=t(63696),a=t(11750),s=t(90766),r=t(49519),i=t(14395),l=t(35043),c=t(44544),d=t(94243);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:a}}=e;return{value:n,label:t,attributes:o,default:a}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,o.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=h(e),[r,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:s}))),[c,u]=p({queryString:t,groupId:a}),[g,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,d.Dv)(t);return[a,(0,o.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),f=(()=>{const e=c??g;return m({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{f&&l(f)}),[f]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)}),[u,b,s]),tabValues:s}}var b=t(86681);const f={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};var x=t(62540);function j(e){let{className:n,block:t,selectedValue:o,selectValue:r,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),a=i[t].value;a!==o&&(c(n),r(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...s,className:(0,a.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:s}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,o.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function y(e){const n=g(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,x.jsx)(j,{...n,...e}),(0,x.jsx)(v,{...n,...e})]})}function w(e){const n=(0,b.A)();return(0,x.jsx)(y,{...e,children:u(e.children)},String(n))}}}]);