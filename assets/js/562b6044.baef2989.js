"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77368],{22512:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var i=o(96670),s=o(62540),t=o(43023);const r={slug:"moon-v1.33",title:"moon v1.33 - Alpha support for toolchain WASM plugins",authors:["milesj"],tags:["toolchain","wasm","plugin","moonx","schema"],image:"./img/moon/v1.33.png"},a=void 0,l={image:o(35643).A,authorsImageUrls:[void 0]},c=[{value:"Alpha release of toolchain WASM plugins",id:"alpha-release-of-toolchain-wasm-plugins",level:2},{value:"TypeScript toolchain",id:"typescript-toolchain",level:3},{value:"Experimental <code>moonx</code> executable",id:"experimental-moonx-executable",level:2},{value:"Dynamic JSON schemas",id:"dynamic-json-schemas",level:2},{value:"Other changes",id:"other-changes",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"With this release, we're stoked to provide an initial release for plugin support."}),"\n",(0,s.jsx)(n.h2,{id:"alpha-release-of-toolchain-wasm-plugins",children:"Alpha release of toolchain WASM plugins"}),"\n",(0,s.jsxs)(n.p,{children:["For over a ",(0,s.jsx)(n.a,{href:"./2024-roadmap#plugin-based-architecture",children:"year now"}),", we've talked about supporting\nWASM-based toolchain plugins... but what's taking so long? Migrating from a \"hard-coded in core\"\napproach to a dynamic plugin approach was actually quite difficult, especially in Rust. It took us\nway longer than we expected."]}),"\n",(0,s.jsxs)(n.p,{children:["With that said, we're excited to announce alpha support for WASM-based toolchain plugins. In this\nrelease, we have a working solution, but with partial support for the toolchain's\n",(0,s.jsx)(n.a,{href:"/docs/how-it-works/languages#tier-structure-and-responsibilities",children:"tiered features"}),". At this point\nin time, we provide full support for tier 0, major support for tier 1 excluding lockfile/manifest\nparsing, minor support for tier 2, no support for tier 3 (but will use\n",(0,s.jsx)(n.a,{href:"/docs/proto/wasm-plugin",children:"proto's APIs"}),"), and support for non-tiered features, like\n",(0,s.jsx)(n.a,{href:"/docs/commands/init",children:(0,s.jsx)(n.code,{children:"moon init"})})," and ",(0,s.jsx)(n.a,{href:"/docs/commands/docker",children:(0,s.jsx)(n.code,{children:"moon docker"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"If you're curious, the following WASM function APIs are now available:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"register_toolchain"})," - Registers the toolchain and provide metadata for detection and other\npurposes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"initialize_toolchain"})," - Provides prompts to use during ",(0,s.jsx)(n.code,{children:"moon init"})," to gather settings values."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"define_toolchain_config"})," - Defines a configuration schema for use within JSON schemas."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"define_docker_metadata"})," - Defines metadata related to ",(0,s.jsx)(n.code,{children:"docker"})," commands."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"hash_task_contents"})," - Injects content into the task hashing process."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prune_docker"})," - Custom operations to run during ",(0,s.jsx)(n.code,{children:"docker prune"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scaffold_docker"})," - Custom operations to run during ",(0,s.jsx)(n.code,{children:"docker scaffold"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sync_project"})," - Runs syncing operations per project (during the ",(0,s.jsx)(n.code,{children:"SyncProject"})," action)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sync_workspace"})," - Runs syncing operations at the workspace root (during the ",(0,s.jsx)(n.code,{children:"SyncWorkspace"}),"\naction)."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We know everyone is very excited about these plugins, so feel free to start using them today!\nHowever, since we don't have full tiered support, most of the advanced functionality related to\nrunning tasks is currently not supported (except for task hashing which is supported)."}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, we do ",(0,s.jsx)(n.em,{children:"not"})," have documentation yet for these new APIs, but we do have the following\nresources to help you get started:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/guides/wasm-plugins",children:"Getting started with WASM plugins"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/moonrepo/plugins/tree/master/toolchains",children:"Example toolchain WASM plugins"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.a,{href:"https://docs.rs/moon_pdk",children:[(0,s.jsx)(n.code,{children:"moon_pdk"})," documentation"]})," (functions, macros, etc)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.a,{href:"https://docs.rs/moon_pdk_api",children:[(0,s.jsx)(n.code,{children:"moon_pdk_api"})," documentation"]})," (structs, enums, etc)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"typescript-toolchain",children:"TypeScript toolchain"}),"\n",(0,s.jsxs)(n.p,{children:["To verify that our WASM plugin implementation works correctly, we've\n",(0,s.jsx)(n.a,{href:"https://github.com/moonrepo/plugins/tree/master/toolchains/typescript",children:"migrated the TypeScript toolchain entirely to a WASM plugin"}),",\nand it's no longer hard-coded in our Rust core! If you've configured\n",(0,s.jsx)(n.a,{href:"/docs/config/toolchain#typescript",children:(0,s.jsx)(n.code,{children:"typescript"})})," in\n",(0,s.jsx)(n.a,{href:"/docs/config/toolchain",children:(0,s.jsx)(n.code,{children:".moon/toolchain.yml"})}),", then you'll automatically use the new plugin under\nthe hood."]}),"\n",(0,s.jsx)(n.p,{children:"This is our first step in supporting plugins in core. We chose TypeScript as our 1st plugin because\nit was the simplest of all the toolchains, was primarily used for project syncing, and did not\nrequire all tiered APIs."}),"\n",(0,s.jsx)(n.p,{children:'With that said, most of the code had to be rewritten when porting, but we tried to keep as much\nparity as possible. Please report an issues or differences you encounter. Additionally, because\nTypeScript is now a "true" toolchain, it will appear in the toolchains list for projects and tasks.\nThis is required since it runs operations in the context of the plugin.'}),"\n",(0,s.jsx)(n.p,{children:"Because toolchain plugins are configured differently internally, and since TypeScript is now a\nplugin, the configuration syntax for disabling the TypeScript toolchain at the project-level has\nchanged. While not a breaking change in this release, the old format will be removed in the future."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",metastring:'title="moon.yml"',children:"# Before\ntoolchain:\n  typescript:\n    disable: true\n\n# After\ntoolchain:\n  typescript: false # or null\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["If you use the TypeScript toolchain, you'll need to update your configuration files or editor to\npoint to the newer ",(0,s.jsx)(n.a,{href:"#dynamic-json-schemas",children:"JSON schemas"}),', otherwise your editor may error with\n"Property typescript is not allowed".']})}),"\n",(0,s.jsxs)(n.h2,{id:"experimental-moonx-executable",children:["Experimental ",(0,s.jsx)(n.code,{children:"moonx"})," executable"]}),"\n",(0,s.jsxs)(n.p,{children:["Based on a ",(0,s.jsx)(n.a,{href:"https://github.com/moonrepo/moon/issues/1828",children:"request from the community"}),", we're\nintroducing a new executable ",(0,s.jsx)(n.code,{children:"moonx"}),", which is simply a shorthand for ",(0,s.jsx)(n.code,{children:"moon run ..."}),'. In the future\nwe will expand this with more "shorthand" functionality.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"$ moonx app:build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Because of our current release process, the ",(0,s.jsx)(n.code,{children:"moonx"})," executable is ",(0,s.jsx)(n.em,{children:"not"})," packaged in the release (on\nGitHub), and is instead created the first time ",(0,s.jsx)(n.code,{children:"moon"})," runs. Furthermore, ",(0,s.jsx)(n.code,{children:"moonx"})," is not a binary\nexecutable, and is instead a shim (a Bash script on Unix, and a PowerShell (",(0,s.jsx)(n.code,{children:".ps1"}),") script on\nWindows). In the future, this will become a true binary."]}),"\n",(0,s.jsx)(n.h2,{id:"dynamic-json-schemas",children:"Dynamic JSON schemas"}),"\n",(0,s.jsxs)(n.p,{children:["With the initial support for toolchain plugins, the available configuration in\n",(0,s.jsx)(n.a,{href:"/docs/config/toolchain",children:(0,s.jsx)(n.code,{children:".moon/toolchain.yml"})})," and ",(0,s.jsx)(n.a,{href:"/docs/config/project",children:(0,s.jsx)(n.code,{children:"moon.yml"})})," is no longer\nstatic, and is instead dynamic based on the enabled/configured toolchains. Because of this, the JSON\nschemas provided at ",(0,s.jsx)(n.code,{children:"moonrepo.dev"})," and in the GitHub release are not accurate for some toolchain\nrelated settings, but accurate for everything else."]}),"\n",(0,s.jsxs)(n.p,{children:["This may lead to a poor developer experience where your editor shows errors for unknown settings. To\nremedy this, we now generate dynamic schemas at ",(0,s.jsx)(n.code,{children:".moon/cache/schemas"})," with accurate settings. If\nyou're editor supports the ",(0,s.jsx)(n.code,{children:"$schema"})," property, you can update them like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title=".moon/toolchain.yml"',children:"$schema: './cache/schemas/toolchain.json'\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="app/moon.yml"',children:"$schema: '../.moon/cache/schemas/toolchain.json'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The VS Code YAML server does not support the\n",(0,s.jsxs)(n.a,{href:"https://github.com/redhat-developer/yaml-language-server/pull/970",children:[(0,s.jsx)(n.code,{children:"$schema"})," property"]}),", but there\nis a\n",(0,s.jsx)(n.a,{href:"https://github.com/redhat-developer/yaml-language-server?tab=readme-ov-file#using-inlined-schema",children:"work around"}),".\nHowever, that syntax is a bit unfortunate, so our official moon VS Code extension supports updating\n",(0,s.jsx)(n.code,{children:".vscode/settings"}),'. Simply open the command palette and select "moon: Append YAML schemas\nconfiguration to settings".']}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["These schemas are automatically generated through ",(0,s.jsx)(n.a,{href:"/docs/commands/run",children:(0,s.jsx)(n.code,{children:"moon run"})})," but can be\nmanually generated with ",(0,s.jsx)(n.a,{href:"/docs/commands/sync/config-schemas",children:(0,s.jsx)(n.code,{children:"moon sync config-schemas"})}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,s.jsxs)(n.p,{children:["View the ",(0,s.jsx)(n.a,{href:"https://github.com/moonrepo/moon/releases/tag/v1.33.0",children:"official release"})," for a full list\nof changes."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Added support for ",(0,s.jsx)(n.code,{children:"moon run ~:build"}),", which will run the ",(0,s.jsx)(n.code,{children:"build"})," task in the closest project\n(traversing upwards)."]}),"\n",(0,s.jsxs)(n.li,{children:["Added ",(0,s.jsx)(n.code,{children:"$XDG_DATA_HOME"})," support when detecting the moon store. Will be used if ",(0,s.jsx)(n.code,{children:"$MOON_HOME"})," is not\nset, and will fallback to ",(0,s.jsx)(n.code,{children:"$HOME/.moon"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Added elapsed/timing information to child processes and WASM calls within logs."}),"\n",(0,s.jsx)(n.li,{children:"Improved the handling of CTRL-C, CTRL-BREAK, and other signals on Windows."}),"\n",(0,s.jsxs)(n.li,{children:["Updated ",(0,s.jsx)(n.code,{children:"moon init"})," with toolchain plugin support."]}),"\n",(0,s.jsxs)(n.li,{children:["Updated ",(0,s.jsx)(n.code,{children:"toolchain.default"})," in ",(0,s.jsx)(n.code,{children:"moon.yml"})," to support a list of IDs."]}),"\n",(0,s.jsxs)(n.li,{children:["Updated file hashing (via ",(0,s.jsx)(n.code,{children:"git hash-object"}),") to continously pipe stdin to avoid hanging processes."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},35643:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/v1.33-d807ea1d0b4967467fe7c6de2989f0e5.png"},43023:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var i=o(63696);const s={},t=i.createContext(s);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(t.Provider,{value:n},e.children)}},96670:e=>{e.exports=JSON.parse('{"permalink":"/blog/moon-v1.33","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-03-13_moon-v1.33.mdx","source":"@site/blog/2025-03-13_moon-v1.33.mdx","title":"moon v1.33 - Alpha support for toolchain WASM plugins","description":"With this release, we\'re stoked to provide an initial release for plugin support.","date":"2025-03-13T00:00:00.000Z","tags":[{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"moonx","permalink":"/blog/tags/moonx"},{"inline":true,"label":"schema","permalink":"/blog/tags/schema"}],"readingTime":5.38,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.33","title":"moon v1.33 - Alpha support for toolchain WASM plugins","authors":["milesj"],"tags":["toolchain","wasm","plugin","moonx","schema"],"image":"./img/moon/v1.33.png"},"unlisted":false,"prevItem":{"title":"moonbase has been sunset","permalink":"/blog/moonbase-sunset"},"nextItem":{"title":"proto v0.47 - New backend system & asdf support","permalink":"/blog/proto-v0.47"}}')}}]);