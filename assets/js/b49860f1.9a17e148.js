"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[60607],{43023:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(63696);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},52468:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"proto/plugins","title":"Plugins","description":"proto supports a pluggable architecture as a means for consumers to integrate and manage custom","source":"@site/docs/proto/plugins.mdx","sourceDirName":"proto","slug":"/proto/plugins","permalink":"/docs/proto/plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/moonrepo/moon/tree/master/website/docs/proto/plugins.mdx","tags":[],"version":"current","frontMatter":{"title":"Plugins"},"sidebar":"proto","previous":{"title":"Supported tools","permalink":"/docs/proto/tools"},"next":{"title":"WASM","permalink":"/docs/proto/wasm-plugin"}}');var s=o(62540),i=o(43023);const r={title:"Plugins"},l=void 0,a={},p=[{value:"Enabling plugins",id:"enabling-plugins",level:2},{value:"Creating plugins",id:"creating-plugins",level:2},{value:"Publish a plugin",id:"publish-a-plugin",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["proto supports a pluggable architecture as a means for consumers to integrate and manage custom\ntools (languages, CLIs, etc) within proto's toolchain. It's not possible for proto to support\n",(0,s.jsx)(n.em,{children:"everything"})," in core directly, so plugins are a way for the community to extend the toolchain to\ntheir needs."]}),"\n",(0,s.jsx)(n.h2,{id:"enabling-plugins",children:"Enabling plugins"}),"\n",(0,s.jsxs)(n.p,{children:["Plugins can be enabled by configuring them in ",(0,s.jsx)(n.a,{href:"./config#plugins",children:(0,s.jsx)(n.code,{children:".prototools"})})," files, within the\n",(0,s.jsx)(n.code,{children:"[plugins]"})," section. The map key is the plugin name ",(0,s.jsx)(n.em,{children:"in kebab-case"}),", which is used as the\nbinary/tool name in proto, and also the name for configuration and cache purposes. The map value is\na ",(0,s.jsx)(n.a,{href:"../guides/wasm-plugins#configuring-plugin-locations",children:"plugin locator string"})," that defines a\nprotocol and source location."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'title=".prototools"',children:'[plugins.tools]\n<id> = "<protocol>://<location>"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"creating-plugins",children:"Creating plugins"}),"\n",(0,s.jsxs)(n.p,{children:["To ease the plugin development process, proto supports 2 types of plugins, a\n",(0,s.jsx)(n.a,{href:"./non-wasm-plugin",children:"non-WASM configuration based plugin"})," for basic use cases, and a\n",(0,s.jsx)(n.a,{href:"./wasm-plugin",children:"WASM based plugin"})," for advanced use cases."]}),"\n",(0,s.jsx)(n.h2,{id:"publish-a-plugin",children:"Publish a plugin"}),"\n",(0,s.jsxs)(n.p,{children:["proto's registry is currently powered by static JSON files located in our official\n",(0,s.jsx)(n.a,{href:"https://github.com/moonrepo/proto/tree/master/registry",children:"proto repository"}),". View that link for\ninformation on how to publish a plugin."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);