"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[18897],{11667:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"concepts/project","title":"Projects","description":"A project is a library, application, package, binary, tool, etc, that contains source files, test","source":"@site/docs/concepts/project.mdx","sourceDirName":"concepts","slug":"/concepts/project","permalink":"/docs/concepts/project","draft":false,"unlisted":false,"editUrl":"https://github.com/moonrepo/moon/tree/master/website/docs/concepts/project.mdx","tags":[],"version":"current","frontMatter":{"title":"Projects"},"sidebar":"docs","previous":{"title":"Query language","permalink":"/docs/concepts/query-lang"},"next":{"title":"Targets","permalink":"/docs/concepts/target"}}');var r=t(62540),i=t(43023);const c={title:"Projects"},a=void 0,o={},d=[{value:"IDs",id:"ids",level:2},{value:"Aliases",id:"aliases",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Configuration",id:"configuration",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["A project is a library, application, package, binary, tool, etc, that contains source files, test\nfiles, assets, resources, and more. A project must exist and be configured within a\n",(0,r.jsx)(n.a,{href:"./workspace",children:"workspace"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"ids",children:"IDs"}),"\n",(0,r.jsxs)(n.p,{children:["A project identifier (or name) is a unique resource for locating a project. The ID is explicitly\nconfigured within ",(0,r.jsx)(n.a,{href:"../config/workspace",children:(0,r.jsx)(n.code,{children:".moon/workspace.yml"})}),", as a key within the\n",(0,r.jsx)(n.a,{href:"../config/workspace#projects",children:(0,r.jsx)(n.code,{children:"projects"})})," setting, and can be written in camel/kebab/snake case.\nIDs support alphabetic unicode characters, ",(0,r.jsx)(n.code,{children:"0-9"}),", ",(0,r.jsx)(n.code,{children:"_"}),", ",(0,r.jsx)(n.code,{children:"-"}),", ",(0,r.jsx)(n.code,{children:"/"}),", ",(0,r.jsx)(n.code,{children:"."}),", and must start with a\ncharacter."]}),"\n",(0,r.jsx)(n.p,{children:"IDs are used heavily by configuration and the command line to link and reference everything. They're\nalso a much easier concept for remembering projects than file system paths, and they typically can\nbe written with less key strokes."}),"\n",(0,r.jsxs)(n.p,{children:["Lastly, a project ID can be paired with a task ID to create a ",(0,r.jsx)(n.a,{href:"./target",children:"target"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"aliases",children:"Aliases"}),"\n",(0,r.jsxs)(n.p,{children:["Aliases are a secondary approach for naming projects, and can be used as a drop-in replacement for\nstandard names. What this means is that an alias can also be used when configuring dependencies, or\ndefining ",(0,r.jsx)(n.a,{href:"./target",children:"targets"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["However, the difference between aliases and names is that aliases ",(0,r.jsx)(n.em,{children:"can not"})," be explicit configured\nin moon. Instead, they are specific to a project's primary programming language, and are inferred\nbased on that context (when enabled in settings). For example, a JavaScript or TypeScript project\nwill use the ",(0,r.jsx)(n.code,{children:"name"})," field from its ",(0,r.jsx)(n.code,{children:"package.json"})," as the alias."]}),"\n",(0,r.jsx)(n.p,{children:"Because of this, a project can either be referenced by its name or alias, or both. Choose the\npattern that makes the most sense for your company or team!"}),"\n",(0,r.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["Projects can depend on other projects within the ",(0,r.jsx)(n.a,{href:"./workspace",children:"workspace"})," to build a\n",(0,r.jsx)(n.a,{href:"../how-it-works/action-graph",children:"project graph"}),", and in turn, an action graph for executing\n",(0,r.jsx)(n.a,{href:"./task",children:"tasks"}),". Project dependencies are divided into 2 categories:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explicit dependencies"})," - These are dependencies that are explicitly defined in a project's\n",(0,r.jsx)(n.a,{href:"../config/project",children:(0,r.jsx)(n.code,{children:"moon.yml"})})," config file, using the ",(0,r.jsx)(n.a,{href:"../config/project#dependson",children:(0,r.jsx)(n.code,{children:"dependsOn"})}),"\nsetting."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implicit dependencies"})," - These are dependencies that are implicitly discovered by moon when\nscanning the repository. How an implicit dependency is discovered is based on the project's\n",(0,r.jsx)(n.a,{href:"../config/project#language",children:(0,r.jsx)(n.code,{children:"language"})})," setting, and how that language's ecosystem functions."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Projects can be configured with an optional ",(0,r.jsx)(n.a,{href:"../config/project",children:(0,r.jsx)(n.code,{children:"moon.yml"})})," in the project root, or\nthrough the optional workspace-level ",(0,r.jsx)(n.a,{href:"../config/tasks",children:(0,r.jsx)(n.code,{children:".moon/tasks.yml"})}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},43023:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(63696);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);