"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[48130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"moon-v1.39","metadata":{"permalink":"/blog/moon-v1.39","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-07-24_moon-v1.39.mdx","source":"@site/blog/2025-07-24_moon-v1.39.mdx","title":"moon v1.39 - Improved task inputs, better proto integration, and project layers","description":"This is a rather small release, but it does include some important changes to task inputs, and","date":"2025-07-24T00:00:00.000Z","tags":[{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"input","permalink":"/blog/tags/input"},{"inline":true,"label":"uri","permalink":"/blog/tags/uri"},{"inline":true,"label":"object","permalink":"/blog/tags/object"},{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"project","permalink":"/blog/tags/project"},{"inline":true,"label":"layer","permalink":"/blog/tags/layer"}],"readingTime":4.39,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.39","title":"moon v1.39 - Improved task inputs, better proto integration, and project layers","authors":["milesj"],"tags":["task","input","uri","object","proto","project","layer"],"image":"./img/moon/v1.39.png"},"unlisted":false,"nextItem":{"title":"proto v0.51 - Unstable lockfiles and plugin registries","permalink":"/blog/proto-v0.51"}},"content":"This is a rather small release, but it does include some important changes to task inputs, and\\nproto\'s integration.\\n\\n\x3c!--truncate--\x3e\\n\\n## Improved task inputs\\n\\nA few months ago we introduced an\\n[RFC for improving task inputs](https://github.com/moonrepo/moon/issues/1985) that introduces new\\nsyntax, functionality, and input types. In this release, we have implemented a portion of the RFC\\nfor testing before we implement the rest. Continue reading for more details!\\n\\n### New formats\\n\\nTo start, we are introducing 2 new formats for configuring task inputs, a URI format and an object\\nformat, both of which support custom parameters.\\n\\n#### URIs\\n\\nURIs should be rather familiar, as they are a string prefixed with a scheme (`://`), followed by a\\nvalue, and an optional list of query parameters (`?`). Currently files can be specified using the\\n[`file://` scheme](/docs/config/project#file-paths), and globs with the\\n[`glob://` scheme](/docs/config/project#glob-patterns). Environment variables do not support URIs.\\n\\n```yml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    # ...\\n    inputs:\\n      - \'file:///*.config.js?optional\'\\n      - \'glob://src/**/*.ts\'\\n```\\n\\n:::info\\n\\nFiles and globs can still be configured using literal strings. The URI format can be used when\\ncustomizing parameters!\\n\\n:::\\n\\n#### Objects\\n\\nObjects provide an alternative to strings, allowing you to customize parameters in a standard and\\nfamiliar format. Files can be specified using the [`file` key](/docs/config/project#file-paths), and\\nglobs with the [`glob` key](/docs/config/project#glob-patterns). Environment variables do not\\nsupport objects.\\n\\n```yml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    # ...\\n    inputs:\\n      - file: \'/*.config.js\'\\n        optional: true\\n      - glob: \'src/**/*.ts\'\\n```\\n\\n### New parameters\\n\\nAs mentioned above, file and glob inputs now support parameters, which can be customized using URI\\nand object formats. The following parameters are available:\\n\\n#### Files\\n\\n- `content` (`string`) - When determining affected state, will match against the file\'s content\\n  using the defined regex pattern, instead of relying on file existence.\\n- `optional` (`boolean`) - When hashing and set to `true` and the file is missing, will not log a\\n  warning. When set to `false` and the file is missing, will fail with an error. Defaults to logging\\n  a warning.\\n\\n#### Globs\\n\\n- `cache` (`boolean`) - When gathering inputs for hashing, defines whether the glob results should\\n  be cached for the duration of the moon process. Defaults to `true`.\\n\\n## Better proto integration\\n\\nIn previous versions of moon, we would automatically install [proto](/proto) for you based on\\ncertain conditions. This logic was applied to all `moon` sub-commands, which was not necessary, as\\nit was only required for task running related commands.\\n\\nTo improve this, we have integrated proto into the action pipeline through a new action,\\n`SetupProto`, which runs before any `SetupToolchain` action. With this, proto is only installed when\\nrequired by that specific toolchain, and not for every command.\\n\\n### New `proto` setting\\n\\nAdditionally, we are introducing a [`proto`](/docs/config/toolchain#proto) setting in\\n[`.moon/toolchain.yml`](/docs/config/toolchain), which can be used to control the integration of\\nproto in moon. To start, you can now customize the proto version! This is extremely useful if you\\nwant to test new proto features, or need to rollback to an older version.\\n\\n```yml title=\\".moon/toolchain.yml\\"\\nproto:\\n  version: \'0.51.4\'\\n```\\n\\n### Other changes\\n\\nLastly, proto has been upgrade to [v0.51](https://github.com/moonrepo/proto/releases/tag/v0.51.0),\\nwhich includes 2 major features: lockfiles and custom registries. However, we have yet to test these\\nfeatures thoroughly in moon, so they are not \\"officially\\" supported yet, but you can still use them\\nif you wish. We will be adding support for these features in the future.\\n\\n## Project layers\\n\\nProject layers may sound like a new feature, but they are simply a rename of the project type. Going\\nforward, the `type` setting in [`moon.yml`](/docs/config/project) has been renamed to\\n[`layer`](/docs/config/project#layer), but backwards compatibility will be maintained until v2. Why\\nthe rename?\\n\\nThe term \\"layer\\" better reflects the purpose and functionality of this concept, as it defines a\\nlayer (the [`layer`](/docs/config/project#layer) setting) within the development stack (the\\n[`stack`](/docs/config/project#stack) setting), and helps to enforce proper relationships. This\\nchange aims to improve clarity and consistency in our configuration.\\n\\nFor example, the following layers are available, from highest to lowest. Layers can then depend on\\nlower layers, but not higher layers. Except for automations and applications, they can also depend\\non themself.\\n\\n| Layer           | Description                                                         |\\n| --------------- | ------------------------------------------------------------------- |\\n| `automation`    | An automated testing suite, like E2E, integration, or visual tests. |\\n| `application`   | An application of any kind.                                         |\\n| `tool`          | An internal tool, CLI, one-off script, etc.                         |\\n| `library`       | A self-contained, shareable, and publishable set of code.           |\\n| `scaffolding`   | Templates or generators for scaffolding.                            |\\n| `configuration` | Configuration files or infrastructure.                              |\\n| `unknown`       | When not configured.                                                |\\n\\nBecause of this rename, the following changes have been made:\\n\\n- `type` --\x3e `layer` in `moon.yml`\\n- `--type` --\x3e `--layer` in `moon query projects`\\n- `projectType` --\x3e `projectLayer` for MQL\\n- `$projectType` --\x3e `$projectLayer` for task tokens\\n- `enforceProjectTypeRelationships` --\x3e `enforceLayerRelationships` in `.moon/workspace.yml`\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.39.0) for a full list\\nof changes.\\n\\n- Added unstable support for bubbling up logs from WASM plugins.\\n- Updated the `@moonrepo/cli` npm package to no longer rely on postinstall scripts.\\n- Improved argument quoting for commands and scripts.\\n\\n## What\'s next?\\n\\nWith toolchains plugins being stabilized more, we\'d like to focus on some other areas.\\n\\n- Better command line argument parsing/joining (especially for task `args`)\\n- Pkl configuration improvements\\n- WASM toolchain documentation"},{"id":"proto-v0.51","metadata":{"permalink":"/blog/proto-v0.51","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-07-17_proto-v0.51.mdx","source":"@site/blog/2025-07-17_proto-v0.51.mdx","title":"proto v0.51 - Unstable lockfiles and plugin registries","description":"With this release, we\'re excited to introduce two major features that pave the way for proto\'s","date":"2025-07-17T00:00:00.000Z","tags":[{"inline":true,"label":"lockfile","permalink":"/blog/tags/lockfile"},{"inline":true,"label":"record","permalink":"/blog/tags/record"},{"inline":true,"label":"registry","permalink":"/blog/tags/registry"},{"inline":true,"label":"oci","permalink":"/blog/tags/oci"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"locator","permalink":"/blog/tags/locator"}],"readingTime":4.5,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.51","title":"proto v0.51 - Unstable lockfiles and plugin registries","authors":["milesj"],"tags":["lockfile","record","registry","oci","plugin","locator"],"image":"./img/proto/v0.51.png"},"unlisted":false,"prevItem":{"title":"moon v1.39 - Improved task inputs, better proto integration, and project layers","permalink":"/blog/moon-v1.39"},"nextItem":{"title":"moon v1.38 - Go WASM toolchain, MCP tools, terminal notifications, and more!","permalink":"/blog/moon-v1.38"}},"content":"With this release, we\'re excited to introduce two major features that pave the way for proto\'s\\nfuture!\\n\\n\x3c!--truncate--\x3e\\n\\n## Unstable lockfile support\\n\\nLockfiles have been requested by the community since proto\'s inception, but adopting them has been a\\nnon-trivial task, as it requires touching almost every aspect of proto. With that said, we\'ve been\\nslowly reworking the internals to support lockfiles, and with this release, we\'re introducing\\nunstable support for them!\\n\\nIf you\'re unaware of what lockfiles are, they allow you to pin the exact version (and checksum) of a\\ntool that is installed, ensuring that your development environment is consistent and reproducible.\\nIf you\'ve used package managers like npm, Cargo, or uv, you\'re likely familiar with this concept.\\n\\nIn proto, the concept of lockfiles is mostly the same, but the manner in which they are created and\\nupdated may differ based on other tools. To start, lockfiles in proto are _opt-in_ and can be\\nenabled with the new [`settings.unstable-lockfile`](/docs/proto/config#unstable-lockfile) setting in\\n`.prototools`.\\n\\n```toml title=\\".prototools\\"\\n[settings]\\nunstable-lockfile = true\\n```\\n\\nThis will create a `.protolock` file in the current directory, relative to the `.prototools` file.\\nIn effect, this locks that directory and all of its subdirectories. As a side-effect, nested\\nlockfiles are not supported.\\n\\nTo demonstrate how lockfiles work, installing the following tools with `proto install`...\\n\\n```toml title=\\".prototools\\"\\nbun = \\"1.2.0\\"\\ndeno = \\"2.4.0\\"\\nnode = \\"22.17.0\\"\\n\\n[settings]\\nunstable-lockfile = true\\n```\\n\\n... would generate the following `.protolock` file:\\n\\n```toml title=\\".protolock\\"\\n# Generated by proto. Do not modify!\\n\\n[[tools.bun]]\\nspec = \\"1.2.0\\"\\nversion = \\"1.2.0\\"\\nchecksum = \\"sha256:fa72173cb2220d00e2d2650fefdc0b5b37bfd8bb33d8d671b50efb409c2f5745\\"\\n\\n[[tools.deno]]\\nspec = \\"2.4.0\\"\\nversion = \\"2.4.0\\"\\nchecksum = \\"sha256:c913d018d64c48dcc5b7b90d844efb6d017595a7c1e237f89141df1b3ef8b962\\"\\n\\n[[tools.node]]\\nspec = \\"22.17.0\\"\\nversion = \\"22.17.0\\"\\nchecksum = \\"sha256:cc9cc294eaf782dd93c8c51f460da610cc35753c6a9947411731524d16e97914\\"\\n```\\n\\n### Updated workflows\\n\\nThe [`proto run`](/docs/proto/commands/run) (shims),\\n[`proto install`](/docs/proto/commands/install), and\\n[`proto uninstall`](/docs/proto/commands/uninstall) commands have been updated to support lockfiles.\\n\\nWhen running or installing tools and a matching specification exists in the lockfile, the locked\\nversion will be inherited even if there\'s a newer version upstream, and the tool\'s checksum will be\\nvalidated when available. These checks can be bypassed with the new `--update-lockfile` flag\\n(install only).\\n\\nInversely, when uninstalling tools, the lockfile will be updated to remove any matching\\nspecification records.\\n\\n### Still a work in progress\\n\\nWe are marking lockfiles as unstable as they have not been fully implemented or thoroughly tested.\\nThere are other commands like [`proto outdated`](/docs/proto/commands/outdated) and\\n[`proto status`](/docs/proto/commands/status) that are not lockfile aware yet, but will be in the\\nfuture.\\n\\nBut please, give them a whirl and let us know what you think!\\n\\n## Unstable OCI registries for plugin storage\\n\\nAnother important feature that is necessary for proto\'s success is support for an official plugin\\nregistry. Before we get to that, we need to lay the groundwork for how plugins are stored and\\ndistributed. With this release, we\'re introducing unstable support for\\n[OCI registries](https://opencontainers.org/) as a storage mechanism for plugins. If you\'re\\nunfamiliar with OCI registries, they are a standard for storing and distributing container images\\n(Docker), but can also be used to store other types of\\n[artifacts](https://oras.land/docs/concepts/artifact), in this case, WASM plugins.\\n\\nTo support registries, we have introduced a new\\n[`settings.unstable-registries`](/docs/proto/config#unstable-registries) setting in `.prototools`,\\nwhich allows you to configure a list of registries to query for applicable plugins. For example:\\n\\n```toml title=\\".prototools\\"\\n[settings]\\nunstable-registries = [\\n  { registry: \\"ghcr.io\\", namespace: \\"moonrepo\\" }\\n]\\n```\\n\\nAdditionally, we are introducing a new `registry://` plugin locator, which allows you to configure a\\nplugin by its OCI reference.\\n\\n```toml title=\\".prototools\\"\\n[plugins]\\n# Longform with tag\\nbun = \\"registry://ghcr.io/moonrepo/bun_tool:v1.2.3\\"\\n# Longform without tag\\nbun = \\"registry://ghcr.io/moonrepo/bun_tool\\"\\n# Shortform with tag\\nbun = \\"registry://bun_tool:v1.2.3\\"\\n# Shortform without tag\\nbun = \\"registry://bun_tool\\"\\n```\\n\\n### How it works\\n\\nUsing a container registry to store plugins seems odd at first, but it actually allows us to\\nleverage existing specifications, infrastructure, and tools to manage and distribute plugins. We\\ndon\'t want to re-invent the wheel here, so why not use something that most of the industry is\\nalready using?\\n\\nWith that said, how does this work in proto? Since we are not a container image, we use the\\n[artifact portion of the specification](https://oras.land/docs/concepts/artifact) instead.\\nPrimarily, plugins are stored in layers! The blob/content of WASM, TOML, JSON, and YAML plugins are\\nstored in CAS, and referenced in layers by a sha256 digest.\\n\\nAs for annotations, we support the\\n[OCI standard annotations](https://github.com/opencontainers/image-spec/blob/main/annotations.md),\\nbut will also support moonrepo-specific annotations in the future.\\n\\n:::info\\n\\nAt this time, we do not provide a mechanism for uploading plugins to a registry. You\'ll need to do\\nthat manually.\\n\\n:::\\n\\n### Official registry?\\n\\nWe do have plans to support an official moonrepo plugin registry, for both proto and moon. We are in\\nthe process of investigating solutions to this and will provide more details soon.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.51.0) for a full list\\nof changes.\\n\\n- Removed `--canary` from `proto install`, just use `canary` as the version specifier instead.\\n\\n## Looking for contributors\\n\\nWe have a lot of cool stuff planned for proto, like backend plugins, more official tools, improved\\nworkflows, an official registry, and more! So if you\'re interested in Rust or WASM, we would love\\nand appreciate your help. Feel free to ping us on Discord!"},{"id":"moon-v1.38","metadata":{"permalink":"/blog/moon-v1.38","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-06-24_moon-v1.38.mdx","source":"@site/blog/2025-06-24_moon-v1.38.mdx","title":"moon v1.38 - Go WASM toolchain, MCP tools, terminal notifications, and more!","description":"In this release, we\'re stoked to release the Go WASM toolchain plugin, and improved MCP/AI support!","date":"2025-06-24T00:00:00.000Z","tags":[{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"go","permalink":"/blog/tags/go"},{"inline":true,"label":"mcp","permalink":"/blog/tags/mcp"},{"inline":true,"label":"ai","permalink":"/blog/tags/ai"},{"inline":true,"label":"webhooks","permalink":"/blog/tags/webhooks"},{"inline":true,"label":"terminal","permalink":"/blog/tags/terminal"},{"inline":true,"label":"notifications","permalink":"/blog/tags/notifications"}],"readingTime":3.11,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.38","title":"moon v1.38 - Go WASM toolchain, MCP tools, terminal notifications, and more!","authors":["milesj"],"tags":["toolchain","wasm","plugin","go","mcp","ai","webhooks","terminal","notifications"],"image":"./img/moon/v1.38.png"},"unlisted":false,"prevItem":{"title":"proto v0.51 - Unstable lockfiles and plugin registries","permalink":"/blog/proto-v0.51"},"nextItem":{"title":"proto v0.50 - URL rewrites, on-init activation, preserved comments, and more","permalink":"/blog/proto-v0.50"}},"content":"In this release, we\'re stoked to release the Go WASM toolchain plugin, and improved MCP/AI support!\\n\\n\x3c!--truncate--\x3e\\n\\n## RFC: Task inheritance via inline configuration\\n\\nTask inheritance is one of moon\'s most powerful features, allowing you to define tasks at the\\ntop-level and have them automatically inherited by projects that match certain conditions. In it\'s\\ncurrent form, task inheritance is based on the file name of the configuration file, but this\\napproach has several limitations.\\n\\nWe\'re planning to improve task inheritance and have written up an\\n[RFC to discuss these changes](https://github.com/moonrepo/moon/issues/2023). We\'d appreciate any\\nand all feedback!\\n\\n## New Go toolchain powered by WASM\\n\\nOfficial Go toolchain support has been requested by the community for a long time now, and with the\\nsomewhat stabilization of WASM plugins and the introduction of the\\n[Rust toolchain in the last release](./moon-v1.37), we felt it was finally time to add Go! To enable\\nGo, run our new command or add an [`unstable_go`](/docs/config/toolchain#unstable_go) entry to\\n`.moon/toolchain.yml`.\\n\\n```shell\\n$ moon toolchain add unstable_go\\n```\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nunstable_go:\\n  version: \'1.24.0\'\\n  workspaces: true\\n```\\n\\nThe Go toolchain releases with full [tier 1, 2, and 3 support](/docs/how-it-works/languages)!\\nAdditionally, the following features and functionality is available when enabling the toolchain:\\n\\n- Supports Go workspaces through the `go.work` file. Can be disabled with the\\n  [`unstable_go.workspaces`](/docs/config/toolchain#unstable_go) setting.\\n- Extracts the `go.mod` `module` directive as a project alias.\\n- Extracts project relationships and dependency information from `go.mod` `require` directives.\\n- Extracts version and checksum information from `go.sum` and `go.work.sum` files.\\n- Injects Go globals directory (`GOBIN`) into task command/script child processes.\\n- Supports installing Go globals via `go install` commands. Can be customized with the\\n  [`unstable_go.bins`](/docs/config/toolchain#unstable_go) setting.\\n- Automatically runs `go mod` or `go work` commands when installing dependencies.\\n- Basic Docker image and pruning support.\\n\\nWe hope you enjoy this new Go toolchain. With that said, we are _not_ Go experts, and would love to\\nhear from you on what works, what doesn\'t, what can be improved, and what features you would like to\\nsee added!\\n\\n## New MCP tools\\n\\nIn our last release, we introduced the [`moon mcp` command](./moon-v1.37#mcp-editor-integration),\\noffering deep editor integration with AI models like GitHub Copilot and Cursor. This release expands\\non that by introducing 3 more tools to utilize:\\n\\n- `get_touched_files` - Gets touched files between base and head revisions.\\n- `sync_projects` - Runs the `SyncProject` action for one or many projects by `id`.\\n- `sync_workspace` - Runs the `SyncWorkspace` action.\\n\\n## New OS terminal notifications\\n\\nThis was a feature we originally scoped out during moon\'s inception, almost 3 years ago, but we\\nnever got around to implementing it. However, there has been some improvements to native operating\\nsystem notifications in Rust lately, so it felt like a good time to finally implement it!\\n\\nAnd on that note, we are introducing a new\\n[`notifier.terminalNotifications`](/docs/config/workspace#terminalnotifications) setting that allows\\nyou to receive terminal notifications for pipeline events.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nnotifier:\\n  terminalNotifications: \'failure\'\\n```\\n\\n> View the [official guide](/docs/guides/notifications) for more information!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.38.0) for a full list\\nof changes.\\n\\n- Added new `moon toolchain` command and sub-commands.\\n  - Add a toolchain to `.moon/toolchain.yml` with `moon toolchain add`.\\n  - View information about a toolchain plugin with `moon toolchain info`.\\n- Added a `notifier.webhookAcknowledge` setting, that ensures webhooks resolve with a 2XX status\\n  code.\\n- Updated proto to [v0.50.1](https://github.com/moonrepo/proto/releases/tag/v0.50.0) (from 0.49.4).\\n\\n## What\'s next?\\n\\nWith toolchains plugins being stabilized more, we\'d like to focus on some other areas.\\n\\n- Better command line argument parsing/joining (especially for task `args`)\\n- Better child process I/O piping\\n- WASM toolchain documentation"},{"id":"proto-v0.50","metadata":{"permalink":"/blog/proto-v0.50","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-06-11_proto-v0.50.mdx","source":"@site/blog/2025-06-11_proto-v0.50.mdx","title":"proto v0.50 - URL rewrites, on-init activation, preserved comments, and more","description":"In this release, we\'re landing a handful of quality of life improvements that have been requested by","date":"2025-06-11T00:00:00.000Z","tags":[{"inline":true,"label":"rewrite","permalink":"/blog/tags/rewrite"},{"inline":true,"label":"url","permalink":"/blog/tags/url"},{"inline":true,"label":"activation","permalink":"/blog/tags/activation"},{"inline":true,"label":"comments","permalink":"/blog/tags/comments"},{"inline":true,"label":"config","permalink":"/blog/tags/config"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"shell","permalink":"/blog/tags/shell"}],"readingTime":3.05,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.50","title":"proto v0.50 - URL rewrites, on-init activation, preserved comments, and more","authors":["milesj"],"tags":["rewrite","url","activation","comments","config","plugin","shell"],"image":"./img/proto/v0.50.png"},"unlisted":false,"prevItem":{"title":"moon v1.38 - Go WASM toolchain, MCP tools, terminal notifications, and more!","permalink":"/blog/moon-v1.38"},"nextItem":{"title":"moon v1.37 - Rust WASM toolchain and MCP support","permalink":"/blog/moon-v1.37"}},"content":"In this release, we\'re landing a handful of quality of life improvements that have been requested by\\nthe community.\\n\\n\x3c!--truncate--\x3e\\n\\n## Rewrite URLs for better interoperability\\n\\nproto is heavily reliant on URLs, as they power everything from tool and plugin downloading to\\nversion resolving. Many URLs are hard-coded into proto but most of them come from plugins. For the\\nmost part this is fine, but if you work within a corporate environment, or have a firewall, you may\\nhave to deal with proxy servers, mirrors, or other factors.\\n\\nUntil now, this was very difficult to circumvent, so we wanted to provide a built-in solution to\\nthis problem, and as such, we\'re introducing the new\\n[`url-rewrites`](/docs/proto/config#url-rewrites) configuration setting. This setting accepts a map\\nof regex patterns to replacements, and will rewrite URLs that match the pattern.\\n\\n```toml title=\\".prototools\\"\\n[settings.url-rewrites]\\n\\"github.com/(\\\\\\\\w+)/(\\\\\\\\w+)\\" = \\"gh-mirror.corp.com/$1/$2\\"\\n\\"mo+n\\" = \\"lunar\\"\\n```\\n\\nFor example, in the configuration above, any URL that contains `github.com` will be replaced with\\n`gh-mirror.corp.com`, and any URL that contains the word \\"moon\\" (with different length o\'s) will be\\nreplaced with \\"lunar\\". Learn more about URL rewriting in the settings documentation!\\n\\n## Activation flow now triggers immediately\\n\\nOur [activation flow](/docs/proto/workflows#shell-activation) (shell hooks) is seeing more and more\\nusage, with improved stability, but based on feedback we\'ve received, there was still some pain\\npoints. One of these pain points was that activation would not trigger immediately (new terminal\\nwindow/tab), and would only trigger after changing directories.\\n\\nThere was a way around this using the `--on-init` flag, but that was not easily discoverable, and\\nthe setup as a whole was not very intuitive. With this release, that flag has been deprecated and\\nthe activation flow now triggers immediately, so you can start using your tools right away.\\n\\nHistorically we\'ve been hesitent to do this, as we were worried about potential performance hits\\nwhen having to download WASM plugins, or refetch caches. However in practice this has not been an\\nissue.\\n\\n## Comments are now preserved in `.prototools`\\n\\nThis has been a long standing issue and a long requested feature, and it\'s finally here! Comments\\nare now preserved in `.prototools` files, and they\'ll no longer be removed when running `proto`\\ncommands that modify these files (like [`proto alias`](/docs/proto/commands/alias) or\\n[`proto pin`](/docs/proto/commands/pin)).\\n\\nHistorically this has been a hard problem to solve, as Rust serde (serialization/deserialization\\nlibrary) strips comments when deserializing (reading) the file. To solve this problem, we had to\\navoid serde, and operate on an AST-like structure instead. Because of this, we lose type-safety and\\nthere may be some edge cases not accounted for.\\n\\n## Plugin commands are now executed within a shell\\n\\nWhen a plugin executes a command (child process) on the host system (your computer), it now executes\\nit within a shell, e.g. `bash -c \\"command\\"`. This change was made to ensure environment variables\\n(like `PATH`), aliases, and other shell features that you have configured are available to the\\nplugin.\\n\\nBy default the shell to use is detected from the parent host process, but you can override it with\\nthe `PROTO_SHELL` environment variable. For example, to use `zsh` you can set:\\n\\n```shell\\nPROTO_SHELL=zsh\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.50.0) for a full list\\nof changes.\\n\\n- Added `--dir` and `--all` options to the [`proto bin`](/docs/proto/commands/bin) command.\\n- Added environment variable support to many non-tool related `.prototools` settings.\\n- Updated `proto install <tool>` (without version) to install a version pinned in `.prototools`,\\n  instead of the latest version."},{"id":"moon-v1.37","metadata":{"permalink":"/blog/moon-v1.37","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-06-03_moon-v1.37.mdx","source":"@site/blog/2025-06-03_moon-v1.37.mdx","title":"moon v1.37 - Rust WASM toolchain and MCP support","description":"In this release, we\'re stoked to release another WASM toolchain plugin, and experimental MCP/AI","date":"2025-06-03T00:00:00.000Z","tags":[{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"rust","permalink":"/blog/tags/rust"},{"inline":true,"label":"mcp","permalink":"/blog/tags/mcp"},{"inline":true,"label":"ai","permalink":"/blog/tags/ai"}],"readingTime":3.55,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.37","title":"moon v1.37 - Rust WASM toolchain and MCP support","authors":["milesj"],"tags":["toolchain","wasm","plugin","rust","mcp","ai"],"image":"./img/moon/v1.37.png"},"unlisted":false,"prevItem":{"title":"proto v0.50 - URL rewrites, on-init activation, preserved comments, and more","permalink":"/blog/proto-v0.50"},"nextItem":{"title":"moon v1.36 - Toolchain plugins beta, optimized remote caching, and codegen improvements","permalink":"/blog/moon-v1.36"}},"content":"In this release, we\'re stoked to release another WASM toolchain plugin, and experimental MCP/AI\\nsupport!\\n\\n\x3c!--truncate--\x3e\\n\\n## RFC: Task input additions and enhancements\\n\\nWe\'re planning to improve task inputs and have written up an\\n[RFC to discuss these changes](https://github.com/moonrepo/moon/issues/1985). We\'d appreciate any\\nand all feedback!\\n\\n## New Rust toolchain powered by WASM\\n\\nWith [toolchain plugins](./moon-v1.36) entering beta last release, it\'s only natural that we start\\nmigrating the legacy toolchains into plugins. And with this release, the next one we\'ve migrated is\\nthe Rust toolchain! However, unlike the TypeScript toolchain, the new Rust toolchain is opt-in and\\nmust be enabled. Simply rename `rust` to `unstable_rust` in `.moon/toolchain.yml`.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nunstable_rust:\\n  version: \'1.87.0\'\\n  components: [\'clippy\', \'rustfmt\']\\n  targets: [\'wasm32-wasip1\']\\n  syncToolchainConfig: true\\n```\\n\\n### New functionality\\n\\nAlthough the new Rust toolchain is a one-to-one port, the WASM APIs provide far more flexibility and\\nfunctionality than before. For example, the follow improvements and enhancements have been made:\\n\\n- The Cargo workspace can now exist at any folder depth and does not need to exist at the moon\\n  workspace root. Additionally, because of this, we can now support multiple Cargo workspaces in the\\n  same moon workspace.\\n- Added a new `addMsrvConstraint` setting, which will sync the version as a constraint to\\n  `Cargo.toml` under the `workspace.package.rust-version` or `package.rust-version` fields.\\n- Improved the accuracy of implicit project dependencies (inferred from `Cargo.toml`).\\n- Improved the parsing of manifest (`Cargo.toml`) and lock (`Cargo.lock`) files. This information is\\n  then fed into the task hashing process.\\n- Improved the Docker prune implementation by preserving all binaries (inferred from\\n  `cargo metadata`) while deleting the `target` directory.\\n- Any `cargo` or `rustup` commands are now hashed and cached, and will only re-run when parameters\\n  change. Unlike the current toolchain, which always runs these commands.\\n\\nQuite a list of improvements, and this doesn\'t even include all the WASM / plugin improvements that\\nhave been slowly introduced! Give this new toolchain a try, and let us know what you think!\\n\\n## MCP editor integration\\n\\nAI is all the rage these days, and even more so lately with the introduction of\\n[MCP](https://modelcontextprotocol.io) (model context protocol) and agentic workflows. MCP is a new\\nway for AI assistants to \\"understand\\" what\'s going on in your project without you having to explain\\neverything. It works by feeding structured information, like in the context of moon, projects,\\ntasks, and relationships, directly into AI models like GitHub Copilot or Cursor.\\n\\nNo more tedious explanations required! The AI can jump straight to helpful suggestions that actually\\nwork in your codebase, saving you time, and making the whole experience much smoother, especially in\\ncomplex monorepos with lots of moving parts.\\n\\nTo support agentic workflows, we\'re introducing an experimental [`moon mcp`](/docs/commands/mcp)\\ncommand, that starts an MCP server, and can be [integrated into your editor](/docs/guides/mcp). For\\nexample, VS Code:\\n\\n```json title=\\".vscode/mcp.json\\"\\n{\\n  \\"servers\\": {\\n    \\"moon\\": {\\n      \\"type\\": \\"stdio\\",\\n      \\"command\\": \\"moon\\",\\n      \\"args\\": [\\"mcp\\"],\\n      \\"env\\": {\\n        \\"MOON_WORKSPACE_ROOT\\": \\"${workspaceFolder}\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n### Supported tools\\n\\nOur MCP server currently supports the following tools. We\'ll be adding more tools in the future, so\\nif you have any suggestions, please let us know!\\n\\n- `get_project` - Get a project and its tasks by `id`.\\n- `get_projects` - Get all projects.\\n- `get_task` - Get a task by `target`.\\n- `get_tasks` - Get all tasks.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.37.0) for a full list\\nof changes.\\n\\n- Added `environment.initializing` and `environment.initialized` webhook events.\\n- Added `root` and `toolchain` fields to `dependencies.installing` and `dependencies.installed`\\n  webhook events.\\n- Updated proto to [v0.49.4](https://github.com/moonrepo/proto/releases/tag/v0.49.4) (from 0.49.1).\\n\\n## What\'s next?\\n\\nWith toolchains plugins being stabilized more, we\'d like to focus on some other areas.\\n\\n- Better command line argument parsing/joining (especially for task `args`)\\n- Better child process I/O piping\\n- Terminal notifications\\n- WASM toolchain documentation\\n\\n### Looking for toolchain contributors!\\n\\nNow that the Rust toolchain has been ported to WASM, we\'d like to start porting the other\\ntoolchains, starting with Go and JavaScript (not Bun or Node.js), and also investigate supporting\\ntoolchains for entirely new languages, like PHP and Ruby! If you\'re interested in contributing these\\ntoolchains, please ping us in Discord!\\n\\nThe only requirements is that these toolchains must be written in Rust and must exist in the\\n[moonrepo/plugins](https://github.com/moonrepo/plugins) repository!"},{"id":"moon-v1.36","metadata":{"permalink":"/blog/moon-v1.36","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-05-18_moon-v1.36.mdx","source":"@site/blog/2025-05-18_moon-v1.36.mdx","title":"moon v1.36 - Toolchain plugins beta, optimized remote caching, and codegen improvements","description":"In this release, we\'re very excited to fully release toolchain plugins!","date":"2025-05-18T00:00:00.000Z","tags":[{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"remote","permalink":"/blog/tags/remote"},{"inline":true,"label":"cache","permalink":"/blog/tags/cache"},{"inline":true,"label":"integrity","permalink":"/blog/tags/integrity"},{"inline":true,"label":"codegen","permalink":"/blog/tags/codegen"},{"inline":true,"label":"template","permalink":"/blog/tags/template"}],"readingTime":3.64,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.36","title":"moon v1.36 - Toolchain plugins beta, optimized remote caching, and codegen improvements","authors":["milesj"],"tags":["toolchain","wasm","plugin","remote","cache","integrity","codegen","template"],"image":"./img/moon/v1.36.png"},"unlisted":false,"prevItem":{"title":"moon v1.37 - Rust WASM toolchain and MCP support","permalink":"/blog/moon-v1.37"},"nextItem":{"title":"moon v1.35 - Action graph improvements, task priorities, and more!","permalink":"/blog/moon-v1.35"}},"content":"In this release, we\'re very excited to fully release toolchain plugins!\\n\\n\x3c!--truncate--\x3e\\n\\n## Beta release of toolchain WASM plugins\\n\\nTwo months ago we announced [alpha toolchain plugins](./moon-v1.33) with support for tier 3, but not\\ntier 2. The reason for this was that tier 3 is powered by [proto APIs](/docs/proto/wasm-plugin),\\nwhich already existed! We simply hooked them up to moon. The bulk of the remaining plugin work was\\ntier 2 support, which we are excited to announce has been completed! The following APIs have been\\nimplemented:\\n\\n- `extend_project_graph` - Extend projects with toolchain specific info.\\n- `extend_task_command` - Extend the command child process with parameters.\\n- `extend_task_script` - Extend the script child process with parameters.\\n- `locate_dependencies_root` - Locate the package dependencies workspace root.\\n- `parse_manifest` - Parse a manifest file to extract dependencies.\\n- `parse_lock` - Parse a lock file to extract resolved dependencies.\\n\\nAnd the following surface areas have been integrated with:\\n\\n- In the project graph:\\n  - Extend projects with dependencies, tasks, and an alias.\\n- In the action pipeline:\\n  - Added `SetupEnvironment` action that executes the `setup_environment` API.\\n  - Added `InstallDependencies` action that executes the `install_dependencies` API.\\n- When running tasks:\\n  - Extend the command/script with additional parameters before executing.\\n  - Inject dependency and lock information into the hash.\\n- With Docker:\\n  - Updated `docker prune` to utilize the new WASM APIs for toolchain plugins.\\n\\nAs of this release, all 27 APIs have been implemented, and toolchain plugins are now available for\\ngeneral use! However, they are still quite unstable, not fully tested, and the APIs may change\\nbetween releases, but you can start using them today if you\'re feeling adventurous!\\n\\nWith all this said, we do not have documentation yet. We plan to slowly work on this across the next\\nfew releases. In the meantime, check out the following resources for more information:\\n\\n- [`moon_pdk`](https://docs.rs/moon_pdk/) - Rust plugin development kit.\\n- Existing [toolchain plugins](https://github.com/moonrepo/plugins/tree/master/toolchains).\\n- In development [Rust toolchain](https://github.com/moonrepo/plugins/pull/48).\\n\\n## Optimized remote caching\\n\\nLike the past few releases, we\'ve made some improvements to the remote caching layer.\\n\\nTo start, we\'re adding a new\\n[`unstable_remote.cache.verifyIntegrity`](/docs/config/workspace#verifyintegrity) setting, that will\\nverify the digest (hash) of downloaded blobs to ensure they aren\'t corrupted or incomplete. We\\ncurrently check the file size, but this will also now check the content. This setting will slightly\\ndegrade performance but ensure reliability.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nunstable_remote:\\n  cache:\\n    verifyIntegrity: true\\n```\\n\\nWhile we\'re on the topic of reliability, we\'re also introducing an implicit rollback mechanic that\\nwill remove partially downloaded or incomplete blobs if hydration ever fails at some point. This\\nwill also run between executions to ensure there are no stale artifacts lying around.\\n\\nAnd lastly, we\'ve parallelized the blob existence checks, reducing the amount of large requests for\\nheavy tasks, and reworked how we inherit `MOON_REMOTE_*` environment variables.\\n\\n## Improved code generation\\n\\nIt\'s been a while since we\'ve added new features to code generation, but thanks to some great\\nrequests from the community, we have 2 this release!\\n\\n### Archive URLs\\n\\nThe first is that [remote archives](/docs/guides/codegen#archive-urls) (zip, tar, etc) can be used\\nas template locations. The archive will then be downloaded and unpacked into `~/.moon/templates`.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\ngenerator:\\n  templates:\\n    - \'https://domain.com/some/path/to/archive.zip\'\\n```\\n\\n### Array and object types\\n\\nThe second is that we now support `array` and `object`\\n[variable types](/docs/config/template#variables) in `template.yml`. The values within each of these\\ncollections can be any JSON-compatible type.\\n\\n```yaml title=\\"template.yml\\"\\nvariables:\\n  type:\\n    type: \'array\'\\n    prompt: \'Type?\'\\n    default: [\'app\', \'lib\']\\n  metadata:\\n    type: \'object\'\\n    prompt: \'Metadata?\'\\n    default:\\n      internal: true\\n```\\n\\nThese variables and their nested values can then be accessed within templates using dot or bracket\\nnotation.\\n\\n```twig\\n{{ type[0] }}\\n{{ metadata.internal }}\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.36.0) for a full list\\nof changes.\\n\\n- Added `--host` and `--port` options to `moon action-graph`, `moon task-graph`, and\\n  `moon project-graph`.\\n- Added `--stdin` option to `moon ci` and `moon run`, which will allow touched files to be passed\\n  via stdin, instead of running VCS commands to determine them.\\n- Removed the restriction around `moon.{yml,pkl}` not being allowed as a task input. However, will\\n  not be included when using `**/*`.\\n\\n## What\'s next?\\n\\nNow that toolchain plugins are in beta, we can take the next step in migrating an existing platform\\ninto a toolchain.\\n\\n- Migrate the Rust toolchain to a WASM plugin."},{"id":"moon-v1.35","metadata":{"permalink":"/blog/moon-v1.35","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-04-16_moon-v1.35.mdx","source":"@site/blog/2025-04-16_moon-v1.35.mdx","title":"moon v1.35 - Action graph improvements, task priorities, and more!","description":"With this release, we\'re taking yet another step to supporting plugins.","date":"2025-04-16T00:00:00.000Z","tags":[{"inline":true,"label":"action","permalink":"/blog/tags/action"},{"inline":true,"label":"graph","permalink":"/blog/tags/graph"},{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"priority","permalink":"/blog/tags/priority"},{"inline":true,"label":"experiment","permalink":"/blog/tags/experiment"},{"inline":true,"label":"terminal","permalink":"/blog/tags/terminal"},{"inline":true,"label":"theme","permalink":"/blog/tags/theme"}],"readingTime":3.81,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.35","title":"moon v1.35 - Action graph improvements, task priorities, and more!","authors":["milesj"],"tags":["action","graph","task","priority","experiment","terminal","theme"],"image":"./img/moon/v1.35.png"},"unlisted":false,"prevItem":{"title":"moon v1.36 - Toolchain plugins beta, optimized remote caching, and codegen improvements","permalink":"/blog/moon-v1.36"},"nextItem":{"title":"moon v1.34 - Action customization, faster globs, better Git, and more!","permalink":"/blog/moon-v1.34"}},"content":"With this release, we\'re taking yet another step to supporting plugins.\\n\\n\x3c!--truncate--\x3e\\n\\n## Improved action graph\\n\\nFor this release we wanted to introduce a new WASM based Rust toolchain, but we encountered a few\\nblockers while integrating with the action graph, so instead of working on the toolchain, we decided\\nto rewrite the action graph to properly support plugins.\\n\\nThe biggest blocker was around locating the toolchain\'s dependency root, and in Rust\'s case, the\\nCargo workspace (where `Cargo.lock` is located). We technically have some of this logic in the\\ncurrent Rust platform, but it always assumed that the Cargo workspace was in the root of the moon\\nworkspace (the same applies to Bun and Node). This heavily restricted all moon users. With the new\\nplugin system, the dependency root can be located anywhere in the moon workspace, and we\'ll attempt\\nto locate it!\\n\\nWhile rewriting the action graph, we made a ton of improvements (some won\'t be noticeable until\\nplugins are more prevalent). To start the graph is now async compatible, and in the future, we\'ll\\nupdate it to also support concurrency, so that the graph can be built in parallel across threads.\\nAdditionally, a main focus was reducing the amount of edges (relationships) being created between\\nnodes (actions). And lastly, the following changes were made for the actions themselves.\\n\\n- Added a new `InstallDependencies` action for WASM plugins.\\n  - The dependencies root is now dynamically located by traversing the file system, unlike the\\n    previous implementation that assumed everything was in the workspace root.\\n- Added a new `SetupEnvironment` action for WASM plugins.\\n  - This runs after `SetupToolchain` but before `InstallDependencies`.\\n  - Can be used to setup the workspace or project environment. For example, initializing Python\\n    venv, or making manifest/lockfile changes.\\n- Updated `RunTask` to setup toolchains and install dependencies for each `toolchain` that has been\\n  configured, instead of just the 1st one (work in progress).\\n- Updated `SyncProject` to no longer depend on `SetupToolchain`, and not be grouped by\\n  language/toolchain, and instead encompass all of them applicable to the project.\\n\\n## Task priorities\\n\\nBased on a request from the community that we really liked, we\'re introducing a new concept called\\ntask priorities. Each task can configure a priority level using the new task option\\n[`priority`](/docs/config/project#priority), and the priority level determines the position of the\\ntask within the action pipeline queue. A task with a higher priority will run sooner rather than\\nlater, while still respecting the topological order.\\n\\n```yaml title=\\"app/moon.yml\\" {5}\\ntasks:\\n  build:\\n    # ...\\n    options:\\n      priority: \'high\'\\n```\\n\\nThere are a few things to be aware of with this implementation:\\n\\n- All non-task related actions (like setup toolchain) will still always run first.\\n- Higher priority tasks that depend on lower priority tasks will effectively mark them as high\\n  priority, as we attempt to complete them sooner.\\n- The order within each priority level is sorted topological, but is still non-deterministic if\\n  tasks run in parallel.\\n\\n## Enabled experiments\\n\\nIn our last release, we introduced [2 new experiments](./moon-v1.34#new-experiments),\\n`fasterGlobWalk` and `gitV2`. In the past few weeks, we\'ve had many users (including ourself) enable\\nthese experiments without issue. As such, we\'ve decided to enable them by default in this release.\\n\\nIf you encounter an issue with either of these experiments, you can disable them in\\n`.moon/workspace.yml`. And of course, please report it so we can fix it!\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nexperiments:\\n  fasterGlobWalk: false\\n  gitV2: false\\n```\\n\\n## Light terminal theme\\n\\nBy default, moon assumes a dark themed terminal is being used, and will output our branded colors\\naccordingly. However, if you use a light theme, these colors are hard to read, and there\'s no way to\\nchange them.\\n\\nTo mitigate this, we\'re introducing a light based terminal theme, which can be enabled with the\\n`--theme` global option, or the `MOON_THEME` environment variable.\\n\\n```shell\\n$ moon run app:build --theme light\\n# Or\\n$ MOON_THEME=light moon run app:build\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.35.0) for a full list\\nof changes.\\n\\n- Added a new task option, `cacheKey`, which can be used to seed the hash, and invalidate local and\\n  remote caches.\\n- Added a `--log=verbose` level, which includes span information on top of the trace level.\\n- Added 2 new webhooks, `toolchain.installing` and `toolchain.installed`, which emit when a\\n  toolchain WASM plugin is installing a tool (via proto).\\n\\n## What\'s next?\\n\\nNow that are action graph supports plugins, we can take the next step in migrating an existing\\nplatform into a toolchain.\\n\\n- Migrate the Rust toolchain to a WASM plugin.\\n- Investigate a new args/command line parser.\\n- Add Poetry support for the Python toolchain."},{"id":"moon-v1.34","metadata":{"permalink":"/blog/moon-v1.34","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-03-31_moon-v1.34.mdx","source":"@site/blog/2025-03-31_moon-v1.34.mdx","title":"moon v1.34 - Action customization, faster globs, better Git, and more!","description":"With this release, we\'re introducing a handful of performance and customization improvements!","date":"2025-03-31T00:00:00.000Z","tags":[{"inline":true,"label":"moonbase","permalink":"/blog/tags/moonbase"},{"inline":true,"label":"remote","permalink":"/blog/tags/remote"},{"inline":true,"label":"cache","permalink":"/blog/tags/cache"},{"inline":true,"label":"action","permalink":"/blog/tags/action"},{"inline":true,"label":"pipeline","permalink":"/blog/tags/pipeline"},{"inline":true,"label":"glob","permalink":"/blog/tags/glob"},{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"experiment","permalink":"/blog/tags/experiment"}],"readingTime":5.08,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.34","title":"moon v1.34 - Action customization, faster globs, better Git, and more!","authors":["milesj"],"tags":["moonbase","remote","cache","action","pipeline","glob","git","experiment"],"image":"./img/moon/v1.34.png"},"unlisted":false,"prevItem":{"title":"moon v1.35 - Action graph improvements, task priorities, and more!","permalink":"/blog/moon-v1.35"},"nextItem":{"title":"moonbase has been sunset","permalink":"/blog/moonbase-sunset"}},"content":"With this release, we\'re introducing a handful of performance and customization improvements!\\n\\n\x3c!--truncate--\x3e\\n\\n## moonbase has been sunset\\n\\nAs mentioned in previous releases, we have sunset [moonbase](/moonbase), our remote caching service.\\nA while back we had internal discussions on whether to rework moonbase so that it could be\\nself-hosted (on-premises), or adopt the\\n[Bazel Remote Execution API](https://github.com/bazelbuild/remote-apis) and utilize what the open\\nsource community has to offer. We ultimately decided with the latter, as it frees up resources on\\nour end to focus on moon and proto, and also provides a better path forward for moon adoption.\\n\\nIf you are currently using moonbase, we suggest migrating to our new\\n[remote caching options](/docs/guides/remote-cache). And if you have an active moonbase\\nsubscription, it will be cancelled within the week, and any partial billing for this month will be\\nprorated.\\n\\n## Customize actions in the pipeline\\n\\nWhen a task is ran in moon, we create an [action graph](/docs/how-it-works/action-graph) (not a task\\ngraph) of actions, which are operations required to run to ensure a successful execution. This\\nincludes non-task related functionality, like project and workspace syncing, installing\\ndependencies, and ensuring the toolchain has been setup. While these actions only take milliseconds\\nto execute (on a cache hit), they can become quite a barrier and source of friction (on cache miss).\\n\\nUntil now, there wasn\'t anyway to disable/skip these extra actions -- besides some non-documented\\nenvironment variables that didn\'t actually omit the actions (they were still in the graph), but\\nsimply skipped the inner execution. In this release, we\'re introducing 4 new settings for\\n[`pipeline`](/docs/config/workspace#pipeline) (formerly `runner`) in\\n[`.moon/workspace.yml`](/docs/config/workspace).\\n\\n- `installDependencies` setting toggles the inclusion of the `InstallWorkspaceDeps` and\\n  `InstallProjectDeps` actions, and can be scoped to toolchain IDs.\\n- `syncProjects` setting toggles the inclusion of the `SyncProject` actions, and can be scoped to\\n  project IDs.\\n- `syncProjectDependencies` setting toggles whether to recursively create `SyncProject` actions for\\n  each dependency of a project, or just for itself.\\n- `syncWorkspace` setting toggles the inclusion of the root `SyncWorkspace` action.\\n\\nFor example, if you want to disable all of these actions entirely, you can do this:\\n\\n```yaml title=\\".moon/workspace.yml\\"\\npipeline:\\n  installDependencies: false\\n  syncProjects: false\\n  syncProjectDependencies: false\\n  syncWorkspace: false\\n```\\n\\nAnd as mentioned above, the `installDependencies` and `syncProjects` settings support configuring a\\nlist of IDs, which acts as an allow list. Any IDs not listed here will not create actions.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\npipeline:\\n  # Only install Node.js dependencies\\n  installDependencies: [\'node\']\\n  # Only sync the `app` project\\n  syncProjects: [\'app\']\\n```\\n\\n:::info\\n\\nEven if you disable actions with the `pipeline` setting, the [`moon sync`](/docs/commands/sync)\\ncommands can still be used to run sync operations, as they ignore that setting. This provides a\\nsolution where you want to avoid the overhead when running a task, but still take advantage of\\nmoon\'s syncing to ensure a healthy repository state.\\n\\n:::\\n\\n### New `--no-actions` flag\\n\\nTo expand upon the above, we\'re introducing a `--no-actions` flag to\\n[`moon run`](/docs/commands/run), that will run the task without the other actions being added to\\nthe graph. We suggest only using this flag once dependencies have been installed, and the toolchain\\nhas been setup!\\n\\n```shell\\n$ moon run app:start --no-actions\\n```\\n\\n## New experiments\\n\\nIt\'s been a while since we\'ve added new experiments, and in this release, we\'ve got 2! We encourage\\neveryone to enable these experiments to ensure they are working correctly, but do note that these\\nare a work in progress and may be buggy.\\n\\n### Faster glob walking\\n\\nWe\'ve been monitoring glob performance for sometime now, as walking the filesystem has been one of\\nthe largest bottlenecks, especially in large codebases. We felt it was about time to tackle the\\nproblem.\\n\\nWith this new implementation, we are doing a few things to increase performance. To start, we are\\nparallelizing walking per directory, where previously this would happen serially. Next, we partition\\nglobs based on a common ancestor directory, which reduces the amount of unnecessary walking. And\\nlastly, we cache common globs to avoid walking all together.\\n\\nIn our benchmarks and tests (moon itself is already using it), we are seeing performance increases\\nby 1.5-2x! To start using this new glob implementation, enable the new `fasterGlobWalk` experiment.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nexperiments:\\n  fasterGlobWalk: true\\n```\\n\\n### Better Git integration\\n\\nOur current Git integration works, assuming you\'re not doing anything complex, like using submodules\\nor worktrees. If you are using the latter, things have been buggy. We\'re not happy about this, as we\\nwant to support all the different ways a repository can be architected.\\n\\nSo we started over from scratch! We even created\\n[real repositories](https://github.com/moonrepo/git-test) to ensure our understanding and\\nimplementation of these features is accurate. This new implementation achieves the following:\\n\\n- Supports submodules, subtrees, and worktees (unique among build systems).\\n  - Our competitors don\'t support these, and we expect them to \\"borrow\\" our implementation in the\\n    future (like they have with other features).\\n- Git commands are parallelized when applicable.\\n- Touched files within submodules are now properly extracted.\\n- File discovery and hashing is more performant.\\n\\nIf you\'d like to try this new Git implementation (moon itself already is), enable the `gitV2`\\nexperiment.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nexperiments:\\n  gitV2: true\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.34.0) for a full list\\nof changes.\\n\\n- Added a `--json` flag to `moon templates`.\\n- Integrated a new console rendering system with new terminal styles, prompts, and output.\\n- Improved the performance of environment variable substitution.\\n- Improved toolchain plugin loading to be on-demand.\\n- Improved sync cache invalidation for codeowners, config schemas, and VCS hooks.\\n\\n## What\'s next?\\n\\nGoing forward, we plan to release new updates on a bi-weekly schedule, instead of a monthly\\nschedule. This will result in less features each release, but will reduce the burden and complexity\\nof large releases. With that said, this is what we have tentatively planned for the next release!\\n\\n- Migrate the Rust toolchain to a WASM plugin.\\n- Investigate a new args/command line parser.\\n- Add Poetry support for the Python toolchain."},{"id":"moonbase-sunset","metadata":{"permalink":"/blog/moonbase-sunset","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-03-31_moonbase-sunset.mdx","source":"@site/blog/2025-03-31_moonbase-sunset.mdx","title":"moonbase has been sunset","description":"As mentioned in previous moon releases and announcements, we have sunset moonbase, our","date":"2025-03-31T00:00:00.000Z","tags":[{"inline":true,"label":"moonbase","permalink":"/blog/tags/moonbase"},{"inline":true,"label":"remote","permalink":"/blog/tags/remote"},{"inline":true,"label":"cache","permalink":"/blog/tags/cache"}],"readingTime":0.86,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moonbase-sunset","title":"moonbase has been sunset","authors":["milesj"],"tags":["moonbase","remote","cache"]},"unlisted":false,"prevItem":{"title":"moon v1.34 - Action customization, faster globs, better Git, and more!","permalink":"/blog/moon-v1.34"},"nextItem":{"title":"moon v1.33 - Alpha support for toolchain WASM plugins","permalink":"/blog/moon-v1.33"}},"content":"As mentioned in previous moon releases and announcements, we have sunset [moonbase](/moonbase), our\\nremote caching service.\\n\\n\x3c!-- truncate --\x3e\\n\\nA while back we had internal discussions on whether to rework moonbase so that it could be\\nself-hosted (on-premises), or adopt the\\n[Bazel Remote Execution API](https://github.com/bazelbuild/remote-apis) and utilize what the open\\nsource community has to offer. We ultimately decided with the latter, as it frees up resources on\\nour end to focus on moon and proto, and also provides a better path forward for moon adoption.\\n\\nIf you are currently using moonbase, we suggest migrating to our new\\n[remote caching options](/docs/guides/remote-cache). And if you have an active moonbase\\nsubscription, it will be cancelled within the week, and any partial billing for this month will be\\nprorated.\\n\\nWith that said, we have some ideas brewing on how to bring this back in another form. Perhaps our\\nown implementation of the Bazel Remote Execution API that can be self-hosted and deeply integrate\\nwith moon."},{"id":"moon-v1.33","metadata":{"permalink":"/blog/moon-v1.33","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-03-13_moon-v1.33.mdx","source":"@site/blog/2025-03-13_moon-v1.33.mdx","title":"moon v1.33 - Alpha support for toolchain WASM plugins","description":"With this release, we\'re stoked to provide an initial release for plugin support.","date":"2025-03-13T00:00:00.000Z","tags":[{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"moonx","permalink":"/blog/tags/moonx"},{"inline":true,"label":"schema","permalink":"/blog/tags/schema"}],"readingTime":5.38,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.33","title":"moon v1.33 - Alpha support for toolchain WASM plugins","authors":["milesj"],"tags":["toolchain","wasm","plugin","moonx","schema"],"image":"./img/moon/v1.33.png"},"unlisted":false,"prevItem":{"title":"moonbase has been sunset","permalink":"/blog/moonbase-sunset"},"nextItem":{"title":"proto v0.47 - New backend system & asdf support","permalink":"/blog/proto-v0.47"}},"content":"With this release, we\'re stoked to provide an initial release for plugin support.\\n\\n\x3c!--truncate--\x3e\\n\\n## Alpha release of toolchain WASM plugins\\n\\nFor over a [year now](./2024-roadmap#plugin-based-architecture), we\'ve talked about supporting\\nWASM-based toolchain plugins... but what\'s taking so long? Migrating from a \\"hard-coded in core\\"\\napproach to a dynamic plugin approach was actually quite difficult, especially in Rust. It took us\\nway longer than we expected.\\n\\nWith that said, we\'re excited to announce alpha support for WASM-based toolchain plugins. In this\\nrelease, we have a working solution, but with partial support for the toolchain\'s\\n[tiered features](/docs/how-it-works/languages#tier-structure-and-responsibilities). At this point\\nin time, we provide full support for tier 0, major support for tier 1 excluding lockfile/manifest\\nparsing, minor support for tier 2, no support for tier 3 (but will use\\n[proto\'s APIs](/docs/proto/wasm-plugin)), and support for non-tiered features, like\\n[`moon init`](/docs/commands/init) and [`moon docker`](/docs/commands/docker).\\n\\nIf you\'re curious, the following WASM function APIs are now available:\\n\\n- `register_toolchain` - Registers the toolchain and provide metadata for detection and other\\n  purposes.\\n- `initialize_toolchain` - Provides prompts to use during `moon init` to gather settings values.\\n- `define_toolchain_config` - Defines a configuration schema for use within JSON schemas.\\n- `define_docker_metadata` - Defines metadata related to `docker` commands.\\n- `hash_task_contents` - Injects content into the task hashing process.\\n- `prune_docker` - Custom operations to run during `docker prune`.\\n- `scaffold_docker` - Custom operations to run during `docker scaffold`.\\n- `sync_project` - Runs syncing operations per project (during the `SyncProject` action).\\n- `sync_workspace` - Runs syncing operations at the workspace root (during the `SyncWorkspace`\\n  action).\\n\\nWe know everyone is very excited about these plugins, so feel free to start using them today!\\nHowever, since we don\'t have full tiered support, most of the advanced functionality related to\\nrunning tasks is currently not supported (except for task hashing which is supported).\\n\\nAdditionally, we do _not_ have documentation yet for these new APIs, but we do have the following\\nresources to help you get started:\\n\\n- [Getting started with WASM plugins](/docs/guides/wasm-plugins)\\n- [Example toolchain WASM plugins](https://github.com/moonrepo/plugins/tree/master/toolchains)\\n- [`moon_pdk` documentation](https://docs.rs/moon_pdk) (functions, macros, etc)\\n- [`moon_pdk_api` documentation](https://docs.rs/moon_pdk_api) (structs, enums, etc)\\n\\n### TypeScript toolchain\\n\\nTo verify that our WASM plugin implementation works correctly, we\'ve\\n[migrated the TypeScript toolchain entirely to a WASM plugin](https://github.com/moonrepo/plugins/tree/master/toolchains/typescript),\\nand it\'s no longer hard-coded in our Rust core! If you\'ve configured\\n[`typescript`](/docs/config/toolchain#typescript) in\\n[`.moon/toolchain.yml`](/docs/config/toolchain), then you\'ll automatically use the new plugin under\\nthe hood.\\n\\nThis is our first step in supporting plugins in core. We chose TypeScript as our 1st plugin because\\nit was the simplest of all the toolchains, was primarily used for project syncing, and did not\\nrequire all tiered APIs.\\n\\nWith that said, most of the code had to be rewritten when porting, but we tried to keep as much\\nparity as possible. Please report an issues or differences you encounter. Additionally, because\\nTypeScript is now a \\"true\\" toolchain, it will appear in the toolchains list for projects and tasks.\\nThis is required since it runs operations in the context of the plugin.\\n\\nBecause toolchain plugins are configured differently internally, and since TypeScript is now a\\nplugin, the configuration syntax for disabling the TypeScript toolchain at the project-level has\\nchanged. While not a breaking change in this release, the old format will be removed in the future.\\n\\n```yml title=\\"moon.yml\\"\\n# Before\\ntoolchain:\\n  typescript:\\n    disable: true\\n\\n# After\\ntoolchain:\\n  typescript: false # or null\\n```\\n\\n:::warning\\n\\nIf you use the TypeScript toolchain, you\'ll need to update your configuration files or editor to\\npoint to the newer [JSON schemas](#dynamic-json-schemas), otherwise your editor may error with\\n\\"Property typescript is not allowed\\".\\n\\n:::\\n\\n## Experimental `moonx` executable\\n\\nBased on a [request from the community](https://github.com/moonrepo/moon/issues/1828), we\'re\\nintroducing a new executable `moonx`, which is simply a shorthand for `moon run ...`. In the future\\nwe will expand this with more \\"shorthand\\" functionality.\\n\\n```shell\\n$ moonx app:build\\n```\\n\\nBecause of our current release process, the `moonx` executable is _not_ packaged in the release (on\\nGitHub), and is instead created the first time `moon` runs. Furthermore, `moonx` is not a binary\\nexecutable, and is instead a shim (a Bash script on Unix, and a PowerShell (`.ps1`) script on\\nWindows). In the future, this will become a true binary.\\n\\n## Dynamic JSON schemas\\n\\nWith the initial support for toolchain plugins, the available configuration in\\n[`.moon/toolchain.yml`](/docs/config/toolchain) and [`moon.yml`](/docs/config/project) is no longer\\nstatic, and is instead dynamic based on the enabled/configured toolchains. Because of this, the JSON\\nschemas provided at `moonrepo.dev` and in the GitHub release are not accurate for some toolchain\\nrelated settings, but accurate for everything else.\\n\\nThis may lead to a poor developer experience where your editor shows errors for unknown settings. To\\nremedy this, we now generate dynamic schemas at `.moon/cache/schemas` with accurate settings. If\\nyou\'re editor supports the `$schema` property, you can update them like so:\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\n$schema: \'./cache/schemas/toolchain.json\'\\n```\\n\\n```yaml title=\\"app/moon.yml\\"\\n$schema: \'../.moon/cache/schemas/toolchain.json\'\\n```\\n\\nThe VS Code YAML server does not support the\\n[`$schema` property](https://github.com/redhat-developer/yaml-language-server/pull/970), but there\\nis a\\n[work around](https://github.com/redhat-developer/yaml-language-server?tab=readme-ov-file#using-inlined-schema).\\nHowever, that syntax is a bit unfortunate, so our official moon VS Code extension supports updating\\n`.vscode/settings`. Simply open the command palette and select \\"moon: Append YAML schemas\\nconfiguration to settings\\".\\n\\n:::info\\n\\nThese schemas are automatically generated through [`moon run`](/docs/commands/run) but can be\\nmanually generated with [`moon sync config-schemas`](/docs/commands/sync/config-schemas).\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.33.0) for a full list\\nof changes.\\n\\n- Added support for `moon run ~:build`, which will run the `build` task in the closest project\\n  (traversing upwards).\\n- Added `$XDG_DATA_HOME` support when detecting the moon store. Will be used if `$MOON_HOME` is not\\n  set, and will fallback to `$HOME/.moon`.\\n- Added elapsed/timing information to child processes and WASM calls within logs.\\n- Improved the handling of CTRL-C, CTRL-BREAK, and other signals on Windows.\\n- Updated `moon init` with toolchain plugin support.\\n- Updated `toolchain.default` in `moon.yml` to support a list of IDs.\\n- Updated file hashing (via `git hash-object`) to continously pipe stdin to avoid hanging processes."},{"id":"proto-v0.47","metadata":{"permalink":"/blog/proto-v0.47","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-02-25_proto-v0.47.mdx","source":"@site/blog/2025-02-25_proto-v0.47.mdx","title":"proto v0.47 - New backend system & asdf support","description":"In this release, we\'re stoked to release backends, a new type of plugin that enables the use of","date":"2025-02-25T00:00:00.000Z","tags":[{"inline":true,"label":"backend","permalink":"/blog/tags/backend"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"asdf","permalink":"/blog/tags/asdf"}],"readingTime":2.76,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.47","title":"proto v0.47 - New backend system & asdf support","authors":["milesj"],"tags":["backend","plugin","asdf"],"image":"./img/proto/v0.47.png"},"unlisted":false,"prevItem":{"title":"moon v1.33 - Alpha support for toolchain WASM plugins","permalink":"/blog/moon-v1.33"},"nextItem":{"title":"moon v1.32 - Remote cache and built-in toolchain improvements","permalink":"/blog/moon-v1.32"}},"content":"In this release, we\'re stoked to release backends, a new type of plugin that enables the use of\\n3rd-party plugins.\\n\\n\x3c!--truncate--\x3e\\n\\n## New backend: `asdf`\\n\\nSince proto\'s inception, we\'ve been asked the question \\"how\'s this different than asdf?\\", or \\"why\\nnot just use asdf?\\". The answer to both of these questions is still the same 3 things:\\n\\n- To start, asdf isn\'t multi-platform, it\'s Unix only and doesn\'t support Windows (proto does).\\n- Secondly, asdf is powered by Bash scripts, which means a bash-compatible interpreter or shell is\\n  required (proto uses WASM).\\n- And lastly, proto is built on Rust, so it\'s extremely fast and reliable.\\n\\nWith all that said, asdf has a massive [plugin registry](https://github.com/asdf-vm/asdf-plugins)\\ncompared to proto\'s, and it would take a really long time for proto to reach parity. Because of\\nthis, we\'ve been working on a new plugin type called a \\"[backend](/docs/proto/tool-spec#backends)\\",\\nwhich allows 3rd-party plugins to be utilized within proto for downloading and installing tools,\\nlocating executables, and more.\\n\\nOf course, our first backend is [asdf](https://asdf-vm.com/). To install a tool from asdf\'s\\nregistry, prefix the version in `.prototools` with [`asdf:`](/docs/proto/tool-spec#backends), or\\nconfigure the [`backend`](/docs/proto/config#backend) setting.\\n\\n```toml title=\\".prototools\\"\\n# For this single version\\nzig = \\"asdf:0.13.0\\"\\n\\n# For all versions\\nzig = \\"0.13.0\\"\\n\\n[tools.zig]\\nbackend = \\"asdf\\"\\n```\\n\\nThis backend implementation _does not_ use the `asdf` binary itself, and instead emulates the\\nenvironment as best we can. Because of this, some tools may not be usable through proto, especially\\nthose that rely on `asdf` itself. Furthermore, the 2 bullet points above are unfortunately still\\nrestrictions: This is Unix only and requires Bash.\\n\\n> In the next release, we\'ll investigate the use of Scoop or Chocolatey as a potential backend for\\n> Windows users. If you\'re interested in this endeavor, send us a message in Discord!\\n\\n## New built-in tool: `poetry`\\n\\nIn [v0.45](./proto-v0.45) we introduced 3 new tools, and in this release, we\'re releasing 1 more! We\\nwant to expand our Python support, and since we already support pip and uv, we wanted to also\\nsupport Poetry, which has been requested by the community many times now. Poetry installation works\\nquite differently than other tools, so please report any issues or improvements.\\n\\n```shell\\n$ proto install poetry\\n```\\n\\n## proto now shims itself\\n\\nUntil now, proto was a stand-alone binary that existed on `PATH` and was not coupled to proto\'s\\nstore (`~/.proto`) outside of possibly existing in `~/.proto/bin` for convenience. Over the past\\ncouple of releases, we\'ve been working on supporting proto as an\\n[official tool](https://github.com/moonrepo/plugins/tree/master/tools/proto) within proto, so\\ncommands like `proto install proto` and `proto pin proto 0.45` actually function correctly.\\n\\nStarting in this release, when proto is installed via proto, either through `proto install` or\\n`proto upgrade`, a shim will be created at `~/.proto/shims/proto`, allowing for runtime version\\ndetection and pinning. This basically means you can now pin a project to a certain version of proto\\nlike any other tool, for example:\\n\\n```toml title=\\".prototools\\"\\nproto = \\"0.46\\"\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.47.0) for a full list\\nof changes.\\n\\n- Updated offline connection checks to also ping IPv6 addresses for Google & CloudFlare DNS."},{"id":"moon-v1.32","metadata":{"permalink":"/blog/moon-v1.32","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-02-03_moon-v1.32.mdx","source":"@site/blog/2025-02-03_moon-v1.32.mdx","title":"moon v1.32 - Remote cache and built-in toolchain improvements","description":"In this release we focused primarily on remote caching and toolchain improvements.","date":"2025-02-03T00:00:00.000Z","tags":[{"inline":true,"label":"platform","permalink":"/blog/tags/platform"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"remote","permalink":"/blog/tags/remote"},{"inline":true,"label":"cache","permalink":"/blog/tags/cache"},{"inline":true,"label":"pkl","permalink":"/blog/tags/pkl"},{"inline":true,"label":"config","permalink":"/blog/tags/config"}],"readingTime":5.44,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.32","title":"moon v1.32 - Remote cache and built-in toolchain improvements","authors":["milesj"],"tags":["platform","toolchain","remote","cache","pkl","config"],"image":"./img/moon/v1.32.png"},"unlisted":false,"prevItem":{"title":"proto v0.47 - New backend system & asdf support","permalink":"/blog/proto-v0.47"},"nextItem":{"title":"proto v0.45 - New built-in tools and build from source","permalink":"/blog/proto-v0.45"}},"content":"In this release we focused primarily on remote caching and toolchain improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Improved remote caching stability\\n\\nThe main focus of this release was the stability of our remote caching implementation, by fixing all\\nbugs and edge cases, and adding support for missing or new features.\\n\\n### New settings\\n\\nTo support new features (below), we are introducing 2 new settings,\\n[`unstable_remote.api`](/docs/config/workspace#api) and\\n[`unstable_remote.auth`](/docs/config/workspace#auth). The `api` setting defines what API format the\\nremote server supports and expects client requests to be sent in, either `grpc` (default) or `http`.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nunstable_remote:\\n  api: \'grpc\'\\n```\\n\\nWhile the `auth` setting does 2 things; allows HTTP headers to be configured that will be injected\\ninto all gRPC/HTTP requests, and a token (via environment variable) to be used for bearer\\nauthorization (instead of TLS/mTLS).\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nunstable_remote:\\n  auth:\\n    headers:\\n      \'X-Custom-Header\': \'value\'\\n```\\n\\n### HTTP API support\\n\\nIf you don\'t want or can\'t use gRPC, we now support the\\n[HTTP caching protocol](https://bazel.build/remote/caching#http-caching). This is a very simple API\\nthat uploads action results to `/ac/` endpoints, and output blobs to `/cas/` endpoints (content\\naddressable storage). The HTTP API is _very_ simple and does not support any of the features\\nprovided by gRPC, like batch uploading/downloading, streaming, or missing blob detection.\\n\\nTo use this protocol, set the new `api` setting to `http`, and configure an HTTP host.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nunstable_remote:\\n  api: \'http\'\\n  host: \'https://cache.yourhost.com\'\\n```\\n\\n### ByteStream support\\n\\nWe now support the ByteStream API for gRPC servers, which will automatically download and upload\\nblobs larger than 4mb by streaming chunks of data. Previously, if we encountered a blob larger than\\n4mb, we would abort uploading to the cache for that action, so subseqeuent runs would always be a\\ncache miss.\\n\\n### Depot cloud hosting\\n\\nOur good friends at Depot ([depot.dev](https://depot.dev/)) recently announced\\n[Depot Cache](https://depot.dev/blog/introducing-depot-cache), a cloud-based caching solution that\'s\\ncompatible with the Bazel remote execution/caching API. We were very excited to read this\\nannouncement, and wanted to get it working in moon immediately. It took a bit of work, and uncovered\\na lot of bugs on our end, but we eventually got it working!\\n\\nTo make use of Depot Cache, create an account on their end, and then configure moon with the\\nfollowing.\\n\\n```yaml\\nunstable_remote:\\n  host: \'grpcs://cache.depot.dev\'\\n  auth:\\n    token: \'DEPOT_TOKEN\'\\n    # If you have multiple org\'s\\n    headers:\\n      \'X-Depot-Org\': \'<id>\'\\n```\\n\\nYou\'ll need to set the `DEPOT_TOKEN` environment variable on every machine that will use remote\\ncaching.\\n[Learn more about this flow in our documentation](/docs/guides/remote-cache#cloud-hosted-depot).\\n\\n:::info\\n\\nmoon itself now uses Depot Cache for its remote caching, and it has been working quite well! You can\\nsee it in action within each pull request.\\n\\n:::\\n\\n### Miscellaneous\\n\\n- You can now use `http(s)` protocols for gRPC servers, instead of just `grpc(s)`.\\n- Added timeouts and concurrency limits to our internal clients. In the future, we will also support\\n  retrying.\\n- Added a `MOON_DEBUG_REMOTE` environment variable, which can be used to debug internal errors for\\n  diagnosing connection/integration issues.\\n- Improved handling of TLS/mTLS connections.\\n\\n## Improved built-in toolchains\\n\\nIt\'s been quite some time since we\'ve made any changes to our existing built-in toolchains, and\\nsince there\'s been many updates in the ecosystem (like Deno v2), we felt it was time to do a pass on\\nthem and introduce some improvements.\\n\\n### Bun\\n\\n- Added support for the new text-based `bun.lock` file in\\n  [Bun v1.2](https://bun.sh/blog/bun-v1.2#introducing-bun-lock).\\n  - We do our best to detect between the text and binary formats, but we suggest configuring\\n    `--save-text-lockfile` in [`bun.installArgs`](/docs/config/toolchain#installargs) to be\\n    explicit.\\n\\n### Deno\\n\\n- Added support for [Deno v2](https://deno.com/blog/v2.0).\\n  - Now supports all lockfile versions (1-4), thanks to the official `deno_lockfile` crate.\\n  - Now uses `deno install` in v2+ instead of `deno cache` that was used in v1.\\n  - Added a new [`deno.installArgs`](/docs/config/toolchain#installargs-1) setting.\\n- Added support for workspaces that were introduced in [Deno v1.45](https://deno.com/blog/v1.45).\\n  - When a project is within a workspace, it will now install dependencies once in the workspace,\\n    instead of in each project.\\n\\n### Python\\n\\n- Added unstable [uv support](https://docs.astral.sh/uv/). Can be enabled with the new\\n  [`python.packageManager`](/docs/config/toolchain#packagemanager-1) and\\n  [`python.uv`](/docs/config/toolchain#uv) settings.\\n  - Right now, has basic toolchain support, including dependency installs and virtual environments.\\n  - Uses `uv venv` instead of `python venv` and `uv sync` instead of `pip install`.\\n  - Relies on `pyproject.toml` and `uv.lock` instead of `requirements.txt`.\\n- Renamed the `python.rootRequirementsOnly` setting to\\n  [`python.rootVenvOnly`](/docs/config/toolchain#rootvenvonly). Open for discussion on the name of\\n  this setting.\\n- Will now inherit versions from the root `.prototools`.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\npython:\\n  version: \'3.12.0\'\\n  packageManager: \'uv\'\\n  uv:\\n    version: \'0.5.26\'\\n```\\n\\n### Rust\\n\\n- The root-level project is now properly taken into account when detecting if a project is within\\n  the Cargo workspace.\\n- Project dependencies (`dependsOn`) are now automatically inferred from `Cargo.toml` dependencies\\n  (only `path` allowed).\\n\\n## Pkl configuration now available\\n\\nIn [moon v1.29](./moon-v1.29) we introduced support for Pkl-based (`.pkl`) configuration as an\\nalternative to YAML (`.yml`), but it was hidden behind an experimental flag. Going forward, you can\\nnow use Pkl without having to enable the experimental flag, and can remove any references to\\n`--experimentPklConfig` or `MOON_EXPERIMENT_PKL_CONFIG`.\\n\\nAdditionally, we now have [official documentation on what Pkl is](/docs/guides/pkl-config), how to\\nuse it, and some examples of what it looks like. Check it out!\\n\\n:::info\\n\\nBased on feedback from the community, and our current thoughts on the configuration problem, at this\\npoint in time, we plan to support multiple configuration formats instead of choosing one, and will\\nmost likely include support for JSON/JSONC in v2. We\'re also open to other formats that may work\\nwell in moon, and are compatible with our current codebase.\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.32.0) for a full list\\nof changes.\\n\\n- Added unstable support for multiple package workspaces when installing dependencies and resolving\\n  lockfiles.\\n- Reworked child process handling to better handle signals and shutdown accordingly. Additionally,\\n  when the pipeline receives a signal, we now display the status that shutdown the pipeline in the\\n  summary.\\n- Reworked the new task `inferInputs` option to not infer environment variables from popular CI/CD\\n  providers, as those values constantly change, causing tasks to always be affected. If you would\\n  like to reference these values, add them as an explicit inputs."},{"id":"proto-v0.45","metadata":{"permalink":"/blog/proto-v0.45","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-01-22_proto-v0.45.mdx","source":"@site/blog/2025-01-22_proto-v0.45.mdx","title":"proto v0.45 - New built-in tools and build from source","description":"In this release, we\'re very excited to introduce building tools from source, a feature that\'s been","date":"2025-01-22T00:00:00.000Z","tags":[{"inline":true,"label":"tool","permalink":"/blog/tags/tool"},{"inline":true,"label":"build","permalink":"/blog/tags/build"},{"inline":true,"label":"source","permalink":"/blog/tags/source"}],"readingTime":2.78,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.45","title":"proto v0.45 - New built-in tools and build from source","authors":["milesj"],"tags":["tool","build","source"],"image":"./img/proto/v0.45.png"},"unlisted":false,"prevItem":{"title":"moon v1.32 - Remote cache and built-in toolchain improvements","permalink":"/blog/moon-v1.32"},"nextItem":{"title":"moon v1.31 - Toolchain progress, glob-based targets, task & remote cache improvements","permalink":"/blog/moon-v1.31"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nIn this release, we\'re very excited to introduce building tools from source, a feature that\'s been\\nin development for over a year.\\n\\n\x3c!--truncate--\x3e\\n\\n## New built-in tools\\n\\nIt\'s been quite some time since we\'ve introduced a new official built-in tool, so in this release,\\nwe have 3!\\n\\n### `moon`\\n\\nThis was a no-brainer, and honestly, we probably should have done it much sooner. We were quite\\nsurprised to see that moon is the 3rd most installed tool in proto, right behind pnpm and node\\nrespectively. We felt that it was now time to make it official.\\n\\n```shell\\n$ proto install moon\\n```\\n\\nIf you were using the moon TOML plugin before (below), you can now remove this entry from your\\n`.prototools`.\\n\\n```toml title=\\".prototools\\"\\n[plugins]\\nmoon = \\"https://raw.githubusercontent.com/moonrepo/moon/master/proto-plugin.toml\\"\\n```\\n\\n### `uv`\\n\\nAdditionally, Python interest has grown over recent months, especially with the introduction of\\n[Python support in moon](./moon-v1.30), so we felt it was time to support the new hotness,\\n[uv](https://docs.astral.sh/uv/)! We plan to bring uv integration into moon in the near future.\\n\\n```shell\\n$ proto install uv\\n```\\n\\n:::info\\n\\nAlthough uv can also manage Python installations, we suggest using proto to keep everything\\nstreamlined and isolated.\\n\\n:::\\n\\n### `ruby`\\n\\nAnd lastly, we now support [Ruby](https://www.ruby-lang.org/en/), a popular general purpose\\nprogramming language. Ruby was extremely difficult to support, primarily because Ruby does _not_\\nsupport the concept of pre-builts, and _must_ be compiled from source files.\\n\\nBut thanks to our new build from source install strategy (below), Ruby support is now possible.\\n\\n```shell\\n$ proto install ruby\\n```\\n\\n## Build from source (unstable)\\n\\nUp until now, tools could only be installed if they supported pre-built binaries, which was\\ntypically more than enough. However, there are many languages that do not support pre-builts and\\nmust be built from source, such as Ruby, PHP, and up until recently, Python. Building binaries from\\nsource code is actually quite complicated, as the instructions for doing so is different across\\noperating systems, architectures, and even system package managers.\\n\\nRegardless, we\'ve spent the past year slowly working on a solution and have finally managed to\\nimplement something usable, all through a powerful WASM API. And with that, the following tools now\\nsupport build from source.\\n\\n- `deno`\\n- `go`\\n- `moon`\\n- `node`\\n- `python` (via `python-build`)\\n- `ruby` (via `ruby-build`)\\n\\nTo actually build from source instead of downloading a prebuilt, simply pass `--build` to\\n[`proto install`](/docs/proto/commands/install). For tools that only support build (like Ruby), the\\n`--build` flag is optional.\\n\\n```shell\\n$ proto install python --build\\n```\\n\\nTo demonstrate how this works, here\'s Go being built from source. We start by grouping operations\\ninto steps, with the first step being the installation of system dependencies (via Homebrew or\\nsomething similar). We then check that certain requirements are met, or abort if unmet. Up next, we\\nneed to acquire the source code, either by downloading an archive, or cloning a Git repository. And\\nlastly, running through and executing the build instructions/commands.\\n\\n<Image src={require(\'./img/proto/v0.45/go-build.png\')} width=\\"90%\\" />\\n\\n:::info\\n\\nWhile this feature is very exciting, it is extremely unstable, so please report any issues, and\\nprovide any and all feedback!\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.45.0) for a full list\\nof changes."},{"id":"moon-v1.31","metadata":{"permalink":"/blog/moon-v1.31","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2025-01-06_moon-v1.31.mdx","source":"@site/blog/2025-01-06_moon-v1.31.mdx","title":"moon v1.31 - Toolchain progress, glob-based targets, task & remote cache improvements","description":"Happy new years everyone \ud83c\udf89! In this release, we\'ve landed a handful of quality-of-life","date":"2025-01-06T00:00:00.000Z","tags":[{"inline":true,"label":"platform","permalink":"/blog/tags/platform"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"glob","permalink":"/blog/tags/glob"},{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"target","permalink":"/blog/tags/target"},{"inline":true,"label":"remote","permalink":"/blog/tags/remote"},{"inline":true,"label":"cache","permalink":"/blog/tags/cache"},{"inline":true,"label":"ci","permalink":"/blog/tags/ci"}],"readingTime":5.88,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.31","title":"moon v1.31 - Toolchain progress, glob-based targets, task & remote cache improvements","authors":["milesj"],"tags":["platform","toolchain","glob","task","target","remote","cache","ci"],"image":"./img/moon/v1.31.png"},"unlisted":false,"prevItem":{"title":"proto v0.45 - New built-in tools and build from source","permalink":"/blog/proto-v0.45"},"nextItem":{"title":"proto v0.44 - New terminal user interface and versions command","permalink":"/blog/proto-v0.44"}},"content":"Happy new years everyone \ud83c\udf89! In this release, we\'ve landed a handful of quality-of-life\\nimprovements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Goodbye platform, hello toolchain\\n\\nIn preparation for toolchain WASM plugins, we\'ve had to rewrite and rethink a lot of the internals\\nof moon. Once such feature is the concept of a \\"platform\\", which is primarily interacted with\\nthrough a task\'s [`platform`](/docs/config/project#platform-1) setting or a project\'s\\n[`platform`](/docs/config/project#platform) setting.\\n\\nWe do our best to detect the language and runtime (the \\"platform\\") that a project or task belongs\\nto. This is important as it determines what tools to install, paths to include in `PATH`, and much\\nmore. However, there are situations where our detection fails, or you need to be explicit, so the\\n`platform` settings exist.\\n\\nThe new toolchain system is much more powerful, but it works quite differently, so we\'re slowly\\nmaking changes within each release before flipping the switch. In this release, we are deprecating\\nthe concept of the platform, and renaming everything to toolchain. The following changes were made:\\n\\n- Deprecated the top-level `platform` setting in `moon.yml`, use `toolchain.default` instead.\\n  - Additionally, the toolchain can now be inferred from the top-level `language` setting and any\\n    config files in the project/workspace root. This pattern is preferred when possible.\\n- Deprecated the `platform` task setting, use `toolchain` instead.\\n- Deprecated the `taskPlatform` query field, use `taskToolchain` instead.\\n- Deprecated the `--platform` option for `moon query tasks`, use `--toolchain` instead.\\n- Deprecated the `$taskPlatform` token, use `$taskToolchain` instead.\\n\\n:::warning\\n\\nOn the surface these two features look the same, but internally they are quite different. We\'ve done\\nour best to support backwards compatibility, but there may be some edge cases that our testing suite\\ndid not cover. If you run into any problems, mainly tasks being associated with the wrong toolchain,\\nplease report an issue!\\n\\n:::\\n\\n## Run tasks using glob-based targets\\n\\nThis has been a request from the community for sometime, as it fills a gap that running multiple\\ntasks with a non-project scope, or running tasks with a query, simply couldn\'t achieve. For example,\\nsay you had `build-debug` and `build-release` tasks, and wanted to future-proof it for potential new\\nbuild related tasks.\\n\\nBefore this release, you would need to explicitly list all targets in\\n[`moon run`](/docs/commands/run) or [`moon ci`](/docs/commands/ci), but with globs, you can achieve\\nthe same affect with 1 glob target.\\n\\n```shell\\n# Before\\n$ moon run :build-debug :build-release\\n\\n# After\\n$ moon run \':build-*\'\\n```\\n\\nFurthermore, glob syntax can also be applied to the project scope, allowing you to filter the target\\ninstead of applying to all projects.\\n\\n```shell\\n$ moon run \'*-{app,lib}:build-*\'\\n```\\n\\nBecause these glob targets are real globs, they support all the\\n[same syntax](/docs/concepts/file-pattern#globs) as other glob related functionality, but we suggest\\nkeeping it simple and sticking to `*`, `[]`, and `{}`.\\n\\n:::info\\n\\nBe sure to quote targets that contain glob syntax, otherwise your shell native glob expansion may\\ntrigger instead, or your shell may fail with an error.\\n\\n:::\\n\\n## Task improvements\\n\\nWe also spent some time improving the ergonomics of tasks, our most important feature.\\n\\n### Inferring inputs\\n\\nUp until now, you had to explicitly configure the [`inputs`](/docs/config/project#inputs) of a task.\\nThis can be very tedious, so we\'re looking into ways to automate this. The first is through a new\\nfeature we are calling \\"inferring inputs from task parameters\\", where we automatically include\\ninputs from any file group token functions and substituted environment variables, found within\\n`command`, `script`, `args`, or `env`.\\n\\nTo demonstate this, here\'s a task that utilizes file group tokens in previous releases.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  lint:\\n    command: \'lint @group(sources) @group(tests)\'\\n    inputs:\\n      - \'@group(sources)\'\\n      - \'@group(tests)\'\\n```\\n\\nAs you can immediately tell, there\'s a fair bit of duplication here. Going forward, the tokens found\\nwithin `inputs` can be omitted, as we can infer that the files defined in the `sources` and `tests`\\nfile groups should be inputs. The task above can simply be rewritten as.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  lint:\\n    command: \'lint @group(sources) @group(tests)\'\\n```\\n\\nUseful right? However, if you do _not_ want this functionality, you can disable it with the new task\\noption [`inferInputs`](/docs/config/project#inferinputs) (which is enabled by default).\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  lint:\\n    # ...\\n    options:\\n      inferInputs: false\\n```\\n\\n### Always run in CI\\n\\nThe [`runInCI`](/docs/config/project#runinci) task option pairs nicely with the `moon ci` command,\\nas it does most of the heavy lifting in determining what tasks to run based on affected/touched\\nfiles. However, there are sometimes situations where a task should _always_ run in CI, regardless of\\nwhether it was affected or not.\\n\\nThis isn\'t currently possible in moon, until now! We\'ve updated the `runInCI` option to support a\\nnew value, \\"always\\", which will always run the task in CI!\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    # ...\\n    options:\\n      runInCI: \'always\'\\n```\\n\\n## Remote cache improvements\\n\\nIn our last release, v1.30, we released\\n[unstable support for self-hosted remote caching](./moon-v1.30#unstable-self-hosted-remote-caching).\\nWhile still unstable in this release, we\'ve landed more improvements.\\n\\n### Zstandard compression\\n\\nWe\'ve added a new setting,\\n[`unstable_remote.cache.compression`](/docs/config/workspace#compression), that defines a\\ncompression format to use when uploading and downloading blobs. At this time, we only support `zstd`\\nas an option, which is _not_ enabled by default.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nunstable_remote:\\n  cache:\\n    compression: \'zstd\'\\n```\\n\\nIf you\'re using `bazel-remote` as your cache server, you\'ll also need to run it with zstandard\\nenabled.\\n\\n```shell\\n$ bazel-remote --dir /path/to/moon-cache --max_size 10 --storage_mode zstd --grpc_address 0.0.0.0:9092\\n```\\n\\n### Symlinking on Windows\\n\\nIn the previous release, if we encountered an output blob that should be created as a symlink, we\\nwould simply copy the file contents on Windows when restoring instead of symlinking. On Unix, these\\noutputs were symlinked correctly.\\n\\nThe reason for this, is that symlinks require\\n[privileged access on Windows](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/security-policy-settings/create-symbolic-links)\\nto function correctly. We felt that abiding the REAPI specification was more important than the\\nprivileged access requirement, so if you\'re on Windows, be sure to allow/enable symlinks on each\\nmachine.\\n\\n### Sunsetting moonbase\\n\\nSince we\'re migrating to and advocating for the self-hosted remote caching solution, we will be\\nsunsetting our [moonbase](/moonbase) product hosted at https://moonrepo.app on March 31st. All\\nactive subscriptions will be cancelled at the end of February, but caching will continue to work,\\nalbeit at the unpaid plan limits. We suggest migrating to the self-hosted solution before then!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.31.0) for a full list\\nof changes.\\n\\n- Added glob support (and `glob://`) to `generator.templates` in `.moon/workspace.yml`, allowing you\\n  to glob for your codegen template locations.\\n- Added a `--filter` option to `moon templates`.\\n- Updated the `extends` setting in `.moon/workspace.yml`, `toolchain.yml`, and `tasks.yml`, to\\n  support a list of files/URLs to extend.\\n- Updated toolchain dependency installs to retry up to 3 attempts if the install command fails.\\n- Improved the task output prefixing logic."},{"id":"proto-v0.44","metadata":{"permalink":"/blog/proto-v0.44","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-12-25_proto-v0.44.mdx","source":"@site/blog/2024-12-25_proto-v0.44.mdx","title":"proto v0.44 - New terminal user interface and versions command","description":"Merry Christmas and happy holidays \ud83c\udf84! In this release, we\'re introducing a new terminal user","date":"2024-12-25T00:00:00.000Z","tags":[{"inline":true,"label":"terminal","permalink":"/blog/tags/terminal"},{"inline":true,"label":"console","permalink":"/blog/tags/console"},{"inline":true,"label":"ui","permalink":"/blog/tags/ui"},{"inline":true,"label":"user","permalink":"/blog/tags/user"},{"inline":true,"label":"interface","permalink":"/blog/tags/interface"}],"readingTime":2.01,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.44","title":"proto v0.44 - New terminal user interface and versions command","authors":["milesj"],"tags":["terminal","console","ui","user","interface"]},"unlisted":false,"prevItem":{"title":"moon v1.31 - Toolchain progress, glob-based targets, task & remote cache improvements","permalink":"/blog/moon-v1.31"},"nextItem":{"title":"moon v1.30 - Python support, self-hosted remote caching, task graph, and more!","permalink":"/blog/moon-v1.30"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nMerry Christmas and happy holidays \ud83c\udf84! In this release, we\'re introducing a new terminal user\\ninterface.\\n\\n\x3c!--truncate--\x3e\\n\\n## New terminal output\\n\\nWe\'re excited to introduce new terminal outputs, also known as a terminal user interface (TUI), for\\nall commands! We stumbled upon the [iocraft](https://docs.rs/iocraft/latest/iocraft/) Rust crate,\\nwhich is a library for rendering terminal output using components and JSX-like syntax. As fans of\\n[React](https://react.dev/) and [Ink](https://github.com/vadimdemedes/ink), this felt like the\\nperfect opportunity to revisit all of our commands and implement a new interface unique to proto\\n(and moon in the future).\\n\\nHere are some examples of this new output. A lot of it is still a work in progress and will be\\ntweaked going forward, but we\'re already impressed with what iocraft can achieve!\\n\\n### Notices\\n\\n<Image src={require(\'./img/proto/v0.44/notice-success.png\')} width=\\"90%\\" />\\n<Image src={require(\'./img/proto/v0.44/notice-caution.png\')} width=\\"90%\\" />\\n\\n### Information\\n\\n<Image src={require(\'./img/proto/v0.44/info-env.png\')} width=\\"90%\\" />\\n<Image src={require(\'./img/proto/v0.44/info-plugin.png\')} width=\\"90%\\" />\\n\\n### Tables\\n\\n<Image src={require(\'./img/proto/v0.44/table-outdated.png\')} width=\\"90%\\" />\\n<Image src={require(\'./img/proto/v0.44/table-search.png\')} width=\\"90%\\" />\\n\\n### Prompts\\n\\n<Image src={require(\'./img/proto/v0.44/confirm.png\')} width=\\"90%\\" />\\n<Image src={require(\'./img/proto/v0.44/select.png\')} width=\\"90%\\" />\\n\\n### Progress\\n\\n<Image src={require(\'./img/proto/v0.44/progress.png\')} width=\\"90%\\" />\\n\\n## New `proto versions` command\\n\\nAfter much feedback, we\'ve decided to merge the `proto list` and `proto list-remote` commands into a\\nnew command, [`proto versions`](/docs/proto/commands/versions). This command will list all versions\\navailable for the provided tool, while also annotating which of those versions has been installed\\nlocally.\\n\\nThis data can now be accessed as JSON by passing the `--json` flag.\\n\\n```shel\\n$ proto versions node\\n...\\n22.0.0\\n22.1.0\\n22.2.0\\n22.3.0\\n22.4.0\\n22.4.1\\n22.5.0\\n22.5.1\\n22.6.0\\n22.7.0\\n22.8.0\\n22.9.0\\n22.10.0\\n22.11.0\\n22.12.0\\n23.0.0\\n23.1.0\\n23.2.0\\n23.3.0\\n23.4.0 - installed 12/19/24\\n23.5.0 - installed 12/25/24\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.44.0) for a full list\\nof changes.\\n\\n- Added a `--yes` option to `proto outdated`, that skips confirmation prompts.\\n- Added a `--json` option to `proto clean`, to capture the cleaned result as JSON.\\n- Updated `proto clean` to accept a target in which to clean as the 1st argument. For example,\\n  `proto clean cache`.\\n- Moved the `--json` and `--yes` options into global options."},{"id":"moon-v1.30","metadata":{"permalink":"/blog/moon-v1.30","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-11-25_moon-v1.30.mdx","source":"@site/blog/2024-11-25_moon-v1.30.mdx","title":"moon v1.30 - Python support, self-hosted remote caching, task graph, and more!","description":"It\'s been almost 2 months since our last release, and we\'re excited to announce some major features","date":"2024-11-25T00:00:00.000Z","tags":[{"inline":true,"label":"affected","permalink":"/blog/tags/affected"},{"inline":true,"label":"detection","permalink":"/blog/tags/detection"},{"inline":true,"label":"tracker","permalink":"/blog/tags/tracker"},{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"graph","permalink":"/blog/tags/graph"},{"inline":true,"label":"self-hosted","permalink":"/blog/tags/self-hosted"},{"inline":true,"label":"remote","permalink":"/blog/tags/remote"},{"inline":true,"label":"cache","permalink":"/blog/tags/cache"},{"inline":true,"label":"python","permalink":"/blog/tags/python"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"}],"readingTime":5.81,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.30","title":"moon v1.30 - Python support, self-hosted remote caching, task graph, and more!","authors":["milesj"],"tags":["affected","detection","tracker","task","graph","self-hosted","remote","cache","python","toolchain"],"image":"./img/moon/v1.30.png"},"unlisted":false,"prevItem":{"title":"proto v0.44 - New terminal user interface and versions command","permalink":"/blog/proto-v0.44"},"nextItem":{"title":"proto v0.42 - New bin linking, JSON/YAML plugins, and more","permalink":"/blog/proto-v0.42"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nIt\'s been almost 2 months since our last release, and we\'re excited to announce some major features\\nrequested by the community!\\n\\n\x3c!--truncate--\x3e\\n\\n## Experimental Python tier 2 and 3 support\\n\\nThanks to a contribution from [@harlequin](https://github.com/harlequin), we now provide Python tier\\n[2](/docs/how-it-works/languages#tier-2--platform) and\\n[3](/docs/how-it-works/languages#tier-3--toolchain) support. Python is a very popular language, so\\nit was about time that we officially supported it in some capacity. When enabling Python in moon,\\nthe following functionality will be enabled:\\n\\n- Will download and install Python into the toolchain (if `python.version` is defined).\\n- Will parse `requirements.txt` to extract dependency and version information for hashing.\\n- Will automatically activate virtual environments and setup `PATH` for tasks.\\n- Will automatically install dependencies for `requirements.txt` via pip.\\n- And a handful of internal interoperability features.\\n\\nHowever, we\'re still marking this implementation as experimental, as it hasn\'t been thoroughly\\ntested, and we\'re not 100% positive the workflows are what users expect. So please provide any\\nfeedback, good or bad!\\n\\nFurthermore, as mentioned above, we install dependencies with pip (the version of pip that comes\\npre-installed with the current Python version). At this time, _we do not support_ other package\\nmanagers like Poetry, Hatch, PDM, Rye, or uv, but we will in the future!\\n\\n### New `python` configurations\\n\\nLanguages in\\n[moon are enabled through configuration](/docs/how-it-works/languages#enabling-a-language) blocks in\\n[`.moon/toolchain.yml`](/docs/config/toolchain), and Python is no different. We now support a\\n[`python`](/docs/config/toolchain#python) toolchain setting\\n([view all available settings](/docs/config/toolchain)).\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\npython:\\n  version: \'3.14.0\'\\n```\\n\\nWhen the `python` setting is defined, it will enable the language and\\n[deep platform integration](/docs/how-it-works/languages#tier-2--platform), and when the\\n`python.version` field is defined, it will further enable\\n[toolchain support](/docs/how-it-works/languages#tier-3--toolchain). Both of these features provide\\nheavy automation, improving the overall developer experience.\\n\\nThis is fantastic, but what if another Python project in the monorepo requires a different toolchain\\nchannel/version? If so, they can use the new [`toolchain.python`](/docs/config/project#python)\\nsetting in [`moon.yml`](/docs/config/project) to define project-level overrides.\\n\\n```yaml title=\\"<project>/moon.yml\\"\\ntoolchain:\\n  python:\\n    version: \'3.12.0\'\\n```\\n\\n### Built-in virtual environments\\n\\nOf course we also have support for Python virtual environments. When running a task, moon will\\nautomatically enable the virtual environment in the workspace root or a project root (depending on\\nconfig)! The name of the venv can be customized with the\\n[`python.venvName`](/docs/config/toolchain#venvname) setting, otherwise it defaults to `.venv`.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\npython:\\n  venvName: \'.venvcustom\'\\n```\\n\\n## Unstable self-hosted remote caching\\n\\nThis has been a request from the community for a very long time, and we get it, not every user wants\\nto store their build artifacts (not source code) in a third-party cloud provider. While we\'re proud\\nof our [moonbase service](/moonbase), it wasn\'t a viable option for many companies because of their\\nproprietary requirements. We spent a few months reworking moonbase to work as a self-hosted service,\\nso users can host it as on-prem solution, but it has been a very costly initiative. During this\\nprocess, we came to the conclusion that spending our time and resources on moonbase simply isn\'t\\nworth it, so we made the hard decision to sunset moonbase in the future.\\n\\nSo what does that mean for remote caching? Simply put, you can now host your own remote caching\\nservice! Instead of building a custom API for consumers to implement, we opted to implement the\\n[Bazel Remote Execution API](https://github.com/bazelbuild/remote-apis/blob/main/build/bazel/remote/execution/v2/remote_execution.proto),\\nwhich supports a content addressable storage (CAS) API, and is used by other popular build tools,\\nlike Bazel, Buck, Pants, and more!\\n\\nBecause we opted for a community solution, we can now focus all our efforts on [moon](/moon) and\\n[proto](/proto)! Additionally, adopting RE API allows you, the user, to use an off-the-shelf\\nsolution, like [`bazel-remote`](https://github.com/buchgr/bazel-remote), instead of building your\\nown custom caching server! For example, to make use of remote caching, simply serve `bazel-remote`:\\n\\n```shell\\nbazel-remote --dir /path/to/moon-cache --max_size 10 --storage_mode uncompressed --grpc_address 0.0.0.0:9092\\n```\\n\\nAnd then configure the new [`unstable_remote`](/docs/config/workspace#unstable_remote) setting in\\n[`.moon/workspace.yml`](/docs/config/workspace).\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nunstable_remote:\\n  host: \'grpc://your-host.com:9092\'\\n```\\n\\nPretty awesome right? Jump to the\\n[official remote caching](/docs/guides/remote-cache#self-hosted-unstable) documentation for more\\ninformation on this implementation.\\n\\n### Unsupported features\\n\\nSince this is a new feature, we\'re marking it as unstable, as it hasn\'t been thoroughly tested, and\\n_does not_ support the entire Bazel RE API. The following features _have not_ been implemented, but\\nwill be in the future.\\n\\n- HTTP(S) host (we only support gRPC(S))\\n- Digest hashing functions besides SHA256\\n- Compression formats (we only support identity/uncompressed right now)\\n- Write/read bytestream for large blobs (4mb is the current limit)\\n- Better TLS/mTLS support (it has some issues)\\n- Directory blob types\\n\\n## New task graph and improved affected tracker\\n\\nIn our [last release](./moon-v1.29#new-affected-projects-tracker), we announced a new affected\\ntracker for projects, but _not_ for tasks. The reason behind this was simple, we couldn\'t! Up until\\nnow, we had no concept of a task graph, we had a project graph (that had tasks) and an action graph\\n(that ran tasks), but the relationships between tasks were split across both of these graphs.\\n\\nThis made it complicated to support tasks for the new affected tracker, as the action graph\\n_consumes_ the tracker, not the other way around. To remedy this issue, we now support an official\\ntask graph, which is derived from the project graph, and then feeds into the action graph. Since the\\ntask graph sits outside of the action graph, we\'re now able to support tasks in the affected\\ntracker!\\n\\nBecause of the new task graph, the following improvements have been introduced:\\n\\n- Tasks are now supported in the affected tracker (as mentioned).\\n- We can now properly query dependencies and dependents of specific tasks.\\n- We can now associate types to relationships (graph edges). For example, in the future we can add\\n  optional, cleanup, and other kinds of dependencies.\\n- We\'ve added a new command, [`moon task-graph`](/docs/commands/task-graph), that can visualize\\n  tasks in isolation.\\n- We\'ve updated the [`moon query tasks`](/docs/commands/query/tasks) to derive information from the\\n  task graph.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.30.0) for a full list\\nof changes.\\n\\n- Added basic support for Git submodules, and will now extract touched files from all submodules.\\n- Added 7 new token variables: `$arch`, `$os`, `$osFamily`, `$vcsBranch`, `$vcsRepository`,\\n  `$vcsRevision`, `$workingDir`\\n- Added a `rust.binstallVersion` setting to `.moon/toolchain.yml`.\\n- Updated Pkl configurations to support `read()` for environment variables."},{"id":"proto-v0.42","metadata":{"permalink":"/blog/proto-v0.42","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-10-31_proto-v0.42.mdx","source":"@site/blog/2024-10-31_proto-v0.42.mdx","title":"proto v0.42 - New bin linking, JSON/YAML plugins, and more","description":"Happy Halloween \ud83c\udf83! In this release, we have a new bin linking strategy, and more schema plugin","date":"2024-10-31T00:00:00.000Z","tags":[{"inline":true,"label":"bin","permalink":"/blog/tags/bin"},{"inline":true,"label":"link","permalink":"/blog/tags/link"},{"inline":true,"label":"strategy","permalink":"/blog/tags/strategy"},{"inline":true,"label":"json","permalink":"/blog/tags/json"},{"inline":true,"label":"yaml","permalink":"/blog/tags/yaml"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"}],"readingTime":2.98,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.42","title":"proto v0.42 - New bin linking, JSON/YAML plugins, and more","authors":["milesj"],"tags":["bin","link","strategy","json","yaml","plugin"],"image":"./img/proto/v0.42.png"},"unlisted":false,"prevItem":{"title":"moon v1.30 - Python support, self-hosted remote caching, task graph, and more!","permalink":"/blog/moon-v1.30"},"nextItem":{"title":"moon v1.29 - Improved affected tracking, experimental Pkl configuration, and more","permalink":"/blog/moon-v1.29"}},"content":"import NonWasmTabs from \'@site/src/components/NonWasmTabs\';\\n\\nHappy Halloween \ud83c\udf83! In this release, we have a new bin linking strategy, and more schema plugin\\nformats.\\n\\n\x3c!--truncate--\x3e\\n\\n## New bin linking strategy\\n\\nEarly on in proto\'s development, we added `~/.proto/bin` symlink support for installed tools, but\\nchose to base it on the versions globally pinned in `~/.proto/.prototools`. We opted for this\\napproach as there wasn\'t a better solution at the time, and we merely wanted an alternative to\\nshims. Since then, bin linking has become an after-thought.\\n\\nHowever, a suggestion from [@meop](https://github.com/meop) sparked a great idea for the future of\\nbin linking. Instead of symlinking bins based on versions pinned in `~/.proto/.prototools`, bins are\\nnow symlinked based on all of the versions installed, but grouped according to version ranges. The\\nmain binary will always point to the highest installed version, while we also create binaries for\\nthe highest major, and highest major + minor combinations.\\n\\nFor example, for Node.js (`node`), we may have the following:\\n\\n- `~/.proto/bin/node` - Points to the highest version.\\n- `~/.proto/bin/node-<major>` - Points to the highest version within that major range (`~major`). Is\\n  created for each separate major version, for example: `node-20`, `node-22`.\\n- `~/.proto/bin/node-<major>.<minor>` - Points to the highest version within that major + minor\\n  range (`~major.minor`). Is created for each separate major + minor version, for example:\\n  `node-20.1`, `node-22.4`.\\n- `~/.proto/bin/node-canary` - Points to a canary install, if it exists.\\n\\nThanks to this approach, you could easily execute commands with specific versions of a tool,\\n_without_ having to set environment variables, update configurations, or force overrides. Just\\nexecute the binary directly!\\n\\n```shell\\n$ node --version && which node\\n23.1.0\\n~/.proto/bin/node -> ~/.proto/tools/node/23.1.0/bin/node\\n\\n$ node-22 --version && which node-22\\n22.5.1\\n~/.proto/bin/node-22 -> ~/.proto/tools/node/22.5.1/bin/node\\n```\\n\\n> This change is not retroactive and will slowly be applied tool-by-tool when it is installed. To\\n> force relinking of all binaries, you can use `proto regen --bin` after upgrading.\\n\\n## Support for JSON and YAML based plugins\\n\\nSupport for TOML based plugins, an alternative to WASM based plugins, was integrated in proto v0.7;\\nwhich is 35 versions ago! Since then, we\'ve had great success with TOML plugins, as they represent\\nabout 97% of all plugins in the registry. The other 3% is WASM of course.\\n\\nHowever, TOML is a configuration format that is quite unknown outside of the Rust ecosystem, and has\\na bit of a learning curve for new users. To ease the plugin authoring process, we now support JSON\\nand YAML based plugins! To demonstrate this, here\'s our official moon plugin in all 3 formats:\\n\\n<NonWasmTabs\\n  title=\\"moon\\"\\n  data={{\\n    name: \'moon\',\\n    type: \'cli\',\\n    platform: {\\n      linux: {\\n        downloadFile: \'moon-{arch}-unknown-linux-{libc}\',\\n      },\\n      macos: {\\n        downloadFile: \'moon-{arch}-apple-darwin\',\\n      },\\n      windows: {\\n        downloadFile: \'moon-{arch}-pc-windows-msvc.exe\',\\n      },\\n    },\\n    install: {\\n      downloadUrl: \'https://github.com/moonrepo/moon/releases/download/v{version}/{download_file}\',\\n      downloadUrlCanary:\\n        \'https://github.com/moonrepo/moon/releases/download/canary/{download_file}\',\\n    },\\n    resolve: {\\n      gitUrl: \'https://github.com/moonrepo/moon\',\\n    },\\n    metadata: {\\n      selfUpgradeCommands: [\'upgrade\'],\\n    },\\n  }}\\n/>\\n\\n> JSON and YAML use camelCase keys, while TOML uses kebab-case.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.42.0) for a full list\\nof changes.\\n\\n- Each tool\'s primary executable file name is no longer based on the plugin\'s identifier, and is now\\n  based on what\'s configured in the new `LocateExecutablesOutput.exes` setting.\\n- We now cache all text-based HTTP requests made from WASM plugins for 12 hours. This should greatly\\n  reduce the overhead cost of making requests, and will help for situations where an internet\\n  connection is lost."},{"id":"moon-v1.29","metadata":{"permalink":"/blog/moon-v1.29","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-10-07_moon-v1.29.mdx","source":"@site/blog/2024-10-07_moon-v1.29.mdx","title":"moon v1.29 - Improved affected tracking, experimental Pkl configuration, and more","description":"In this release, we\'re excited to introduce an improved affected tracker and a new (but","date":"2024-10-07T00:00:00.000Z","tags":[{"inline":true,"label":"affected","permalink":"/blog/tags/affected"},{"inline":true,"label":"detection","permalink":"/blog/tags/detection"},{"inline":true,"label":"tracker","permalink":"/blog/tags/tracker"},{"inline":true,"label":"project","permalink":"/blog/tags/project"},{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"config","permalink":"/blog/tags/config"},{"inline":true,"label":"pkl","permalink":"/blog/tags/pkl"}],"readingTime":8.3,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.29","title":"moon v1.29 - Improved affected tracking, experimental Pkl configuration, and more","authors":["milesj"],"tags":["affected","detection","tracker","project","task","config","pkl"],"image":"./img/moon/v1.29.png"},"unlisted":false,"prevItem":{"title":"proto v0.42 - New bin linking, JSON/YAML plugins, and more","permalink":"/blog/proto-v0.42"},"nextItem":{"title":"moon v1.28 - Task presets, OS tasks, meta tokens, and more","permalink":"/blog/moon-v1.28"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nIn this release, we\'re excited to introduce an improved affected tracker and a new (but\\nexperimental) configuration format!\\n\\n\x3c!--truncate--\x3e\\n\\n## New affected projects tracker\\n\\nWe\'ve received a lot of feedback that our affected projects and tasks logic works differently across\\ncommands, or that it\'s hard to understand why something is affected or not affected. We wanted to\\nadd more clarity around affected projects, so have implemented a new affected tracker.\\n\\nThis new tracker includes a ton of new logging that we believe will answer the \\"why\\". For example,\\nonce the tracker has finished tracking, we\'ll log all affected projects and tasks, and what marked\\ntheir affected state.\\n\\n```shell\\n[DEBUG] moon_affected::affected_tracker  Project website is affected by  files=[\\"website/blog/2024-10-01_moon-v1.29.mdx\\"] upstream=[] downstream=[] other=false\\n[DEBUG] moon_affected::affected_tracker  Project runtime is affected by files=[] upstream=[] downstream=[\\"website\\"] other=false\\n[DEBUG] moon_affected::affected_tracker  Project types is affected by  files=[] upstream=[] downstream=[\\"website\\", \\"runtime\\"] other=false\\n[DEBUG] moon_affected::affected_tracker  Task runtime:build is affected by  env=[] files=[] upstream=[] downstream=[\\"website:start\\", \\"website:build\\"] other=false\\n[DEBUG] moon_affected::affected_tracker  Task website:start is affected by  env=[] files=[\\"website/blog/2024-10-01_moon-v1.29.mdx\\"] upstream=[] downstream=[] other=false\\n[DEBUG] moon_affected::affected_tracker  Task types:build is affected by  env=[] files=[] upstream=[] downstream=[\\"website:start\\", \\"runtime:build\\", \\"website:build\\"] other=false\\n[DEBUG] moon_affected::affected_tracker  Task website:build is affected by  env=[] files=[\\"website/blog/2024-10-01_moon-v1.29.mdx\\"] upstream=[] downstream=[] other=false\\n```\\n\\nWhat marks an affected state is based on one or many of the following:\\n\\n- By touched files\\n- By environment variables (task only)\\n- By upstream dependencies\\n- By downstream dependents (project only)\\n- And other minor internal logic\\n\\nThis information is also included in the run report at `.moon/cache/runReport.json`, under the\\n`context.affected` property. An example of this looks like:\\n\\n```json\\n{\\n  \\"projects\\": {\\n    \\"website\\": {\\n      \\"files\\": [\\"website/blog/2024-10-01_moon-v1.29.mdx\\"],\\n      \\"other\\": true\\n    },\\n    \\"runtime\\": {\\n      \\"downstream\\": [\\"website\\"],\\n      \\"other\\": true\\n    },\\n    \\"types\\": {\\n      \\"downstream\\": [\\"website\\", \\"runtime\\"],\\n      \\"other\\": true\\n    }\\n  },\\n  \\"tasks\\": {\\n    \\"website:build\\": {\\n      \\"files\\": [\\"website/blog/2024-10-01_moon-v1.29.mdx\\"],\\n      \\"other\\": false\\n    },\\n    \\"types:build\\": {\\n      \\"downstream\\": [\\"website:build\\"],\\n      \\"other\\": false\\n    },\\n    \\"runtime:build\\": {\\n      \\"downstream\\": [\\"website:build\\"],\\n      \\"other\\": false\\n    }\\n  }\\n}\\n```\\n\\n### Control upstream / downstream depth\\n\\nWith this new tracker, we now have the ability to control the traversal depth for upstream\\ndependencies and downstream dependents in `moon query projects`, via the `--upstream` and\\n`--downstream` options respectively (the `--dependents` option is now deprecated).\\n\\nThese options support the following values:\\n\\n- `none` - Do not traverse deps.\\n- `direct` - Traverse direct parent/child deps.\\n- `deep` - Traverse full hierarchy deps.\\n\\n```shell\\n$ moon query projects --affected --upstream none --downstream deep\\n```\\n\\n### What about tasks?\\n\\nWe have the existing affected logic that has powered moon for years, and have updated that to\\ninclude the new logging. However, it\'s not perfect and we want to improve it.\\n\\nTo support this overall enhancement for tasks, we need to support a task graph, which we currently\\ndo not. We only have a project graph (which has tasks), and an action graph (which has more than\\ntasks). In a future release, we\'ll introduce a new task graph that will fill the gaps.\\n\\n## Experimental support for Pkl based configuration\\n\\nPkl, what is that? If you haven\'t heard of Pkl yet,\\n[Pkl is a programmable configuration format by Apple](https://pkl-lang.org/). But what about YAML?\\nYAML has served us well since the beginning, but we\'re not happy with YAML. It\'s better than JSON,\\nTOML, and XML, but still has its downsides. We want something better, something that meets the\\nfollowing requirements:\\n\\n- Is easy to read and write.\\n- Is dynamic and programmable (loops, variables, etc).\\n- Has type-safety or built-in schema support.\\n- Has Rust serde integration.\\n\\nThe primary requirement that we are hoping to achieve is adopting a configuration format that is\\n_programmable_. We want something that has native support for variables, loops, conditions, and\\nmore, so that you could curate and compose your configuration very easily. Hacking this\\nfunctionality into YAML is a terrible user experience in our opinion!\\n\\nAnd with all that said, I\'m sure you\'re curious what Pkl actually looks like in practice. Here\'s a\\nfew examples (unfortunately no syntax highlighting)!\\n\\n<Tabs\\n  defaultValue=\\"project\\"\\n  values={[\\n    { label: \'moon.pkl\', value: \'project\' },\\n    { label: \'.moon/workspace.pkl\', value: \'workspace\' },\\n    { label: \'.moon/toolchain.pkl\', value: \'toolchain\' },\\n  ]}\\n>\\n<TabItem value=\\"project\\">\\n\\n```pkl\\ntype = \\"application\\"\\nlanguage = \\"typescript\\"\\ndependsOn = List(\\"client\\", \\"ui\\")\\n\\ntasks {\\n  [\\"build\\"] {\\n    command = \\"docusaurus build\\"\\n    deps = List(\\"^:build\\")\\n    outputs = List(\\"build\\")\\n    options {\\n      interactive = true\\n      retryCount = 3\\n    }\\n  }\\n  [\\"typecheck\\"] {\\n    command = \\"tsc --build\\"\\n    inputs = new Listing {\\n      \\"@globs(sources)\\"\\n      \\"@globs(tests)\\"\\n      \\"tsconfig.json\\"\\n      \\"/tsconfig.options.json\\"\\n    }\\n  }\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"workspace\\">\\n\\n```pkl\\nprojects {\\n  globs = List(\\"apps/*\\", \\"packages/*\\")\\n  sources {\\n    [\\"root\\"] = \\".\\"\\n  }\\n}\\n\\nvcs {\\n  defaultBranch = \\"master\\"\\n}\\n```\\n\\n</TabItem>\\n<TabItem value=\\"toolchain\\">\\n\\n```pkl\\nnode {\\n  version = \\"20.15.0\\"\\n  packageManager = \\"yarn\\"\\n  yarn {\\n    version = \\"4.3.1\\"\\n  }\\n  addEnginesConstraint = false\\n  inferTasksFromScripts = false\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\nPretty straight forward for the most part! Lists/Listings (arrays) are a bit different than what you\\nmay be used to, but they\'re super easy to learn.\\n\\n### Advanced examples\\n\\nI\'ve talked a lot about programmable configs, but what exactly does that look like? Let\'s go through\\na few examples. Say you are building a Rust crate and you need a build task for each operating\\nsystem. In YAML you would need to define each of these manually, but with Pkl, you can build it with\\na loop!\\n\\n```pkl\\ntasks {\\n  for (_os in List(\\"linux\\", \\"macos\\", \\"windows\\")) {\\n    [\\"build-\\\\(_os)\\"] {\\n      command = \\"cargo\\"\\n      args = List(\\n        \\"--target\\",\\n        if (_os == \\"linux\\") \\"x86_64-unknown-linux-gnu\\"\\n          else if (_os == \\"macos\\") \\"x86_64-apple-darwin\\"\\n          else \\"i686-pc-windows-msvc\\",\\n        \\"--verbose\\"\\n      )\\n      options {\\n        os = _os\\n      }\\n    }\\n  }\\n}\\n```\\n\\nOr maybe you want to share inputs across multiple tasks. This can be achieved with `local`\\nvariables.\\n\\n```pkl\\nlocal _sharedInputs = List(\\"src/**/*\\")\\n\\ntasks {\\n  [\\"test\\"] {\\n    // ...\\n    inputs = List(\\"tests/**/*\\") + _sharedInputs\\n  }\\n  [\\"lint\\"] {\\n    // ...\\n    inputs = List(\\"**/*.graphql\\") + _sharedInputs\\n  }\\n}\\n```\\n\\nPretty awesome right? This is just a taste of what Pkl has to offer! We highly suggest reading the\\n[language reference](https://pkl-lang.org/main/current/language-reference/index.html), the\\n[standard library](https://pkl-lang.org/main/current/standard-library.html), or looking at our\\n[example configurations](https://github.com/moonrepo/moon/tree/master/crates/config/tests/__fixtures__/pkl)\\nwhile testing Pkl.\\n\\n> In the future, if Pkl seems like the right fit, we plan to take full advantage of what it has to\\n> offer, by creating our own Pkl projects, modules, and types!\\n\\n### Caveats and restrictions\\n\\nSince this is an entirely new configuration format that is quite dynamic compared to YAML, there are\\nsome key differences to be aware of!\\n\\n- Each `.pkl` file is evaluated in isolation (loops are processed, variables assigned, etc). This\\n  means that task inheritance and file merging cannot extend or infer this native functionality.\\n\\n- `default` is a\\n  [special feature](https://pkl-lang.org/main/current/language-reference/index.html#default-element)\\n  in Pkl and cannot be used as a setting name. This only applies to\\n  [`template.yml`](/docs/config/template#default), but can be worked around by using `defaultValue`\\n  instead.\\n\\n```pkl title=\\"template.yml\\"\\nvariables {\\n  [\\"age\\"] {\\n    type = \\"number\\"\\n    prompt = \\"Age?\\"\\n    defaultValue = 0\\n}\\n```\\n\\n- `local` is also a reserved word in Pkl. It can be worked around by escaping it with backticks, or\\n  you can simply use the [`preset` setting](/docs/config/project#preset) instead.\\n\\n```pkl\\ntasks {\\n  [\\"example\\"] {\\n    `local` = true\\n    # Or\\n    preset = \\"server\\"\\n  }\\n}\\n```\\n\\n- Only files are supported. Cannot use or extend from URLs.\\n\\n### How to use Pkl?\\n\\nAs mentioned in the heading, Pkl support is experimental, and _is not_ enabled by default. If you\'re\\ninterested in trying out Pkl, you can with the following:\\n\\n- [Install `pkl` onto `PATH`](https://pkl-lang.org/main/current/pkl-cli/index.html#installation).\\n  Pkl uses a client-server communication model.\\n  - Can also be installed with proto:\\n    `proto plugin add pkl https://raw.githubusercontent.com/milesj/proto-plugins/refs/heads/master/pkl.toml`\\n- Use the `.pkl` file extension instead of `.yml`.\\n- Pass the `--experimentPklConfig` CLI option, or set the `MOON_EXPERIMENT_PKL_CONFIG` environment\\n  variable.\\n\\n```shell\\n$ moon check --all --experimentPklConfig\\n# Or\\n$ MOON_EXPERIMENT_PKL_CONFIG=true moon check --all\\n```\\n\\n> Pkl can be used alongside YAML with no issues! We\'ll merge, inherit, and compose as usual.\\n\\n### What about X instead?\\n\\nThere are a handful of other interesting or popular programmable configurations out there, so why\\nisn\'t moon experimenting with those? The answer is, we may! Just so long as they meet the\\nrequirements. With that said, we do have some opinions below:\\n\\n- [Starlark/Skylark](https://github.com/bazelbuild/starlark/) - On our list to evaluate.\\n- [Nickel](https://nickel-lang.org), [Jsonnet](https://jsonnet.org) - On our list to evaluate, but\\n  not a fan of the JSON-like syntax.\\n- [Dhall](https://dhall-lang.org) - While this meets most of our requirements, the syntax isn\'t as\\n  readable or user-friendly as we\'d like.\\n- [CUE](https://cuelang.org/) - No Rust support, so unlikely. It also works quite differently than\\n  the other tools.\\n- [KCL](https://www.kcl-lang.io/) - Nice syntax and meets the requirements, but no Rust support.\\n\\nIf there\'s another format you think we should investigate, drop us a line in Discord!\\n\\n## Looking for contributors!\\n\\nAre you a fan of moon (or proto)? Interested in learning Rust or writing more Rust? Want to\\ncontribute to an awesome project (we think so)? Well it just so happens that we are looking for\\nactive contributors!\\n\\nWe have a very long roadmap of features we would like to implement, but do not have enough time or\\nresources to implement them in the timeframe we would like. These features range from very small\\n(low hanging fruit) to very large (and quite complex).\\n\\nIf this sounds like something you may be interested in, post a message in Discord and let us know!\\nOnly a few hours a week commitment is good enough for us.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.29.0) for a full list\\nof changes.\\n\\n- Added a new task option, `cacheLifetime`, that controls how long a task will be cached for.\\n- Added a new task merge strategy, `preserve`, that preserves the original inherited value.\\n- Added a new setting `vcs.hookFormat` to `.moon/workspace.yml`, that can customize the shell/file\\n  format for hooks.\\n- Updated task `outputs` to support token and environment variables.\\n- Updated `moon query projects` to include the project description as a trailing value.\\n- Updated `moon query tasks` to include the task type and platform, and the task description as a\\n  trailing value."},{"id":"moon-v1.28","metadata":{"permalink":"/blog/moon-v1.28","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-09-02_moon-v1.28.mdx","source":"@site/blog/2024-09-02_moon-v1.28.mdx","title":"moon v1.28 - Task presets, OS tasks, meta tokens, and more","description":"In this release, we\'ve focused on developer experience and quality-of-life improvements.","date":"2024-09-02T00:00:00.000Z","tags":[{"inline":true,"label":"os","permalink":"/blog/tags/os"},{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"meta","permalink":"/blog/tags/meta"},{"inline":true,"label":"token","permalink":"/blog/tags/token"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"preset","permalink":"/blog/tags/preset"}],"readingTime":4.76,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.28","title":"moon v1.28 - Task presets, OS tasks, meta tokens, and more","authors":["milesj"],"tags":["os","task","meta","token","toolchain","preset"],"image":"./img/moon/v1.28.png"},"unlisted":false,"prevItem":{"title":"moon v1.29 - Improved affected tracking, experimental Pkl configuration, and more","permalink":"/blog/moon-v1.29"},"nextItem":{"title":"proto v0.40 - Config mode, progress bars, and more","permalink":"/blog/proto-v0.40"}},"content":"In this release, we\'ve focused on developer experience and quality-of-life improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## New task presets\\n\\nFor the longest time, moon has supported the [`local`](/docs/config/project#local) setting for\\ntasks. This setting was added early on to reduce the amount of options configuration necessary for\\ntasks that \\"should only run locally\\". However, after years of supporting this setting, we\'ve\\ndiscovered a few short-comings with it:\\n\\n- The name is confusing. It\'s not apparent what \\"local\\" really means for newcomers.\\n- This setting also changes non-local related options, like `persistent` and `cache`, which isn\'t\\n  apparent to the user.\\n- Setting the value to `false` doesn\'t inverse the options values. For example, enabling `runInCI`.\\n\\nAt this point we thought to ourselves \\"how can we improve this experience?\\". Instead of reworking\\n`local`, we\'ve opted to introduce a new task setting called [`preset`](/docs/config/project#preset),\\nwhich configures a collection of task options, and deprecate the `local` setting. Presets are a much\\nbetter pattern, as it allows us to support multiple presets, and uniquely name our presets. For\\nexample, old `local` tasks can be rewritten as such:\\n\\n```yaml title=\\"moon.yml\\"\\n# Before\\ntasks:\\n  start:\\n    command: \'vite dev\'\\n    local: true\\n\\n# After\\ntasks:\\n  start:\\n    command: \'vite dev\'\\n    preset: \'server\'\\n```\\n\\nTo start, we\'re introducing 2 presets: `server` and `watcher`. Check out the\\n[documentation for more information](/docs/config/project#preset) on what these presets configure!\\nIf you have ideas for other presets, we would love to hear them.\\n\\n## New OS specific tasks\\n\\nWhen moon was originally designed, it was meant to be a very simple but easily configurable task\\nrunner. But since then, moon has grown drastically, and so has the requirements of its users. One\\nsuch request was being able to define tasks that only run for certain operating systems.\\n\\nThis wasn\'t possible before; but is now thanks to the new\\n[`os` task option](/docs/config/project#os). This option can be configured with \\"linux\\", \\"macos\\", or\\n\\"windows\\" to target those specific systems, and can be a single value, or list of values.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build-linux:\\n    command: \'cargo build --target x86_64-unknown-linux-gnu\'\\n    options:\\n      os: \'linux\'\\n  build-macos:\\n    command: \'cargo build --target x86_64-apple-darwin\'\\n    options:\\n      os: \'macos\'\\n  build-windows:\\n    command: \'cargo build --target x86_64-pc-windows-msvc\'\\n    options:\\n      os: \'windows\'\\n```\\n\\nWhen a task is ran on a non-compatible system, it will be converted to a no-operation task, so that\\ndependency chains still resolve correctly.\\n\\n> In the future, we will look into supporting system architecture as well.\\n\\n## New `@meta` token function\\n\\nIn our last release, we introduced the [`project.metadata`](/docs/config/project#metadata-1) setting\\nas a means for consumers to define their own metadata. This is great but it provided no other\\nbenefit, as it required consumers to open up config files to discover this metadata, or consumers to\\nwrite custom abstractions/tooling. We want to improve the integration of this information within\\nmoon, so to start, we\'re introducing a new token function [`@meta(key)`](/docs/concepts/token#meta).\\n\\nThe [`@meta(key)`](/docs/concepts/token#meta) token function can be used to access project metadata\\nfrom both the [`project`](/docs/config/project#project) and\\n[`project.metadata`](/docs/config/project#metadata-1) settings. The former values will be used\\nas-is, while the latter values will be JSON stringified (since consumers can define anything).\\n\\nWith this new token, our task composition has grown even deeper. For example, you can define a task\\nat the top-level that a project inherits, and then define metadata within that project for the task!\\nWith that said, this is more of a stopgap solution until we support true variables within\\nconfiguration.\\n\\n```yaml title=\\".moon/tasks.yml\\"\\ntasks:\\n  build:\\n    script: \'compile --label @meta(name) --compress @meta(compression)\'\\n```\\n\\n```yaml title=\\"<project>/moon.yml\\"\\nproject:\\n  name: \'example\'\\n  metadata:\\n    compression: 9\\n```\\n\\nAnd lastly, while we\'re on the topic of tokens, we\'re also introducing `$projectName`,\\n`$projectChannel`, and `$projectOwner` token variables, as an easier alternative solution.\\n\\n## New `disallowRunInCiMismatch` experiment\\n\\nHave you ever ran [`moon ci`](/docs/commands/ci) in CI and encountered a scenario where tasks that\\n_should_ have run didn\'t run? Or the dependency of a task never runs causing the dependent to fail?\\nIf so, this may apply to you!\\n\\nThis scenario is most likely caused by an invalid relationship where the dependent is\\n[`runInCI`](/docs/config/project#runinci) enabled, but the dependency is\\n[`runInCI`](/docs/config/project#runinci) disabled. For example:\\n\\n```yml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    # ...\\n    options:\\n      runInCI: false\\n\\n  analyze:\\n    # ...\\n    deps: [\'build\']\\n    options:\\n      runInCI: true\\n```\\n\\nBecause `build` is disabled, its outputs may not be created. Additionally, if `build` is affected by\\ntouched files, the `analyze` task will not run automatically unless it was also affected. We try our\\nbest to accommodate these scenarios and \\"detect\\" when things should run or not, but it\'s fallible,\\nas there\'s many ways that tasks can relate to each other.\\n\\nTo try and remedy this going forward, we\'re introducing the new `disallowRunInCiMismatch` experiment\\nthat will _hard error_ if an invalid relationship is configured. We want to try and capture how\\noften users are configuring this, whether intentionally or accidentally. If the error becomes a\\nblocker, the experiment can be disabled as so:\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nexperiments:\\n  disallowRunInCiMismatch: false\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.28.0) for a full list\\nof changes.\\n\\n- We\'ve sunset the CI insights feature in moonbase. We will no longer be tracking CI run history.\\n  This is a retroactive change that applies to all moon versions.\\n- Added `codeowners.requiredApprovals` setting to `.moon/workspace.yml`, that will apply\\n  requirements to all paths.\\n- Updated the terminal checkpoint (4 squares) colors to better reflect their state.\\n- Updated `MOON_TOOLCHAIN_FORCE_GLOBALS` to support filtering by tool IDs, instead of applying to\\n  everything."},{"id":"proto-v0.40","metadata":{"permalink":"/blog/proto-v0.40","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-08-16_proto-v0.40.mdx","source":"@site/blog/2024-08-16_proto-v0.40.mdx","title":"proto v0.40 - Config mode, progress bars, and more","description":"This is a small release that includes many quality of life improvements.","date":"2024-08-16T00:00:00.000Z","tags":[{"inline":true,"label":"config","permalink":"/blog/tags/config"},{"inline":true,"label":"mode","permalink":"/blog/tags/mode"},{"inline":true,"label":"progress","permalink":"/blog/tags/progress"},{"inline":true,"label":"install","permalink":"/blog/tags/install"},{"inline":true,"label":"http","permalink":"/blog/tags/http"},{"inline":true,"label":"request","permalink":"/blog/tags/request"},{"inline":true,"label":"fetch","permalink":"/blog/tags/fetch"}],"readingTime":2.72,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.40","title":"proto v0.40 - Config mode, progress bars, and more","authors":["milesj"],"tags":["config","mode","progress","install","http","request","fetch"]},"unlisted":false,"prevItem":{"title":"moon v1.28 - Task presets, OS tasks, meta tokens, and more","permalink":"/blog/moon-v1.28"},"nextItem":{"title":"proto v0.39 - Mid-year quality of life improvements","permalink":"/blog/proto-v0.39"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nThis is a small release that includes many quality of life improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## New `--config-mode` global option\\n\\nWhen proto is ran, we find and load all applicable [`.prototools` files](/docs/proto/config). For\\nthe most part, we would traverse upwards, and sometimes load `~/.proto/.prototools`, while other\\ntimes not. It was quite confusing when certain config files were loaded. This was further\\nexacerbated by the `--include-global` and `--only-local` options, which were only available to some\\ncommands (and have been removed entirely).\\n\\nTo remedy and standardize this, we\'re introducing a new global option\\n[`--config-mode`](/docs/proto/config#resolution-mode) (`-c`), which controls how configuration are\\nloaded. This option supports the following values.\\n\\n- `global` - Only load `~/.proto/.prototools`.\\n- `local` - Only load `./.prototools` in the current directory.\\n- `upwards` - Load `.prototools` while traversing upwards, but do not load `~/.proto/.prototools`.\\n- `upwards-global` / `all` - Load `.prototools` while traversing upwards, and do load\\n  `~/.proto/.prototools`.\\n\\nNow what is the default mode? As mentioned above, we wanted to standardize the default across all\\ncommands, but the problem is, is that each command has different requirements. So in the end, the\\ndefault mode is actually 2 different modes depending on the command being ran, which is:\\n\\n- For `activate`, `install`, `outdated`, `status` commands -> `upwards` mode\\n- All other commands -> `upwards-global` mode\\n\\n## Improved progress bars\\n\\nWe\'ve improved (or added) the progress bars for [`proto install`](/docs/proto/commands/install),\\n[`proto upgrade`](/docs/proto/commands/upgrade), and the auto-install flow for\\n[`proto run`](/docs/proto/commands/run). The progress bars will now display the current phase\\n(download, unpack, etc), and the download phase will now include current / total downloaded bytes.\\n\\nFurthermore, when installing multiple tools, we now display a progress bar for each tool.\\n\\n<Image src={require(\'./img/proto/v0.40-progress.png\')} width=\\"100%\\" />\\n\\n## Improved HTTP requests\\n\\nFor historical context, requests made from the proto CLI itself use a different HTTP client than\\nrequests made from a WASM plugin. The reason for this is that the Rust-based HTTP client that proto\\nuses is not compatible within WASM, so plugins use a different library. This disconnect meant that\\nWASM requests did _not_ inherit the [`[settings.http]`](/docs/proto/config#settingshttp) settings,\\nwhich meant in some cases, requests would fail or not authenticate correctly, and there was no\\nwork-around.\\n\\nThis is a very tricky problem to solve, but we have implemented a possible solution through a\\nconcept known as [host functions](/docs/guides/wasm-plugins#host-functions--macros). Host functions\\nare basically functions that exist on the host machine (proto), and can be called from the guest\\nruntime (WASM). This new host function utilizes the same HTTP client as proto to make requests,\\nwhich results in WASM no longer being disconnected.\\n\\nHowever, since there is a cost for calling host functions from the guest, and then serializing the\\nresponse from the host back to the guest, there is a small chance that performance will be affected.\\nWe will continue to monitor the implementation, so please report any issues!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.40.0) for a full list\\nof changes.\\n\\n- Removed `--include-global` and `--only-local` flags from all applicable commands. Use the new\\n  `--config-mode` instead."},{"id":"proto-v0.39","metadata":{"permalink":"/blog/proto-v0.39","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-07-26_proto-v0.39.mdx","source":"@site/blog/2024-07-26_proto-v0.39.mdx","title":"proto v0.39 - Mid-year quality of life improvements","description":"This is a small release that includes many quality of life improvements.","date":"2024-07-26T00:00:00.000Z","tags":[{"inline":true,"label":"activate","permalink":"/blog/tags/activate"},{"inline":true,"label":"install","permalink":"/blog/tags/install"},{"inline":true,"label":"github","permalink":"/blog/tags/github"},{"inline":true,"label":"locator","permalink":"/blog/tags/locator"},{"inline":true,"label":"pin","permalink":"/blog/tags/pin"},{"inline":true,"label":"builtin","permalink":"/blog/tags/builtin"}],"readingTime":2.29,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.39","title":"proto v0.39 - Mid-year quality of life improvements","authors":["milesj"],"tags":["activate","install","github","locator","pin","builtin"],"image":"./img/proto/v0.39.png"},"unlisted":false,"prevItem":{"title":"proto v0.40 - Config mode, progress bars, and more","permalink":"/blog/proto-v0.40"},"nextItem":{"title":"moon v1.27 - Task scripts, Docker settings, and more","permalink":"/blog/moon-v1.27"}},"content":"This is a small release that includes many quality of life improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Improved `proto activate` performance\\n\\nIn [v0.38](./proto-v0.38) we released the [`proto activate`](/docs/proto/commands/activate) command\\nas a means of bootstrapping your shell with necessary paths and variables. Since then, we\'ve fixed a\\nhandful of bugs and focused on performance for this release.\\n\\nIn this release, we\'ve reduced the time it took to execute activation from 200-300ms down to\\n10-20ms. We\'ve also fixed some syntax issues around Bash and Zsh shells.\\n\\n## Merged `proto install` and `proto use` commands\\n\\nWhen proto was first built we had separate commands for installing all tools\\n([`proto use`](/docs/proto/commands/use)), and installing a single tool\\n([`proto install`](/docs/proto/commands/install)). For historical reasons, this was loosely based\\noff of nvm, but we have diverged heavily since then.\\n\\nGoing forward, the `proto use` command is now deprecated, and all of its functionality has been\\nmerged into `proto install`. To install all tools, simply don\'t pass arguments to the command!\\n\\n```shell\\n# Install all tools\\n$ proto install\\n\\n# Install a single tool\\n$ proto install node\\n```\\n\\nWe like this change, as it aligns with package/dependency manager based workflows.\\n\\n## Customize built-in tools\\n\\nproto ships with a handful of [official built-in plugins](/docs/proto/tools#built-in) for popular\\ntools like Node.js, Go, and more. While this is great as it reduces configuration boilerplate, it\\nmay cause an inconvenience for adoption or migration related reasons. To support these workflows,\\nwe\'re introducing a new setting, [`settings.builtin-plugins`](/docs/proto/config#builtin-plugins),\\nthat can be used to disable all built-in plugins, or only allow a few select plugins.\\n\\n```toml title=\\".prototools\\"\\n[settings]\\n# Disable all\\nbuiltin-plugins = false\\n# Enable some\\nbuiltin-plugins = [\\"node\\", \\"bun\\"]\\n```\\n\\n## Pin proto itself\\n\\nproto has yet to reach an official v1 release, as we\'re constantly fine-tuning and reworking APIs.\\nBecause of this, we may accidentally introduce unexpected changes, or introduce breaking changes\\nthat you were relying on. To help mitigate these issues, you can now\\n[pin the version of proto itself](/docs/proto/config#lock-proto-version) in `.prototools`.\\n\\n```toml title=\\".prototools\\"\\nproto = \\"0.39.0\\"\\n```\\n\\nWhen this pin exists, all proto shims will attempt to execute proto using that exact version. This\\nallows for the global `proto` binary to differ in version from what is executed.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.39.0) for a full list\\nof changes.\\n\\n- Added `PROTO_NO_MODIFY_PROFILE` and `PROTO_NO_MODIFY_PATH` environment variables to `proto setup`\\n  (for automated workflows).\\n- Updated `proto status` to display and include versions from ecosystem files (`.nvmrc`, etc).\\n- Updated `github://` plugin locators to support monorepos. Append the project name (that tags are\\n  prefixed with) to the path: `github://moonrepo/plugins/node_tool`"},{"id":"moon-v1.27","metadata":{"permalink":"/blog/moon-v1.27","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-07-14_moon-v1.27.mdx","source":"@site/blog/2024-07-14_moon-v1.27.mdx","title":"moon v1.27 - Task scripts, Docker settings, and more","description":"In this release, we\'re adding improved Docker support, and a long-awaited task request.","date":"2024-07-14T00:00:00.000Z","tags":[{"inline":true,"label":"action","permalink":"/blog/tags/action"},{"inline":true,"label":"pipeline","permalink":"/blog/tags/pipeline"},{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"script","permalink":"/blog/tags/script"},{"inline":true,"label":"command","permalink":"/blog/tags/command"},{"inline":true,"label":"docker","permalink":"/blog/tags/docker"},{"inline":true,"label":"dockerfile","permalink":"/blog/tags/dockerfile"}],"readingTime":4.18,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.27","title":"moon v1.27 - Task scripts, Docker settings, and more","authors":["milesj"],"tags":["action","pipeline","task","script","command","docker","dockerfile"],"image":"./img/moon/v1.27.png"},"unlisted":false,"prevItem":{"title":"proto v0.39 - Mid-year quality of life improvements","permalink":"/blog/proto-v0.39"},"nextItem":{"title":"proto v0.38 - Shell activation / hooks","permalink":"/blog/proto-v0.38"}},"content":"In this release, we\'re adding improved Docker support, and a long-awaited task request.\\n\\n\x3c!--truncate--\x3e\\n\\n## Experimental pipeline enabled by default\\n\\nIn our last release, we [introduced a new action pipeline](./moon-v1.26#new-experimental-pipeline)\\nthat is more performant, accurate, and resilient, but was hidden behind an experimental flag. Since\\nthen, we\'ve seen many users enable it successfully, and no issues have been reported! And with that,\\nwe\'re enabling the experiment by default.\\n\\nIf you run into an issue with this new pipeline, you can disable the experiment in\\n`.moon/workspace.yml`, like so. If you do encounter an issue, please report it to GitHub or Discord!\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nexperiments:\\n  actionPipelineV2: false\\n```\\n\\n## New task scripts\\n\\nSince the beginning, tasks in moon have been modeled around a single command and its arguments; they\\nare a 1-to-1 relationship. It was designed this way as it was a hard requirement for task\\ninheritance to work correctly. If you have multiple tasks in the chain that need to be merged\\ntogether, how will arguments be handled? Do they merge, overwrite, or replace? Do they prepend or\\nappend? Or maybe you want to keep the arguments but rename the binary/command itself? And many more\\nsuch combinations.\\n\\nBut because of this limitation, tasks did not support executing multiple commands (via `&&` or `;`),\\nas this breaks argument merging (which command should the arguments belong too?). Tasks also did not\\nsupport redirects, pipes, and other shell scripting syntax. Over the year we\'ve slowly tried to\\nsupport these in tasks, and while they technically do in some capacity, the experience is subpar.\\n\\nTo remedy this, we\'re introducing a new task field called [`script`](/docs/config/project#script),\\nwhich is an alternative to [`command`](/docs/config/project#command) +\\n[`args`](/docs/config/project#args). Scripts support everything mentioned above, and can be defined\\nas such (using a very contrived example).\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    script: \'rm -rf ./out && ./doBuild.sh out && ./genStats.sh > stats.json\'\\n    outputs:\\n      - \'out\'\\n```\\n\\n- Scripts do support multiple commands, redirects, and pipes, while command/args do not.\\n- Scripts do not support argument task inheritance merging, while command/args do.\\n- Scripts do not support passthrough arguments (after `--`), while command/args do.\\n- Scripts can only be defined with a string, while command/args support a string or array.\\n- Both scripts and commands support the toolchain.\\n- Both scripts and commands support task tokens and variables.\\n\\n:::info\\n\\nFor a full list of comparisons, and more information on commands vs scripts, head over to the\\n[official task documentation](/docs/concepts/task#commands-vs-scripts)!\\n\\n:::\\n\\n## Improved Docker integration\\n\\nAs it turns out, a lot of moon users rely heavily on our Docker integration, which hasn\'t seen some\\nlove in quite a while. We felt it was time to change that.\\n\\n### New `moon docker file` command\\n\\nSince our release of Docker in moon (v0.15), we\'ve provided an [in-depth guide](/docs/guides/docker)\\non why our integration exists, and what it aims to solve. However, the guide required a bit of\\nmanual non-trivial setup, which left users confused more than we like. To remedy this, we\'re\\nintroducing a new command, [`moon docker file`](/docs/commands/docker/file), which will generate a\\nmulti-staged `Dockerfile` for a project.\\n\\nTo demonstrate this, here\'s what the `Dockerfile` looks like for our website.\\n\\n```docker\\n#### BASE STAGE\\n#### Installs moon.\\n\\nFROM node:latest AS base\\nWORKDIR /app\\n\\n# Install moon binary\\nRUN curl -fsSL https://moonrepo.dev/install/moon.sh | bash\\nENV PATH=\\"/root/.moon/bin:$PATH\\"\\n\\n#### SKELETON STAGE\\n#### Scaffolds repository skeleton structures.\\n\\nFROM base AS skeleton\\n\\n# Copy entire repository and scaffold\\nCOPY . .\\nRUN moon docker scaffold website\\n\\n#### BUILD STAGE\\n#### Builds the project.\\n\\nFROM base AS build\\n\\n# Copy toolchain\\nCOPY --from=skeleton /root/.proto /root/.proto\\n\\n# Copy workspace configs\\nCOPY --from=skeleton /app/.moon/docker/workspace .\\n\\n# Install dependencies\\nRUN moon docker setup\\n\\n# Copy project sources\\nCOPY --from=skeleton /app/.moon/docker/sources .\\n\\n# Build the project\\nRUN moon run website:build\\n\\n# Prune extraneous dependencies\\nRUN moon docker prune\\n\\n#### START STAGE\\n#### Runs the project.\\n\\nFROM base AS start\\n\\n# Copy built sources\\nCOPY --from=build /root/.proto /root/.proto\\nCOPY --from=build /app /app\\n\\nCMD moon run website:start\\n```\\n\\n### New `docker` settings\\n\\nTo further improve our Docker support, we\'re also introducing new `docker` settings to both\\n[`.moon/workspace.yml`](/docs/config/workspace#docker) and\\n[`moon.yml`](/docs/config/project#docker). These settings allow you to customize the scaffold,\\nprune, and `Dockerfile` generation flows.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\ndocker:\\n  prune:\\n    installToolchainDeps: false\\n  scaffold:\\n    include:\\n      - \'*.config.js\'\\n```\\n\\n```yaml title=\\"moon.yml\\"\\ndocker:\\n  file:\\n    image: \'node:latest\'\\n    buildTask: \'build\'\\n    startTask: \'start\'\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.27.0) for a full list\\nof changes.\\n\\n- Added support for [murex](https://murex.rocks/) shells.\\n- Improved the \\"automatically install dependencies if a manifest/lockfile has changed\\" flow. This\\n  should trigger less than before.\\n- We now generate JSON schemas for our configuration files to `.moon/cache/schemas`, so that they\\n  can be dynamically created based on the current moon version and environment.\\n- When writing JSON and YAML files, we attempt to write back to the file with its original\\n  indentation."},{"id":"proto-v0.38","metadata":{"permalink":"/blog/proto-v0.38","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-07-07_proto-v0.38.mdx","source":"@site/blog/2024-07-07_proto-v0.38.mdx","title":"proto v0.38 - Shell activation / hooks","description":"In this release, we\'re introducing a long requested feature, shell hooks!","date":"2024-07-07T00:00:00.000Z","tags":[{"inline":true,"label":"shell","permalink":"/blog/tags/shell"},{"inline":true,"label":"activate","permalink":"/blog/tags/activate"},{"inline":true,"label":"hook","permalink":"/blog/tags/hook"},{"inline":true,"label":"murex","permalink":"/blog/tags/murex"},{"inline":true,"label":"env","permalink":"/blog/tags/env"},{"inline":true,"label":"path","permalink":"/blog/tags/path"}],"readingTime":1.81,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.38","title":"proto v0.38 - Shell activation / hooks","authors":["milesj"],"tags":["shell","activate","hook","murex","env","path"]},"unlisted":false,"prevItem":{"title":"moon v1.27 - Task scripts, Docker settings, and more","permalink":"/blog/moon-v1.27"},"nextItem":{"title":"moon v1.26 - New experimental pipeline, trace profiles, and more","permalink":"/blog/moon-v1.26"}},"content":"In this release, we\'re introducing a long requested feature, shell hooks!\\n\\n\x3c!--truncate--\x3e\\n\\n## New experimental shell activation workflow\\n\\nYou\'ve most likely used another version manager before proto, and may have used a workflow where\\n`PATH` was automatically updated with versioned binaries of specific tools, or environment variables\\nwere injected into your shell. This functionality is what\'s known as shell hooks, and proto now has\\nexperimental support for them through a feature known as\\n[shell activation](/docs/proto/workflows#shell-activation)!\\n\\n### How it works\\n\\nFor example, say you\'re using Zsh as your shell. You could now append the following expression at\\nthe bottom of your shell profile, which evaluates our new\\n[`proto activate`](/docs/proto/commands/activate) command.\\n\\n```shell\\neval \\"$(proto activate zsh)\\"\\n```\\n\\nWhen the current working directory changes (via `cd`), or the CLI prompt changes, this activation\\nworkflow will trigger the following:\\n\\n- Download and install necessary proto plugins (if they do not exist)\\n- Load and resolve all `.prototools` configurations up the file system\\n- Detect and resolve versions for all configured tools\\n- Export environment variables defined in `[env]` and `[tools.*.env]`\\n- Prepend `PATH` with binary directories for detected tools\\n\\nPretty awesome right? We think so. But as mentioned above, this feature is highly experimental, and\\nmay not work properly across all shells (we\'re unable to test everything). So if you run into an\\nissue, please report it!\\n\\n### Unlocked features\\n\\nThis new workflow unlocks some functionality that was previously not possible with proto shims/bins\\ndirectly, and they are:\\n\\n- Directory paths to globally installed packages are now automatically prepended to `PATH`.\\n  Previously, you would need to add them manually. This was non-trivial if they were installed to\\n  versioned locations.\\n- Directory paths to pre-installed binaries within a tool are also prepended to `PATH`. For example,\\n  Rust/Cargo and Python provide a lot of executables that were ignored by our shims.\\n- This workflow is 1 step closer to replacing [direnv](https://direnv.net/) itself.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.38.0) for a full list\\nof changes.\\n\\n- Added support for [murex](https://murex.rocks/) shells.\\n- Added a `--include-global` flag to `proto use`, that will also install globally configured tools."},{"id":"moon-v1.26","metadata":{"permalink":"/blog/moon-v1.26","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-06-24_moon-v1.26.mdx","source":"@site/blog/2024-06-24_moon-v1.26.mdx","title":"moon v1.26 - New experimental pipeline, trace profiles, and more","description":"In this release, we focused primarily on a next-generation actions pipeline.","date":"2024-06-24T00:00:00.000Z","tags":[{"inline":true,"label":"action","permalink":"/blog/tags/action"},{"inline":true,"label":"pipeline","permalink":"/blog/tags/pipeline"},{"inline":true,"label":"trace","permalink":"/blog/tags/trace"},{"inline":true,"label":"profile","permalink":"/blog/tags/profile"},{"inline":true,"label":"shell","permalink":"/blog/tags/shell"}],"readingTime":2.51,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.26","title":"moon v1.26 - New experimental pipeline, trace profiles, and more","authors":["milesj"],"tags":["action","pipeline","trace","profile","shell"],"image":"./img/moon/v1.26.png"},"unlisted":false,"prevItem":{"title":"proto v0.38 - Shell activation / hooks","permalink":"/blog/proto-v0.38"},"nextItem":{"title":"proto v0.37 - Calver support and self diagnosis","permalink":"/blog/proto-v0.37"}},"content":"In this release, we focused primarily on a next-generation actions pipeline.\\n\\n\x3c!--truncate--\x3e\\n\\n## New experimental pipeline\\n\\nThe [action pipeline](/docs/how-it-works/action-graph) or just \\"pipeline\\", is the system in which we\\nactually run tasks in topological order when [`moon run`](/docs/commands/run),\\n[`moon check`](/docs/commands/check), or [`moon ci`](/docs/commands/ci) is executed. The pipeline is\\npowered by the [action graph](/docs/how-it-works/action-graph) (also known as a task graph or\\ndependency graph) and is quite complex, as we need to efficiently run tasks on our thread pool,\\nensure dependency tasks are ran before running dependent tasks, handle signals (ctrl + c), and much\\nmore.\\n\\nOur current implementation \\"works\\" but could be much better, as it still has some problematic edge\\ncases, [doesn\'t always shutdown correctly](https://github.com/moonrepo/moon/issues/902), and is\\npretty much tech debt at this point. To remedy this, we spent the last month working on a new action\\npipeline that aims to solve all of these problems, with a more modern implementation. Some such\\nimprovements are:\\n\\n- Increased performance with better concurrency handling and scheduling. Threads in the pool should\\n  now be constantly utilized.\\n- More accurately monitors signals (ctrl+c) and shutdowns. We now use Rust channels internally to\\n  manage this state.\\n- The CLI will now wait for aborted/cancelled task handles to exit before the entire CLI exits. This\\n  should alleviate zombie processes.\\n\\nWith all that said, unlike previous releases that replaced the old feature with a new feature, we\\nchose to gate this new pipeline behind an experimental flag. We want to ensure this works correctly\\nin all cases, before enabling it by default. So please test it and report back any issues! We\'ve\\nsuccessfully been using it on moon\'s repository without issue.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nexperiments:\\n  actionPipelineV2: true\\n```\\n\\n## Generate trace profiles\\n\\nA major goal of moon is to be extremely efficient and to optimize as much as possible. To help\\naccomplish this goal, we\'re introducing the global CLI `--dump` flag, which will generate a trace\\nprofile that can be loaded and reviewed in `chrome://tracing`.\\n\\nThis will display a flame graph with labeled operations, their timing information, and any\\nassociated data. This is the first step in capturing this kind of information, and it will only get\\nbetter moving forward.\\n\\n## Additional shell support\\n\\nBased on the work in [proto](/proto), we now have built-in support for additional command line\\nshells. To start, we\'ve updated the [`unixShell`](/docs/config/project#unixshell) and\\n[`windowsShell`](/docs/config/project#windowsshell) task options to support the following new\\nshells:\\n\\n- Unix: `ion`, `nu` (nushell), `pwsh` (powershell), `xonsh`.\\n- Windows: `elvish`, `fish`, `nu` (nushell), `xonsh`\\n\\nAnd furthermore, we\'ve added Nushell completion support to the\\n[`moon completions`](/docs/commands/completions) command!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.26.0) for a full list\\nof changes.\\n\\n- Updated CLI command execution to be more performant, and to reduce our usage of concurrent locks.\\n- Updated proto to v0.37.1 (from v0.36.2)."},{"id":"proto-v0.37","metadata":{"permalink":"/blog/proto-v0.37","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-06-16_proto-v0.37.mdx","source":"@site/blog/2024-06-16_proto-v0.37.mdx","title":"proto v0.37 - Calver support and self diagnosis","description":"This is a small release, but includes 2 very important features.","date":"2024-06-16T00:00:00.000Z","tags":[{"inline":true,"label":"calver","permalink":"/blog/tags/calver"},{"inline":true,"label":"calendar","permalink":"/blog/tags/calendar"},{"inline":true,"label":"version","permalink":"/blog/tags/version"},{"inline":true,"label":"diagnose","permalink":"/blog/tags/diagnose"},{"inline":true,"label":"doctor","permalink":"/blog/tags/doctor"}],"readingTime":1.92,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.37","title":"proto v0.37 - Calver support and self diagnosis","authors":["milesj"],"tags":["calver","calendar","version","diagnose","doctor"]},"unlisted":false,"prevItem":{"title":"moon v1.26 - New experimental pipeline, trace profiles, and more","permalink":"/blog/moon-v1.26"},"nextItem":{"title":"proto v0.36 - Static registry, plugin searching, and more","permalink":"/blog/proto-v0.36"}},"content":"This is a small release, but includes 2 very important features.\\n\\n\x3c!--truncate--\x3e\\n\\n## Calender versioning support\\n\\nFor the most part, tools use [semver](http://semver.org/) (semantic versions) for their releases,\\nbut every so often you run into a tool that uses another format, [calver](https://calver.org/)\\n(calendar versions). Some examples of calver are `2024-02`, `2024-10-23`, and `2024-12-9.123`.\\n\\nCalendar based versions were not supported previously as the syntax between semver and calver are\\ndifferent enough that they could not be parsed successfully. Well no longer, as we spent the time\\nwriting our own custom parser to differentiate between the 2 formats. This process is quite\\ncomplicated, and has many restrictions and caveats, so we took the time to document it under the\\nname [version specification](/docs/proto/tool-spec).\\n\\nThe biggest difference between semver and calver syntax, is that semver is dot-separated, while\\ncalver is dash-separated. The day part (patch) is also optional in calver.\\n\\n:::caution\\n\\nWe wrote a ton of tests to cover all the formats and edge cases we could think of, but if you run\\ninto a tool that fails to parse versions correctly, please report an issue immediately! All of our\\nbuilt-in tools have been tested against.\\n\\n:::\\n\\n## New `proto diagnose` command\\n\\nA common issue within the community that we\'ve seen is commands not being available after installing\\na tool. Most of the time, this is caused by certain proto paths not existing within `PATH`. To help\\nremedy these issues moving forward, we\'re introducing a new command,\\n[`proto diagnose`](/docs/proto/commands/diagnose) (or `doctor`) that will attempt to find all issues\\nwith your proto installation.\\n\\n```\\n$ proto diagnose\\n\\nShell: zsh\\nShell profile: ~/.zshrc\\n\\nErrors\\n  Issue: Bin directory (~/.proto/bin) was found BEFORE the shims directory (~/.proto/shims) on PATH\\n  Resolution: Ensure the shims path comes before the bin path in your shell\\n\\nWarnings\\n  Issue: Missing PROTO_HOME environment variable (Will default to ~/.proto if not defined)\\n  Resolution: Export PROTO_HOME=\\"$HOME/.proto\\" from your shell\\n```\\n\\nIn the future, we\'ll expand on this command by also bubbling up issues from your installed tools.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.37.0) for a full list\\nof changes.\\n\\n- Improved command execution. May see some slight performance gains.\\n- Updated wasmtime to v21 (from v17)."},{"id":"proto-v0.36","metadata":{"permalink":"/blog/proto-v0.36","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-06-03_proto-v0.36.mdx","source":"@site/blog/2024-06-03_proto-v0.36.mdx","title":"proto v0.36 - Static registry, plugin searching, and more","description":"In this release, we\'re taking the first step in supporting a plugin registry.","date":"2024-06-03T00:00:00.000Z","tags":[{"inline":true,"label":"registry","permalink":"/blog/tags/registry"}],"readingTime":2.11,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.36","title":"proto v0.36 - Static registry, plugin searching, and more","authors":["milesj"],"tags":["registry"]},"unlisted":false,"prevItem":{"title":"proto v0.37 - Calver support and self diagnosis","permalink":"/blog/proto-v0.37"},"nextItem":{"title":"moon v1.25 - New task runner and console reporter","permalink":"/blog/moon-v1.25"}},"content":"In this release, we\'re taking the first step in supporting a plugin registry.\\n\\n\x3c!--truncate--\x3e\\n\\n## New static registry\\n\\nOur long-term plan for proto is to provide a server-based registry in which users could publish and\\nmanage plugins, and immediately make them available to the community. However, this is quite a\\nmountain of work, and will take some time, but making plugins available _now_ is a priority.\\n\\nAs a temporary solution, we\'re introducing a static registry, in which available plugins are defined\\nin static JSON files, located in the official\\n[moonrepo/proto](https://github.com/moonrepo/proto/tree/master/registry) repository. This will help\\nunblock new features moving forward.\\n\\n## New `proto plugin search` command\\n\\nBecause of the static registry work above, we\'re now able to introduce a new command,\\n[`proto plugin search`](/docs/proto/commands/plugin/search), that can be used to search for plugins\\nprovided by the community. No longer will you need to browse the documentation, or search Google for\\navailable plugins.\\n\\n```\\n$ proto plugin search moon\\n\\nPlugins\\nAvailable for query: moon\\n\\n Plugin  Author    Format  Description                                                          Locator\\n moon    moonrepo  TOML    moon is a multi-language build system and codebase management tool.  https://raw.githubusercontent.com/moonrepo/moon/master/proto-plugin.toml\\n```\\n\\n## New `proto unpin` command\\n\\nAdditionally, a command that probably should have existed from the start, but did not, is now\\navailable. The [`proto unpin`](/docs/proto/commands/unpin) command does exactly as its name says, it\\nunpins (removes) a version from a `.prototools` file.\\n\\n## Plugin locator syntax changes\\n\\nWe\'ve decided to slightly change the syntax of plugin locator strings by embracing the common\\nprotocol syntax. Instead of `source:` and `github:`, we now use `file://`, `https://`, and\\n`github://`. The former syntax will continue to work for the time being, but will be removed\\nentirely in the future.\\n\\n- `source:./file.wasm` -> `file://./file.wasm`\\n- `source:https://url.com/file.wasm` -> `https://url.com/file.wasm`\\n- `github:org/repo` -> `github://org/repo`\\n\\n> If a `proto` command modifies a `.prototools` file, the file will be saved with the new syntax.\\n> Don\'t be surprised when this happens!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.36.0) for a full list\\nof changes.\\n\\n- Updated `proto uninstall` to also remove entries from `.prototools` if the version was\\n  uninstalled.\\n- Updated some error messages to include copy for work arounds.\\n- We now lock the bin/shims directory when creating/removing files.\\n  - This is an experiment to help avoid race conditions where multiple proto processes are all\\n    trying to write to the same location.\\n  - If this results in too large of a performance hit, we\'ll remove the locking."},{"id":"moon-v1.25","metadata":{"permalink":"/blog/moon-v1.25","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-05-27_moon-v1.25.mdx","source":"@site/blog/2024-05-27_moon-v1.25.mdx","title":"moon v1.25 - New task runner and console reporter","description":"In this release, we focused primarily on rewriting our task runner, and improving our console.","date":"2024-05-27T00:00:00.000Z","tags":[{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"runner","permalink":"/blog/tags/runner"},{"inline":true,"label":"console","permalink":"/blog/tags/console"},{"inline":true,"label":"reporter","permalink":"/blog/tags/reporter"},{"inline":true,"label":"operation","permalink":"/blog/tags/operation"}],"readingTime":5.57,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.25","title":"moon v1.25 - New task runner and console reporter","authors":["milesj"],"tags":["task","runner","console","reporter","operation"],"image":"./img/moon/v1.25.png"},"unlisted":false,"prevItem":{"title":"proto v0.36 - Static registry, plugin searching, and more","permalink":"/blog/proto-v0.36"},"nextItem":{"title":"proto v0.35 - Support for more shells","permalink":"/blog/proto-v0.35"}},"content":"In this release, we focused primarily on rewriting our task runner, and improving our console.\\n\\n\x3c!--truncate--\x3e\\n\\n## New task runner implementation\\n\\nIt\'s been over a month since our last release, but we\'ve been really busy rewriting our task runner\\nfrom the ground up! In other build systems, a task runner is typically the orchestator that runs\\nmultiple tasks and manages their state. In moon this is known as the action pipeline (or just\\npipeline), and a task runner is simply the execution of a single task. However, executing a single\\ntask is quite involved, as we need to generate a unique hash, check the cache, hydrate outputs if a\\ncache hit, actually execute the task as a child process, and much more!\\n\\nTask running is some of the oldest code in moon, as it was part of the initial MVP. Because of this,\\nit hasn\'t changed much, but moon has grown quite large and it was time to revisit it with better\\ndesign patterns and practices. Furthermore, since the task runner is so critical to moon itself, we\\nwanted to ensure it worked correctly, and spent more time than usual implementing, testing it, and\\nverifying edge cases.\\n\\nWith this new task runner, we...\\n\\n- Improved handling and reliability of output archiving (cache miss) and hydration (cache hit).\\n- Streamlined the task execution (child process) flow.\\n- Increased performance by optimizing or removing certain code paths.\\n\\n> If you\'re interested in how the task runner was implemented, feel free to take a look at the\\n> [Rust crate](https://github.com/moonrepo/moon/tree/master/crates/task-runner), and the\\n> [pull request](https://github.com/moonrepo/moon/pull/1463) itself.\\n\\n### Fine-grained operations\\n\\nA major goal of moon is bubbling up information to the user that is applicable to the current\\nworkflow, but what about when that workflow must be debugged or optimized? At that point, it was\\nalmost impossible without digging into the source code.\\n\\nTo make a step in this direction, as part of the new task runner we now track timing information for\\nindividual parts of the run execution, and we\'re calling these parts operations. An operation is\\nanything from generating a hash, creating a tarball archive, unpacking the archive (cache\\nhydration), task execution (the child process), and more.\\n\\nThis timing information is useful in figuring out why a certain task is slower than expected, and\\nwhich operation is actually causing the slowness. It also helps to uncover which operations were\\nactually ran for an action, which were skipped, so on and so forth. At this point in time, the\\noperations information is only included in the run report, located at `.moon/cache/runReport.json`.\\nIn the future, we plan to display this information in a nice UI.\\n\\nFor an example of this in action, here\'s a list of all operations that were executed when running\\nthe `build` task for our website.\\n\\n```json\\n[\\n  {\\n    \\"duration\\": {\\n      \\"secs\\": 0,\\n      \\"nanos\\": 609156875\\n    },\\n    \\"finishedAt\\": \\"2024-05-27T00:14:54.286628\\",\\n    \\"meta\\": {\\n      \\"type\\": \\"hash-generation\\",\\n      \\"hash\\": \\"10606e37c5e6ab4008007b30275f1682bae32dca71650ce173eb386d5b6c3309\\"\\n    },\\n    \\"startedAt\\": \\"2024-05-27T00:14:53.677526\\",\\n    \\"status\\": \\"passed\\"\\n  },\\n  {\\n    \\"duration\\": {\\n      \\"secs\\": 0,\\n      \\"nanos\\": 32834\\n    },\\n    \\"finishedAt\\": \\"2024-05-27T00:14:54.286667\\",\\n    \\"meta\\": {\\n      \\"type\\": \\"output-hydration\\"\\n    },\\n    \\"startedAt\\": \\"2024-05-27T00:14:54.286634\\",\\n    \\"status\\": \\"skipped\\"\\n  },\\n  {\\n    \\"duration\\": {\\n      \\"secs\\": 15,\\n      \\"nanos\\": 789003125\\n    },\\n    \\"finishedAt\\": \\"2024-05-27T00:15:10.075113\\",\\n    \\"meta\\": {\\n      \\"type\\": \\"task-execution\\",\\n      \\"command\\": \\"docusaurus build\\",\\n      \\"exitCode\\": 0\\n    },\\n    \\"startedAt\\": \\"2024-05-27T00:14:54.286950\\",\\n    \\"status\\": \\"passed\\"\\n  },\\n  {\\n    \\"duration\\": {\\n      \\"secs\\": 17,\\n      \\"nanos\\": 214634292\\n    },\\n    \\"finishedAt\\": \\"2024-05-27T00:15:27.289995\\",\\n    \\"meta\\": {\\n      \\"type\\": \\"archive-creation\\"\\n    },\\n    \\"startedAt\\": \\"2024-05-27T00:15:10.075686\\",\\n    \\"status\\": \\"passed\\"\\n  }\\n]\\n```\\n\\nBecause of these new operations, we can clearly see above that the archive creation process is\\ntaking 17 seconds, which is 2 seconds longer than the build itself! Without this information, we\\nwould have never known that the archive was taking this long, but now we do, and we can optimize it\\nin a future release!\\n\\n### Run summaries\\n\\nBecause of the new task runner and the new console ([below](#new-console-reporting-layer)), we have\\nthe ability to bubble up more information than before. Based on requests from the community, we\'ve\\ntaken the output from [`moon ci`](/docs/commands/ci) and applied it to both\\n[`moon check`](/docs/commands/check) and [`moon run`](/docs/commands/run) behind the `--summary`\\nflag.\\n\\nWhen this flag is passed, we will now summarize all actions that have ran in the pipeline (not just\\ntask related ones), and include failed tasks for review. For example, here\'s the output of\\n`moon check website --summary` on moon\'s repository.\\n\\n```\\n$ moon check website --summary\\n\\n\u25aa\u25aa\u25aa\u25aa types:build (cached, 1ms, 21bd9add)\\n\u25aa\u25aa\u25aa\u25aa runtime:build (cached, e8363e65)\\n\u25aa\u25aa\u25aa\u25aa website:typecheck (cached, 0ab91eaa)\\n\u25aa\u25aa\u25aa\u25aa website:format (cached, 07ae2388)\\n\u25aa\u25aa\u25aa\u25aa website:test (cached, 11d33e2e)\\n\u25aa\u25aa\u25aa\u25aa website:lint (cached, 2197fbb1)\\n\u25aa\u25aa\u25aa\u25aa website:build (10606e37)\\n\u25aa\u25aa\u25aa\u25aa website:build (15s 789ms, 10606e37)\\n\\nSUMMARY\\n\\npass SyncWorkspace\\nskip SetupNodeTool(20.13.1) (skipped, 250ms)\\nskip InstallNodeDeps(20.13.1) (skipped, 13ms, f341872f)\\npass SyncNodeProject(types) (1ms)\\npass SyncNodeProject(runtime) (1ms)\\npass RunTask(types:build) (cached, 140ms, 21bd9add)\\npass SyncNodeProject(website) (1ms)\\npass RunTask(runtime:build) (cached, 32ms, e8363e65)\\npass RunTask(website:build) (33s 614ms, 10606e37)\\npass RunTask(website:format) (cached, 59ms, 07ae2388)\\npass RunTask(website:lint) (cached, 101ms, 2197fbb1)\\npass RunTask(website:test) (cached, 64ms, 11d33e2e)\\npass RunTask(website:typecheck) (cached, 59ms, 0ab91eaa)\\n\\nSTATS\\n\\nActions: 11 completed (6 cached), 2 skipped\\n   Time: 34s 52ms\\n```\\n\\n## New console reporting layer\\n\\nFor the most part, when something in moon needed to be printed to the console, we would simply print\\nit directly at that point in time, anywhere within the codebase. While this worked, it made it\\ndifficult to orchestrate output from different parts of the codebase, and in the context of Rust,\\neach call to stdout/stderr [locks the I/O stream](https://nnethercote.github.io/perf-book/io.html),\\nresulting in performance loss.\\n\\nTo work around this, in [v1.21](./moon-v1.21) we implemented a new\\n[console layer](https://github.com/moonrepo/moon/tree/master/crates/console) that buffers all stdio\\nwrites, and prints them on 100ms intervals. This avoids locking on every call, and instead batches\\nthem. To expand on this further, in this release we\'ve implemented a new\\n[reporter layer](https://github.com/moonrepo/moon/tree/master/crates/console-reporter), with a\\nwell-defined interface that is used to print checkpoints (the 4 squares), and status updates from\\nthe action pipeline (and the new task runner).\\n\\nThis reporter layer enables new console UI implementations in the future based on your preferences.\\nFor example, an [interactive UI](https://ratatui.rs/) composed of tables, tabs, and more,\\nrepresenting the current state of the pipeline.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.25.0) for a full list\\nof changes.\\n\\n- Greatly reduced the amount of concurrent locks being held during task execution. May see slight\\n  performance improvements.\\n- Updated external configuration files (via https extends) to be cached for 24 hours.\\n- Updated macOS binaries to be built on macos-12 instead of macos-11.\\n- Updated proto to v0.35.4 (from v0.34.4)."},{"id":"proto-v0.35","metadata":{"permalink":"/blog/proto-v0.35","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-05-05_proto-v0.35.mdx","source":"@site/blog/2024-05-05_proto-v0.35.mdx","title":"proto v0.35 - Support for more shells","description":"This is a light release that adds support for more terminal shells.","date":"2024-05-05T00:00:00.000Z","tags":[{"inline":true,"label":"shell","permalink":"/blog/tags/shell"},{"inline":true,"label":"dump","permalink":"/blog/tags/dump"},{"inline":true,"label":"profile","permalink":"/blog/tags/profile"},{"inline":true,"label":"trace","permalink":"/blog/tags/trace"}],"readingTime":1.29,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.35","title":"proto v0.35 - Support for more shells","authors":["milesj"],"tags":["shell","dump","profile","trace"]},"unlisted":false,"prevItem":{"title":"moon v1.25 - New task runner and console reporter","permalink":"/blog/moon-v1.25"},"nextItem":{"title":"moon v1.24 - Task mutexes, auto-detect revisions, project dependents, and more!","permalink":"/blog/moon-v1.24"}},"content":"This is a light release that adds support for more terminal shells.\\n\\n\x3c!--truncate--\x3e\\n\\n## Experimental support for new shells\\n\\nproto has always supported the primary and common shells like Bash, Zsh, Fish, PowerShell, and more.\\nIn recent years, there has been an influx of new and modern shells, built with technologies such as\\nRust. We felt it was time to start supporting some of these new shells, and have added\\n[experimental support](https://crates.io/crates/starbase_shell) for:\\n\\n- [Ion](https://github.com/redox-os/ion)\\n- [Nu](https://www.nushell.sh/)\\n- [Xonsh](https://xon.sh/)\\n\\nFurthermore, the [`proto setup`](/docs/proto/commands/setup) command (which is ran when installing\\nproto) will now prompt the user to select a shell if one could not be detected.\\n\\n## Generate trace profiles\\n\\nA major goal of proto is to be extremely efficient and to optimize as much as possible. To help\\naccomplish this goal, we\'re introducing the global CLI `--dump` flag, which will generate a trace\\nprofile that can be loaded and reviewed in `chrome://tracing`.\\n\\nThis will display a flame graph with labeled operations, their timing information, and any\\nassociated data. This is the first step in capturing this kind of information, and it will only get\\nbetter moving forward.\\n\\n:::caution\\n\\nGenerating a profile for running a tool, either with `proto run node` or `node` itself, will not\\nwork. This is because the tool process _replaces_ the current proto process entirely, causing the\\nprofile to be interrupted and abort.\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.35.0) for a full list\\nof changes."},{"id":"moon-v1.24","metadata":{"permalink":"/blog/moon-v1.24","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-04-17_moon-v1.24.mdx","source":"@site/blog/2024-04-17_moon-v1.24.mdx","title":"moon v1.24 - Task mutexes, auto-detect revisions, project dependents, and more!","description":"This is a light release that focused solely on requests and improvements from the community.","date":"2024-04-17T00:00:00.000Z","tags":[{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"mutex","permalink":"/blog/tags/mutex"},{"inline":true,"label":"ci","permalink":"/blog/tags/ci"},{"inline":true,"label":"base","permalink":"/blog/tags/base"},{"inline":true,"label":"head","permalink":"/blog/tags/head"},{"inline":true,"label":"project-graph","permalink":"/blog/tags/project-graph"},{"inline":true,"label":"dependents","permalink":"/blog/tags/dependents"},{"inline":true,"label":"cache","permalink":"/blog/tags/cache"},{"inline":true,"label":"clean","permalink":"/blog/tags/clean"}],"readingTime":3.01,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.24","title":"moon v1.24 - Task mutexes, auto-detect revisions, project dependents, and more!","authors":["milesj"],"tags":["task","mutex","ci","base","head","project-graph","dependents","cache","clean"],"image":"./img/moon/v1.24.png"},"unlisted":false,"prevItem":{"title":"proto v0.35 - Support for more shells","permalink":"/blog/proto-v0.35"},"nextItem":{"title":"proto v0.34 - New detection strategy, status command, and outdated improvements","permalink":"/blog/proto-v0.34"}},"content":"This is a light release that focused solely on requests and improvements from the community.\\n\\n\x3c!--truncate--\x3e\\n\\n## Exclusive resources with task mutexes\\n\\nSome tasks may require exclusive access to a resource, like a database, file, or network connection,\\nbut other parallel running tasks may also require access to the same resource. When both of these\\ntasks run, they may conflict with each other, causing one or both to fail. This wasn\'t an easy\\nproblem to solve in moon, until now!\\n\\nThanks to [Andr\xe9s Correa Casablanca](https://github.com/castarco) for the idea and implementation,\\ntasks now support a new option called [`mutex`](/docs/config/project#mutex). This option allows you\\nto specify a unique name (across the entire workspace) for the mutex, which will be used to lock the\\ntask from running if another task with the same mutex name is already running.\\n\\nTake the following for example:\\n\\n```yaml\\n# server/moon.yml\\ntasks:\\n  build:\\n    command: \'build-server\'\\n    options:\\n      mutex: \'app\'\\n\\n# client/moon.yml\\ntasks:\\n  build:\\n    command: \'build-client\'\\n    options:\\n      mutex: \'app\'\\n```\\n\\nWhen [`moon run :build`](/docs/commands/run) or [`moon ci`](/docs/commands/ci) is ran, both tasks\\nwill be parallelized within our pipeline, _but_ only one of them will run at a time. If the `server`\\ntask is running, the `client` task will wait until the `server` task is complete. This ensures that\\nboth tasks don\'t conflict with each other.\\n\\nThis could technically be solved through task `deps`, but with a mutex, it allows you to decouple\\nproject and task dependencies, and instead focus on a virtual resource that is being locked.\\n\\n## Auto-detect base/head for `moon ci`\\n\\nWe\'ve updated [`moon ci`](/docs/commands/ci) to try and detect the base and head revisions\\nautomatically when running in a popular CI provider, like GitLab and Jenkins. For the base revision,\\nwe\'ll use the base/target commit SHA or target branch, while the head revision will use the source\\ncommit SHA or `HEAD`. This is great for pull requests and forks!\\n\\nWith that said, these values can be overwritten with environment variables, or command line\\narguments. Below is the order of precedence:\\n\\n- `MOON_BASE` / `MOON_HEAD` environment variables\\n- `--base` / `--head` command line arguments\\n- `base_revision` / `head_revision` via CI provider\\n- `vcs.defaultBranch` setting / `HEAD` literal value\\n\\n> This functionality is provided by the [`ci_env`](https://github.com/milesj/rust-cicd-env) Rust\\n> crate. Please refer to that crate for supported providers, and which of them support revision\\n> detection (primarily the `base_revision` and `head_revision` fields).\\n\\n## Include dependents for focused project graph\\n\\nWhen running [`moon project-graph <id>`](/docs/commands/project-graph), we visualize a graph of the\\nfocused project and all of its dependencies (other projects it depends on). However, if you wanted\\nto also visualize dependents (other projects that depend on the focused project), this was currently\\nnot possible.\\n\\nWe felt this information could be useful, so we\'ve added a `--dependents`\\nflattenDiagnosticMessageText, which will include direct dependents in the graph.\\n\\n```shell\\n$ moon project-graph server --dependents\\n```\\n\\nWe also felt dependent information can be useful when querying projects, so have also added support\\nfor the `--dependents` flag to the [`moon query projects`](/docs/commands/query/projects) command.\\n\\n```shell\\n$ moon query projects --affected --dependents\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.24.0) for a full list\\nof changes.\\n\\n- Added an experimental `moon templates` command, that lists all available codegen templates.\\n- Added a `runner.autoCleanCache` setting to `.moon/workspace.yml`, allowing the post-run clean\\n  mechanism to be controlled.\\n- Updated `moon generate` with better argument to variable handling.\\n- Updated action graph and project graph visualization to be more readable.\\n- Updated root-level tasks to have no inputs by default, instead of `**/*`."},{"id":"proto-v0.34","metadata":{"permalink":"/blog/proto-v0.34","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-04-07_proto-v0.34.mdx","source":"@site/blog/2024-04-07_proto-v0.34.mdx","title":"proto v0.34 - New detection strategy, status command, and outdated improvements","description":"In this release, we\'ve focused on the developer experience for common workflows.","date":"2024-04-07T00:00:00.000Z","tags":[{"inline":true,"label":"detection","permalink":"/blog/tags/detection"},{"inline":true,"label":"status","permalink":"/blog/tags/status"},{"inline":true,"label":"outdated","permalink":"/blog/tags/outdated"}],"readingTime":2.61,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.34","title":"proto v0.34 - New detection strategy, status command, and outdated improvements","authors":["milesj"],"tags":["detection","status","outdated"]},"unlisted":false,"prevItem":{"title":"moon v1.24 - Task mutexes, auto-detect revisions, project dependents, and more!","permalink":"/blog/moon-v1.24"},"nextItem":{"title":"moon v1.23 - Codegen improvements, stack inheritance, internal tasks, and more","permalink":"/blog/moon-v1.23"}},"content":"In this release, we\'ve focused on the developer experience for common workflows.\\n\\n\x3c!--truncate--\x3e\\n\\n## New `only-prototools` detection strategy\\n\\nproto currently detects versions at runtime using\\n[1 of 2 strategies](/docs/proto/config#detect-strategy), `first-available` which checks\\n`.prototools` files and tool-specific files (like `package.json` engines), whichever is first, or\\n`prefer-prototools` which works like the previous strategy, but prefers `.prototools` (even in a\\nparent directory).\\n\\nIn this release, we\'re adding a 3rd strategy called `only-prototools`. This strategy will only check\\n`.prototools` files and will not check tool-specific files. This is useful if you want explicit\\nversions, and to avoid unexpected versions from random configs/directories.\\n\\n```toml title=\\".prototools\\"\\n[settings]\\ndetect-strategy = \\"only-prototools\\"\\n```\\n\\n> For the v1 release, we plan to make this strategy the new default.\\n\\n## New `proto status` command\\n\\nSometimes you simply want to know what tools are currently active for a target directory, what\\nversions those tools are resolved to, and the configuration file in which they are defined. To\\nsatisfy this requirement, we\'ve added a new [`proto status`](/docs/proto/commands/status) command,\\nwhich outputs something like the following:\\n\\n```\\n$ proto status\\n\\nTool  Configured  Resolved  Installed                   Config\\ndeno  1.40.0      1.40.0    ~/.proto/tools/deno/1.40.0  ~/.prototools\\nnode  20.8.0      20.8.0    ~/.proto/tools/node/20.8.0  ~/.prototools\\nnpm   10.1.0      10.1.0    ~/.proto/tools/npm/10.1.0   ~/.prototools\\n```\\n\\nBy default this includes tools from all `.prototools` files up the hierarchy, excluding\\n`~/.proto/.prototools`. To include global tools as well, pass `--include-global`.\\n\\n## Improved `proto outdated` experience\\n\\nThe [`proto outdated`](/docs/proto/commands/outdated) command has worked \\"alright\\" but its developer\\nexperience wasn\'t the best. The terminal output was rudimentary, and writing updated versions to\\n`.prototools` would save to the current directory, instead of the directory they are configured in.\\n\\nTo improve the overall developer experience, we\'ve made the following changes to this command:\\n\\n- Displays all tools and available updates as a table of data.\\n- Includes both newest (matching range) and latest versions available.\\n- Includes the config file that the tool + version was loaded from.\\n- When `--update` is passed, will now prompt to confirm the update.\\n- When updating versions, versions are now written to their original config file, instead of local.\\n- Updated the `--latest` flag to use the latest version when updating, instead of newest.\\n\\n```\\n$ proto outdated\\n\\nTool  Current  Newest   Latest  Config\\ndeno  1.40.0   1.42.4   1.42.4  ~/.prototools\\nnode  20.8.0   20.12.2  21.7.3  ~/.prototools\\nnpm   10.1.0   10.5.2   10.5.2  ~/.prototools\\n```\\n\\n## What about v0.32 and v0.33?\\n\\nYou may have noticed that we don\'t have blog posts for either of these versions. The v0.32 release\\nwas a relatively light release with no meaningful changes, so we opted to not write a blog post for\\nit. As for v0.33, we ran into build issues while releasing it, so we decided to skip it and move on\\nto v0.34.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.34.0) for a full list\\nof changes.\\n\\n- Added a `dist-url` setting to some plugins, allowing the distribution download URL to be\\n  customized.\\n- Updated `proto setup` (which is ran during proto installation) to modify the `PATH` system\\n  environment variable on Windows. To disable this functionality, pass `--no-modify-path`."},{"id":"moon-v1.23","metadata":{"permalink":"/blog/moon-v1.23","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-03-25_moon-v1.23.mdx","source":"@site/blog/2024-03-25_moon-v1.23.mdx","title":"moon v1.23 - Codegen improvements, stack inheritance, internal tasks, and more","description":"It\'s been a month since our last release, and we\'re excited to land major codegen and task","date":"2024-03-25T00:00:00.000Z","tags":[{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"},{"inline":true,"label":"codegen","permalink":"/blog/tags/codegen"},{"inline":true,"label":"template","permalink":"/blog/tags/template"},{"inline":true,"label":"tack","permalink":"/blog/tags/tack"},{"inline":true,"label":"inheritance","permalink":"/blog/tags/inheritance"}],"readingTime":2.87,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.23","title":"moon v1.23 - Codegen improvements, stack inheritance, internal tasks, and more","authors":["milesj"],"tags":["tasks","codegen","template","tack","inheritance"],"image":"./img/moon/v1.23.png"},"unlisted":false,"prevItem":{"title":"proto v0.34 - New detection strategy, status command, and outdated improvements","permalink":"/blog/proto-v0.34"},"nextItem":{"title":"proto v0.31 - Improved version pinning, removed global packages management, and more","permalink":"/blog/proto-v0.31"}},"content":"It\'s been a month since our last release, and we\'re excited to land major codegen and task\\nimprovements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Template & generator improvements\\n\\nBased on feedback and requests from community, we\'ve made quite a few improvements to our code\\ngeneration workflow!\\n\\n### Git and npm template locators\\n\\nOur [`generator.templates`](/docs/config/workspace#templates) setting has only supported file system\\npaths, relative from the workspace root. This has made it quite difficult to share templates across\\nrepositories, but no longer!\\n\\nTemplate locations now support Git repositories and npm packages, through the `git:` and `npm:`\\nprefixes respectively. The `git:` locator requires a Git repository URL and explicit revision\\n(branch, commit, etc), while the `npm:` locator requires a package name and explicit version. For\\nexample:\\n\\n```yaml title=\\"moon.yml\\"\\ngenerator:\\n  templates:\\n    - \'git://github.com/moonrepo/templates#master\'\\n    - \'npm://@moonrepo/templates#1.2.3\'\\n```\\n\\n> Learn more about this in the official\\n> [code generation guide](/docs/guides/codegen#configuring-template-locations)!\\n\\n### Custom template names\\n\\nHistorically, a template\'s name was derived from the directory the\\n[`template.yml`](/docs/config/template) file was located in. While this works great for small repos,\\nit falls apart for large monorepos when there\'s multiple teams defining templates, as the chance of\\nname collisions arise.\\n\\nTo combat this problem, we\'re introducing a new [`id` setting](/docs/config/template#id) for\\ntemplates, which allows you to customize the exact name of the template. This setting is optional,\\nand if not provided, the name will be derived from the directory as before.\\n\\n```yaml title=\\"template.yml\\"\\nid: \'my-template\'\\n```\\n\\n### New variable settings\\n\\nAnd lastly, we\'re introducing some additions and improvements to template\\n[`variables`](/docs/config/template#variables).\\n\\n- A new `order` setting, which defines the order in which variables are prompted to the user.\\n- A new `internal` setting, which avoids the value being set from the CLI.\\n- Enum `default` values now support a list of values (cannot be provided by the CLI yet).\\n- Enum `prompt`s are now optional, and will fallback to the default value if not provided.\\n\\n## Stack-based task inheritance\\n\\nLast month in [moon v1.22](./moon-v1.22), we introduced the [`stack`](/docs/config/project#stack)\\nsetting for organizing projects into what tech stack they belong to. This is primarily for\\norganizational purposes, and improving our project constraints implementation.\\n\\nBased on community feeedback, we\'ve expanded the `stack` setting to also apply for\\n[task inheritance](http://localhost:3000/docs/concepts/task-inheritance#scope-by-project-metadata).\\nYou can now inherit tasks for the stack itself, or through a combination of the project language,\\nplatform, and type. For example:\\n\\n- `.moon/tasks/backend.yml`\\n- `.moon/tasks/javascript-backend.yml`\\n- `.moon/tasks/frontend-library.yml`\\n- `.moon/tasks/bun-frontend-application.yml`\\n\\n## Internal tasks\\n\\nWe\'re introducing a new [task mode](/docs/concepts/task#modes) called internal, which can be enabled\\nwith the [`internal`](/docs/config/project#internal) task option. Internal tasks are tasks that are\\nnot meant to be ran explicitly by the user (via [`moon check`](/docs/commands/check) or\\n[`moon run`](/docs/commands/run)), but are used internally as dependencies of other tasks.\\n\\nThis functionality provides another way to organize your tasks.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  prepare:\\n    command: \'intermediate-step\'\\n    options:\\n      internal: true\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.23.0) for a full list\\nof changes.\\n\\n- Added a `variables()` function for templates that returns an object of all variables available.\\n- Updated `moon project` and `moon task` to include the configuration files that tasks inherit from.\\n- Updated `moon task` to include the modes it belongs to."},{"id":"proto-v0.31","metadata":{"permalink":"/blog/proto-v0.31","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-03-01_proto-v0.31.mdx","source":"@site/blog/2024-03-01_proto-v0.31.mdx","title":"proto v0.31 - Improved version pinning, removed global packages management, and more","description":"In preparation for an official v1 release, we\'ve improved stability, the overall developer","date":"2024-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"version","permalink":"/blog/tags/version"},{"inline":true,"label":"pin","permalink":"/blog/tags/pin"},{"inline":true,"label":"global","permalink":"/blog/tags/global"},{"inline":true,"label":"packages","permalink":"/blog/tags/packages"}],"readingTime":2.99,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.31","title":"proto v0.31 - Improved version pinning, removed global packages management, and more","authors":["milesj"],"tags":["proto","version","pin","global","packages"]},"unlisted":false,"prevItem":{"title":"moon v1.23 - Codegen improvements, stack inheritance, internal tasks, and more","permalink":"/blog/moon-v1.23"},"nextItem":{"title":"moon v1.22 - Organizational settings, wildcard env var inputs, and Nx migration","permalink":"/blog/moon-v1.22"}},"content":"In preparation for an official v1 release, we\'ve improved stability, the overall developer\\nexperience, we\'re renaming some commands, and removing the \\"global packages\\" functionality.\\n\\n\x3c!--truncate--\x3e\\n\\n## Improved version pinning\\n\\nBased on feedback from the community, we\'ve made some slight changes to pinning to reduce confusion.\\nThe biggest points of contention were, \\"Why does `proto install --pin` pin globally?\\", and \\"Why\\ndoesn\'t `proto pin` resolve the version like `proto install --pin` does?\\".\\n\\nTo remedy the first issue, we\'ve updated the `--pin` argument to optionally support a string value\\nof \\"local\\" or \\"global\\". When local, will pin to the `.prototools` file in the current directory,\\notherwise it will pin to `~/.proto/.prototools`.\\n\\n```shell\\n$ proto install node --pin # global\\n$ proto install node --pin global\\n$ proto install node --pin local\\n```\\n\\nAs for the second issue, we\'ve introduced a new option called `--resolve`, which will resolve the\\nversion to a fully qualified semantic version (or fail). This isn\'t the default functionality, as to\\nnot break existing workflows, and because you may want to actually pin \\"1\\" instead of \\"1.2.3\\".\\n\\n```shell\\n$ proto pin node 1 # 1\\n$ proto pin node 1 --resolve # 1.2.3\\n```\\n\\n## Removed global package management (breaking)\\n\\nA while back we introduced the `proto install-global` and `proto uninstall-global` commands as a\\nmeans for managing global packages. This was added to solve issues with the Node.js ecosystem,\\nprimarily around standardizing where global packages would be installed across all package managers.\\nOn top of this, we also introduced a \\"command interception\\" feature, which would error telling you\\nto use proto\'s command instead of the package manager\'s.\\n\\nAs a whole, this feature was _very_ disruptive to users, caused a lot of confusion, was simply\\npoorly implemented, and honestly wasn\'t really necessary for tools outside of Node.js. Because of\\nall of this, we\'ve decided to entirely remove our global package management functionality, this\\nincludes:\\n\\n- `proto install-global` command\\n- `proto uninstall-global` command\\n- `proto list-global` command\\n- `intercept-globals` setting for node/npm/pnpm/yarn\\n- `globals` setting for TOML plugins\\n\\n## New npm/pnpm/yarn `shared-globals-dir` setting\\n\\nSince we removed our global packages support (above), we had to also remove the `intercept-globals`\\nsetting from our Node.js related WASM plugins. However, we still believed in the benefit it\\nprovided, primarily around standardizing where global packages would be installed across all package\\nmanagers.\\n\\nTo still support this in some capacity, we\'ve introduced a new `shared-globals-dir` setting for npm,\\npnpm, and yarn. This setting still standardizes the install path, _but instead_ of intercepting\\ncommands like it did before, it now appends the global package install commands with additional\\narguments or environment variables. This should be entirely transparent to you!\\n\\n```toml title=\\".prototools\\"\\n[tools.npm]\\nshared-globals-dir = true\\n```\\n\\nAn example of how this now works:\\n\\n```shell\\n# < v0.31\\nproto install-global npm typescript\\n\\n# >= v0.31\\nnpm install --global typescript\\n\\n# Under the hood becomes...\\nPREFIX=/.proto/tools/node/globals npm install --global typescript\\n```\\n\\n## Renamed commands (breaking)\\n\\nWe\'re still not happy with some of the current command names, especially around tools and plugins,\\nso we\'ve renamed a few of them. They are:\\n\\n- Renamed the `proto tool` commands to `proto plugin`. An alias still exists for the time being.\\n- Removed the `proto tool list-plugins` command, and merged its functionality into\\n  `proto plugin list`.\\n\\nAs for the `proto plugin list` command, we\'ve removed the versions and aliases from the output by\\ndefault, and wrapped them in new `--versions` and `--aliases` options.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.31.0) for a full list\\nof changes.\\n\\n- Fixed an issue where empty version strings were being parsed, causing failures."},{"id":"moon-v1.22","metadata":{"permalink":"/blog/moon-v1.22","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-02-26_moon-v1.22.mdx","source":"@site/blog/2024-02-26_moon-v1.22.mdx","title":"moon v1.22 - Organizational settings, wildcard env var inputs, and Nx migration","description":"This release introduces new organizational settings for projects, a migrate from Nx extension, and","date":"2024-02-26T00:00:00.000Z","tags":[{"inline":true,"label":"project","permalink":"/blog/tags/project"},{"inline":true,"label":"metadata","permalink":"/blog/tags/metadata"},{"inline":true,"label":"nx","permalink":"/blog/tags/nx"},{"inline":true,"label":"migrate","permalink":"/blog/tags/migrate"}],"readingTime":3.05,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.22","title":"moon v1.22 - Organizational settings, wildcard env var inputs, and Nx migration","authors":["milesj"],"tags":["project","metadata","nx","migrate"],"image":"./img/moon/v1.22.png"},"unlisted":false,"prevItem":{"title":"proto v0.31 - Improved version pinning, removed global packages management, and more","permalink":"/blog/proto-v0.31"},"nextItem":{"title":"moon v1.21 - Deno tier 3, file group improvements, task shells, and more!","permalink":"/blog/moon-v1.21"}},"content":"This release introduces new organizational settings for projects, a migrate from Nx extension, and\\nmore.\\n\\n\x3c!--truncate--\x3e\\n\\n## More organizational settings\\n\\nOne aspect of moon that sets us apart from other build systems and tools, is that we have built-in\\nsupport for human-readable project and task metadata. This is extremely useful in organizing and\\nmanaging large repositories, especially when ownership comes into play. This information is also\\nused for categorization and filtering for MQL and our editor extensions/plugins.\\n\\nTo expand on this functionality even further, we\'re adding a few requests from the community, and\\nthey are:\\n\\n- New `configuration` and `scaffolding` variants for the project [`type`](/docs/config/project#type)\\n  setting in [`moon.yml`](/docs/config/project). Perfect for contracts and templates.\\n\\n  ```yaml\\n  type: \'configuration\'\\n  ```\\n\\n- New [`stack`](/docs/config/project#stack) setting in [`moon.yml`](/docs/config/project), for\\n  categorizing which tech stack the project belongs to. Supports `frontend`, `backend`,\\n  `infrastructure`, and `systems`.\\n\\n  ```yaml\\n  stack: \'frontend\'\\n  ```\\n\\n- New [`description`](/docs/config/project#description-1) setting for tasks, that provides\\n  human-readable information.\\n\\n  ```yaml\\n  tasks:\\n    build:\\n      description: \'Builds the project using Vite\'\\n      command: \'vite build\'\\n  ```\\n\\n## New wildcard environment variable inputs\\n\\nTask inputs have supported environment variables for quite a while now, but they are explicit, which\\ncan be tedious too manage when you have many environment variables. To make this easier, we\'ve added\\nsupport for wildcard environment variables, denoted by a `*`, which will match any environment\\nvariable with that pattern.\\n\\nFor example, say we want to track all Node.js and Vite environment variables that start with `NODE_`\\nand `VITE_` respectively, we can simply do:\\n\\n```yaml\\ntasks:\\n  build:\\n    command: \'vite build\'\\n    inputs:\\n      - \'$NODE_*\'\\n      - \'$VITE_*\'\\n```\\n\\n> Do note that this _isn\'t_ a glob, and the `*` is merely a substitution for any character!\\n\\n## New `migrate-nx` extension\\n\\nIn our previous release, we added support for [migrating from Turborepo](./moon-v1.21), but what\\nabout Nx? Nx is a very popular build system with many users. A lot of our current moon users were\\nformer Nx users, but unfortunately, they had to go through the tedious process of migrating\\neverything manually. We wanted to make this process easier for new users, so we created a new\\nexperimental extension to help with this process,\\n[`migrate-nx`](/docs/guides/extensions#migrate-nx).\\n\\n```shell\\n$ moon ext migrate-nx\\n```\\n\\nThis extension was quite complicated to implement, as Nx has a _ton_ of features. However, when the\\nextension is executed, we\'ll convert the root `nx.json` and `workspace.json` files to\\n[`.moon/workspace.yml`](/docs/config/workspace) and related top-level config files, and we\'ll also\\nconvert every `project.json` and `package.json` (with an `nx` block) into a\\n[`moon.yml`](/docs/config/project) file.\\n\\nConversion is not a perfect 1:1, as moon and Nx are quite different. Please refer to the\\n[official documentation](/docs/guides/extensions#migrate-nx) for a list of unsupported settings and\\nfeatures.\\n\\n:::info\\n\\nAn awesome feature that didn\'t make it in time for this release, is an npm package for Nx\\ncompatibility, that will allow Nx executors/plugins to be executed through moon, without the\\nrequirement of Nx itself. This will allow for a seamless transition from Nx to moon, without the\\nneed to change any of your existing Nx executors/plugins till later.\\n\\nThis functionality will be provided by our new\\n[`@moonrepo/nx-compat` package](https://github.com/moonrepo/moon/tree/master/packages/nx-compat),\\nwhich we hope to finish in the coming weeks.\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.22.0) for a full list\\nof changes.\\n\\n- Added an `installArgs` setting for bun/npm/pnpm/yarn in `.moon/toolchain.yml`, to customize the\\n  args used when installing dependencies.\\n- Updated the `envFile` task option to support a list of file paths."},{"id":"moon-v1.21","metadata":{"permalink":"/blog/moon-v1.21","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-02-07_moon-v1.21.mdx","source":"@site/blog/2024-02-07_moon-v1.21.mdx","title":"moon v1.21 - Deno tier 3, file group improvements, task shells, and more!","description":"With this release, get ready for Deno tier 3 support, file group and task improvements, a new","date":"2024-02-07T00:00:00.000Z","tags":[{"inline":true,"label":"deno","permalink":"/blog/tags/deno"},{"inline":true,"label":"file-groups","permalink":"/blog/tags/file-groups"},{"inline":true,"label":"env","permalink":"/blog/tags/env"},{"inline":true,"label":"shell","permalink":"/blog/tags/shell"},{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"},{"inline":true,"label":"turborepo","permalink":"/blog/tags/turborepo"}],"readingTime":3.56,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.21","title":"moon v1.21 - Deno tier 3, file group improvements, task shells, and more!","authors":["milesj"],"tags":["deno","file-groups","env","shell","tasks","turborepo"],"image":"./img/moon/v1.21.png"},"unlisted":false,"prevItem":{"title":"moon v1.22 - Organizational settings, wildcard env var inputs, and Nx migration","permalink":"/blog/moon-v1.22"},"nextItem":{"title":"moon v1.20 - Extension plugins, default task options, and more","permalink":"/blog/moon-v1.20"}},"content":"With this release, get ready for Deno tier 3 support, file group and task improvements, a new\\nextension, and more.\\n\\n\x3c!--truncate--\x3e\\n\\n## Deno tier 3 support\\n\\nWe\'ve supported Deno tier 1 and 2 for almost a year now, but were hesitant to support tier 3 until\\n[proto](/proto) stabilizes further. Now that proto is _almost_ at an official v1 release, and other\\ntools in the toolchain (like Node.js, Bun, and Rust) are powered by proto, we\'re confident in\\nsupporting Deno tier 3. To make use of this, simply set the\\n[`deno.version`](/docs/config/toolchain#deno) setting in\\n[`.moon/toolchain.yml`](/docs/config/toolchain).\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\ndeno:\\n  version: \'1.40.0\'\\n```\\n\\nWhen enabled, moon will download and install that version of Deno in the background, and run all\\nsubsequent tasks with it. This is great for ensuring that your project is always using the same\\nversion of Deno, across all machines.\\n\\n## File groups now support environment variables\\n\\nTask [`inputs`](/docs/config/project#inputs) have supported environment variables for a while now,\\nbut file groups have not. The main reason for this is that file groups were implemented far before\\nenvironment variables in task inputs! To bridge this gap, we\'ve added support for environment\\nvariables in file groups.\\n\\n```yaml\\nfileGroups:\\n  vite:\\n    - \'...\'\\n    - \'$VITE_SECRET_KEY\'\\n    - \'$NODE_ENV\'\\n\\ntasks:\\n  build:\\n    command: \'vite build\'\\n    inputs:\\n      - \'@group(vite)\'\\n```\\n\\nEnvironment variables can be referenced using the\\n[`@group` token function](/docs/concepts/token#group), or the new\\n[`@envs` token function](/docs/concepts/token#envs). The latter is only supported for `inputs` and\\nwill error for other locations, while the former is supported in `args`, `inputs`, and `outputs`,\\nbut will filter out environment variables when they are not supported.\\n\\n## New `unixShell` and `windowsShell` task options\\n\\nWhen the [`shell`](/docs/config/project#shell) task option is enabled, we run the task within a\\nshell. However, the chosen shell was hard-coded to `$SHELL` on Unix machines and PowerShell on\\nWindows, but what if you wanted to run it with a different shell? Or the same shell across all\\noperating systems? Well, you couldn\'t.\\n\\nBut not anymore! With this release, we\'re introducing [`unixShell`](/docs/config/project#unixshell)\\nand [`windowsShell`](/docs/config/project#windowsshell) task options. When paired with `shell`, the\\ntask will run in a shell of your choice. For example, why not Bash everywhere?\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    command: \'vite build\'\\n    options:\\n      shell: true\\n      unixShell: \'bash\'\\n      windowsShell: \'bash\'\\n```\\n\\n## New `migrate-turborepo` extension\\n\\nIn our previous release, we added support for [extensions, a new kind of WASM plugin](./moon-v1.20).\\nSince this is a new experimental feature, we really wanted to show off what it can do, and stress\\ntest its boundaries. To do that, we chose to migrate the old `moon migrate from-turborepo` command\\ninto an extension\\n([source can be found here](https://github.com/moonrepo/moon-extensions/tree/master/crates/migrate-turborepo)).\\nThis is our most complex extension so far, as it:\\n\\n- Loads and parses files on the file system.\\n- Reads and writes JSON and YAML files.\\n- Supports deserializing data into structs.\\n- Extracts project graph information by executing `moon project-graph`.\\n\\nDo you currently have a Turborepo powered repository? And want to migrate to moon? Then simply\\nexecute the extension as such. View our\\n[guide for more information](/docs/guides/extensions#migrate-turborepo)!\\n\\n```shell\\n$ moon ext migrate-turborepo\\n```\\n\\nAs part of the migration from moon\'s Rust core into a WASM plugin, we\'ve added support for the\\nfollowing new features:\\n\\n- Added Bun support behind a new `--bun` flag.\\n- Added support for Turbo\'s `globalDotEnv`, `dotEnv`, and `outputMode`.\\n- Added support for root-level tasks (`//#`) through a root `moon.yml`, instead of logging a\\n  warning.\\n- Updated migrated task commands to run through a package manager, instead of\\n  `moon node run-script`.\\n\\n:::info\\n\\nBased on the success of this extension, we plan to support a `migrate-nx` extension in the future!\\nIf you\'d like to help in this endeavor, let us know!\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.21.0) for a full list\\nof changes.\\n\\n- Added `bun.inferTasksFromScripts` setting to `.moon/toolchain.yml`, for compatibility with\\n  Node.js.\\n- Added a `--quiet` global argument, for hiding non-critical moon output.\\n- Updated tasks with glob-like arguments to automatically enabled the `shell` option, so that glob\\n  expansion works correctly.\\n- Implemented a new buffered console layer for writing to stdout/stderr."},{"id":"moon-v1.20","metadata":{"permalink":"/blog/moon-v1.20","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-01-26_moon-v1.20.mdx","source":"@site/blog/2024-01-26_moon-v1.20.mdx","title":"moon v1.20 - Extension plugins, default task options, and more","description":"In this release, we\'re excited to introduce extensions, our first type of plugin!","date":"2024-01-26T00:00:00.000Z","tags":[{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"options","permalink":"/blog/tags/options"},{"inline":true,"label":"extensions","permalink":"/blog/tags/extensions"},{"inline":true,"label":"plugins","permalink":"/blog/tags/plugins"}],"readingTime":2.9,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.20","title":"moon v1.20 - Extension plugins, default task options, and more","authors":["milesj"],"tags":["task","options","extensions","plugins"],"image":"./img/moon/v1.20.png"},"unlisted":false,"prevItem":{"title":"moon v1.21 - Deno tier 3, file group improvements, task shells, and more!","permalink":"/blog/moon-v1.21"},"nextItem":{"title":"proto v0.29 - Better environment support","permalink":"/blog/proto-v0.29"}},"content":"In this release, we\'re excited to introduce extensions, our first type of plugin!\\n\\n\x3c!--truncate--\x3e\\n\\n## New extension plugins\\n\\nIn our [2024 roadmap blog post](./2024-roadmap), we talked heavily about plugins, as we believe\\nthey\'re the future of moon and its ecosystem. What we didn\'t talk about is that we plan to have\\n_many types of plugins_, and not just language/platform specific ones. And with that, we\'re excited\\nto introduce extensions!\\n\\nAn extension is a WASM plugin that allows you to extend moon with additional functionality, have\\nwhitelisted access to the file system, and receive partial information about the current workspace.\\nExtensions are extremely useful in offering new and unique functionality that doesn\'t need to be\\nbuilt into moon\'s core.\\n\\nOnce such extension is our built-in `download` extension, which is a basic extension that simply\\ndownloads a file from a URL into the current moon workspace.\\n\\n```shell\\n$ moon ext download -- --url https://github.com/moonrepo/proto/releases/latest/download/proto_cli-aarch64-apple-darwin.tar.xz\\n```\\n\\nShipping alongside extensions are the following new features:\\n\\n- An [official extensions guide](/docs/guides/extensions)!\\n- An [`extensions`](/docs/config/workspace#extensions) setting for configuring new extensions.\\n- A [`moon ext`](/docs/commands/ext) command for executing a configured extension.\\n- The required infrastructure for plugins!\\n\\n## Configure default options for tasks\\n\\n[Task options](/docs/config/project#options) provide a way to apply granular changes to a task\'s\\nbehavior when running in the pipeline. However, they can become tedious when you need to apply them\\nto many tasks, especially when inheritance is involved. To help with this, you can now configure the\\n[`taskOptions`](/docs/config/tasks#taskoptions) setting in task related configs, like\\n`.moon/tasks.yml` and `.moon/tasks/*.yml`, which acts as the base/default options for all inherited\\ntasks.\\n\\nFor example, the following config:\\n\\n```yaml title=\\".moon/tasks.yml\\"\\ntasks:\\n  build:\\n    # ...\\n    options:\\n      outputStyle: \'stream\'\\n      retryCount: 2\\n  lint:\\n    # ...\\n    options:\\n      outputStyle: \'stream\'\\n      retryCount: 2\\n  test:\\n    # ...\\n    options:\\n      outputStyle: \'stream\'\\n      retryCount: 2\\n```\\n\\nCan simply be rewritten as:\\n\\n```yaml title=\\".moon/tasks.yml\\"\\ntaskOptions:\\n  outputStyle: \'stream\'\\n  retryCount: 2\\n\\ntasks:\\n  build:\\n    # ...\\n  lint:\\n    # ...\\n  test:\\n    # ...\\n```\\n\\nBecause these options are defined at the workspace-level, they adhere to the same merge and\\ninheritance rules as other settings. Just be aware that these options are inherited first in the\\nchain, and can be overwritten by other layers, or by project-level tasks.\\n\\n## Optional task dependencies\\n\\nBy default, all task [`deps`](/docs/config/project#tasks-1) are required to exist when tasks are\\nbeing built and expanded, but this isn\'t always true when dealing with composition and inheritance.\\nFor example, say you\'re using\\n[tag-based inheritance](/docs/concepts/task-inheritance#scope-by-project-metadata), and a global\\ntask relies on one of these tagged tasks, but not all projects may define the appropriate tags. In\\nprevious versions of moon, this is a hard failure, as the dependent task does not exist.\\n\\nTo remedy this, we\'re introducing a new [`optional`](/docs/config/project#optional-1) flag for task\\ndependencies. When set to `true`, moon will no longer error when the task doesn\'t exist, and instead\\nwill omit the dependency.\\n\\n```yaml title=\\".moon/tasks.yml\\" {4-6}\\ntasks:\\n  build:\\n    command: \'vite\'\\n    deps:\\n      - target: \'#components:build\'\\n        optional: true\\n```\\n\\n> Thanks to [@maastrich](https://github.com/maastrich) for this contribution!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.20.0) for a full list\\nof changes.\\n\\n- Added a \\"Tags\\" view to the VSCode extension.\\n- Updated proto to v0.29.1 (from v0.26.4).\\n- Updated proto installation to trigger for all applicable commands, not just `moon run`,\\n  `moon check`, and `moon ci`."},{"id":"proto-v0.29","metadata":{"permalink":"/blog/proto-v0.29","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-01-23_proto-v0.29.mdx","source":"@site/blog/2024-01-23_proto-v0.29.mdx","title":"proto v0.29 - Better environment support","description":"In this release, we focused heavily on environment interoperability.","date":"2024-01-23T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"environment","permalink":"/blog/tags/environment"}],"readingTime":0.98,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.29","title":"proto v0.29 - Better environment support","authors":["milesj"],"tags":["proto","environment"]},"unlisted":false,"prevItem":{"title":"moon v1.20 - Extension plugins, default task options, and more","permalink":"/blog/moon-v1.20"},"nextItem":{"title":"proto v0.28 - Upgraded WASM runtime","permalink":"/blog/proto-v0.28"}},"content":"In this release, we focused heavily on environment interoperability.\\n\\n\x3c!--truncate--\x3e\\n\\n## New environment aware configuration\\n\\nWe\'ve made a small but useful improvement to `.prototools`, environment aware files! When the\\n`PROTO_ENV` environment variable is set, proto will look for an additional `.prototools.{env}` file\\nand merge it with the base configuration.\\n\\nThis is useful for certain deploy scenarios where you need different versions of tools, environment\\nvariables, or settings!\\n\\n```toml title=\\".prototools\\"\\nnode = \\"21.0.0\\"\\n```\\n\\n```toml title=\\".prototools.production\\"\\nnode = \\"20.0.0\\"\\n```\\n\\n## New `[env]` and `[tools.*.env]` settings\\n\\nWe\'re also introducing 2 new settings to the `.prototools` file, [`[env]`](/docs/proto/config#env)\\nand [`[tools.*.env]`](/docs/proto/config#toolsenv), both of which configure environment variables\\nthat\'ll be applied when the tool is executed. This is useful for defining directory-level and\\ntool-specific variables.\\n\\n```toml title=\\".prototools\\"\\n[env]\\nDEBUG = \\"*\\"\\n\\n[tools.node.env]\\nNODE_ENV = \\"production\\"\\n```\\n\\n> View the [configuration documentation](/docs/proto/config) for more information on how these work!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.29.0) for a full list\\nof changes.\\n\\n- Updated `proto tool info` to display aliases and environment variables.\\n- Updated WASM logs to be shown alongside proto\'s `--log` output (under the `extism::pdk`\\n  namespace)."},{"id":"proto-v0.28","metadata":{"permalink":"/blog/proto-v0.28","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-01-17_proto-v0.28.mdx","source":"@site/blog/2024-01-17_proto-v0.28.mdx","title":"proto v0.28 - Upgraded WASM runtime","description":"This is a small release that primarily upgrades our WASM runtime.","date":"2024-01-17T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"runtime","permalink":"/blog/tags/runtime"},{"inline":true,"label":"extism","permalink":"/blog/tags/extism"}],"readingTime":1.02,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.28","title":"proto v0.28 - Upgraded WASM runtime","authors":["milesj"],"tags":["proto","wasm","runtime","extism"]},"unlisted":false,"prevItem":{"title":"proto v0.29 - Better environment support","permalink":"/blog/proto-v0.29"},"nextItem":{"title":"What\'s in store for 2024","permalink":"/blog/2024-roadmap"}},"content":"This is a small release that primarily upgrades our WASM runtime.\\n\\n\x3c!--truncate--\x3e\\n\\n## Upgraded WASM runtime\\n\\nproto utilizes [Extism](https://extism.org/) for our WASM plugin architecture, which internally uses\\n[wasmtime](https://wasmtime.dev/) as our execution runtime. Up until this point, we\'ve been using a\\nbeta release of Extism, v0.5, which has worked quite nicely. We\'ve also been working closely with\\nthe Extism team to report bugs, provide feedback, and help improve the project. Once such feature\\nwas the massive performance gains in [proto v0.24](./proto-v0.24).\\n\\nThanks to all the hard work from the Extism team over the past year, an official v1.0 was released.\\nBecause this was a major release, it did include breaking changes around the WASM runtime, and as\\nsuch, proto WASM plugins before v0.28 are _no longer compatible_, and will need to be recompiled\\nwith the latest PDKs. Our proto TOML plugins are not affected.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.28.0) for a full list\\nof changes.\\n\\n- Will now display an upgrade message when the current proto version is out of date.\\n- Improved error messages to include plugin specific information.\\n- Updated our \\"last used at\\" logic to avoid race conditions with the tool manifest."},{"id":"2024-roadmap","metadata":{"permalink":"/blog/2024-roadmap","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-01-12_2024-roadmap.mdx","source":"@site/blog/2024-01-12_2024-roadmap.mdx","title":"What\'s in store for 2024","description":"Happy new year! Let\'s start 2024 by reflecting on last year and diving into our tentative year long","date":"2024-01-12T00:00:00.000Z","tags":[{"inline":true,"label":"roadmap","permalink":"/blog/tags/roadmap"},{"inline":true,"label":"moonbase","permalink":"/blog/tags/moonbase"},{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"}],"readingTime":7.08,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"2024-roadmap","title":"What\'s in store for 2024","authors":["milesj"],"tags":["roadmap","moonbase","proto","toolchain"]},"unlisted":false,"prevItem":{"title":"proto v0.28 - Upgraded WASM runtime","permalink":"/blog/proto-v0.28"},"nextItem":{"title":"proto v0.27 - PowerShell profiles, shim regeneration, and more","permalink":"/blog/proto-v0.27"}},"content":"Happy new year! Let\'s start 2024 by reflecting on last year and diving into our tentative year long\\nroadmap.\\n\\n\x3c!--truncate--\x3e\\n\\n## Year 2023 in review\\n\\nLast year was an extremely exciting year for us! To start, we were accepted into the\\n[Y Combinator 2023 winter batch](https://www.ycombinator.com/companies/moonrepo), which was\\nextremely unexpected, but very much welcome. The 3 months we spent in YC was quite eye opening, as\\nwe learned so much about the industry, and how to move forward. We spent those 3 months really\\ndiving into what we want to build and deliver, and after much trial and error, and many failed\\nprototypes, we chose to move forward with launching [proto][proto] as its own tool, improving\\n[moon][moon], and slowing down development of [moonbase][moonbase] (outside of remote caching).\\n\\n### moon\\n\\nFor [moon][moon], we officially launched v1 back in March, and celebrated its 2 year birthday in\\nOctober. Over the course of 2023, we released 23 minor versions, jam packed with new features such\\nas:\\n\\n- Action and project graphs improvements\\n- Bun tier 1, 2, and 3 support\\n- Canary & nightly releases\\n- Code ownership (`CODEOWNERS`)\\n- Configuration rewrite (using our [schematic](https://github.com/moonrepo/schematic) crate)\\n- Deno tier 1 and 2 support\\n- Developer experience improvements\\n- Documentation polish\\n- Experiments\\n- Interactive & persistent tasks\\n- JavaScript and TypeScript improvements\\n- Onboarding flow improvements\\n- `PATH` based task execution\\n- [proto][proto] integration\\n- Query language\\n- [Railway](https://railway.app/) support\\n- Rust tier 1, 2, and 3 support\\n- Tagging and boundaries/contraints\\n- Task extending, inheritance, and configuration enhancements\\n- Task dependencies configurations\\n- Toolchain enhancements\\n- VCS (Git) hooks\\n- ... and much much more!\\n\\nHowever, when looking at our [2023 roadmap](./2023-roadmap), there are a few items we failed to\\ndeliver on. The biggest are additional languages, better tier support, and release workflows. We\\nultimately didn\'t land these features as we plan to move to a plugin based architecture, and didn\'t\\nwant to invest too much time into the current implementation.\\n\\n### moonbase\\n\\nDuring YC, we officially launched [moonbase][moonbase], our cloud service that offers remote caching\\nto all moon users (and also includes a free tier). Over the next few months, we continued to improve\\nthe service, by adding basic insights into CI runs (powered by [`moon ci`](/docs/commands/ci)), and\\noverall stability.\\n\\nHowever, we unfortunately made the decision to pause development of new features for moonbase, as we\\nwere unsure of the value that they would provide to end-users compared to the cost it would take to\\nbuild & maintain. Some such features include code and project ownership, project registry, and\\nrepository health scores. We may revisit this in the future.\\n\\n### proto\\n\\nAs for [proto][proto], it\'s been an exciting year. For context, proto\'s implementation was\\noriginally built into moon directly, and powered\\n[moon\'s integrated toolchain](/docs/concepts/toolchain). We strongly felt this functionality can be\\nuseful as a stand-alone tool, as tool installation and developer environment setup is still a major\\npain point for developers.\\n\\nSo we decided to extract it out into its own tool, and thus proto was born. Since then, we\'ve\\nreleased 27 minor versions with:\\n\\n- Additional language support: Go, Python\\n- Binary symlinking\\n- Canary & nightly releases\\n- Detection improvements\\n- Directory-level configuration\\n- Deeper shell integration\\n- Global packages support\\n- Native shim executables\\n- Runtime version detection\\n- WASM and TOML based plugins\\n- ... and more to come!\\n\\n## Launching moon v2\\n\\nIt\'s been almost a year since we launched v1, and we believe we\'re ready to start planning out and\\nworking on v2. Our goal for major releases is to introduce breaking changes in the most seamless way\\npossible, and to do so, we plan to incrementally land internal changes in v1 in preparation for v2,\\nprovide codemods for migrating configuration, and of course, provide an in-depth migration guide.\\n\\nIn order of importance, we plan to land the following changes. This list does not include features\\nthat will [land after v2](#post-launch-features).\\n\\n- Move to a [plugin based architecture](#plugin-based-architecture)\\n- Rename and standardize some configuration settings\\n- Removed deprecated features\\n\\nIt\'s a short list but also a ton of work. We have no ETA on when this will land exactly.\\n\\n### Plugin based architecture\\n\\nThe biggest change and primary focus for v2 is to move to a WASM plugin based architecture (for\\nlanguage integration). Based on our work with [proto\'s plugins](/docs/proto/plugins), we have a very\\ngood idea of how we would model this for moon, and a new love for WASM based plugins (powered by\\n[Extism](https://extism.org/)).\\n\\nOne of the leading factors for this decision, is that building everything into Rust directly is not\\nscalable, is a maintenance headache, and is also extremely difficult. It results in a lot of\\nduplicated code, increased compilation times, and a lot of complexity. By moving to plugins, we can\\nditch most of this, and in the grand scheme of things, plugin integration is simply function calls.\\n\\nOf course there are a handful of additional benefits that come from plugins:\\n\\n- Enables the community to build and share their own plugins (additional languages).\\n- Plugins can be individually updated, versioned, and released. Less moon patches.\\n- Reduces moon\'s compilation times, as plugins live in their own repositories.\\n- Easier to contribute to, as moon\'s codebase is quite complex.\\n\\n### Post-launch features\\n\\nCurious what kind of features we have planned for after v2? Of course you are! This isn\'t an\\nexhaustive or detailed list, but is top of mind:\\n\\n- Additional languages support (will be much easier with a plugin system)\\n- Release workflows (versioning, publishing, changelogs, etc)\\n- System dependencies within the toolchain\\n- Language dependency management tools\\n- Repository and project health scores\\n- Improved action graph and pipeline\\n\\n## Launching proto v1\\n\\nWe\'re extremely close to a v1 release, most definitely in Q1. For the most part, we believe we\'re\\npassed the point of introducing breaking changes, and so the remainder of the time will be spent on\\npolish, improvements, and documentation. There are a few big features we want to land relatively\\nsoon though (but maybe after v1), and they are:\\n\\n- Build from source for languages (this is quite complicated)\\n- Build/extension variants for languages (PyPy for Python, PHP extensions, etc)\\n- Directory and tool level environment variables (think [direnv](https://direnv.net/) kind of\\n  functionality)\\n\\n### Expanding language support\\n\\nWhile not part of v1, we definitely want to support more official languages in proto. We\'ve been\\npushing back on new languages until after v1 and the plugin APIs have stabilized, but since that\'s\\nrelatively close to being done, expect more in the future! Our top of mind languages at the moment\\nare: Ruby (and Crystal), PHP, and Java.\\n\\nDon\'t forget that the community can also build and share their own plugins! For example, the\\n[Zig programming language](https://github.com/konomae/zig-plugin) already exists, and is provided by\\n[konomae](https://github.com/konomae)! Thanks for the amazing work.\\n\\n## Self-hosting moonbase\\n\\nAnd last but not least, let\'s talk about moonbase. Although we\'ve paused development on new\\nfeatures, we consistently get requests for self-hosting moonbase (primarily for remote caching), as\\ncompanies don\'t want to store their proprietary builds, even though they are compiled and minified,\\nin a cloud storage provider that they do not own.\\n\\nWe definitely understand this concern, and that\'s why we\'ve been working on a self-hosted version of\\nmoonbase (also known as on-premises). We\'ve never done this before, so it\'s been quite a learning\\nlesson, especially since we have many facets to take into account: database access, cloud\\ncredentials, error handling, auth, so on and so forth.\\n\\nWe\'d say we\'re about 50% done with this effort, and we aim to have it ready by the end of Q1. With\\nthat said, the self-hosted version of moonbase will _not_ be free, and will use a license based\\nmodel. We\'re still working out the details, but we\'ll have more information soon.\\n\\n## Looking for contributors\\n\\nThanks for reading this far, but we do have one last thing to talk about. The moonrepo ecosystem and\\nall its products are quite large, with a lot of complexity. However, we\'re a small team, with most\\nof the public-facing work being done by me (Miles), but there\'s only so much we can do in a given\\ntimeframe. With that said, we\'re looking for open source contributors that would like to help us\\nout! We have a long list of features and enhancements that need to be done, and even some secret\\nprojects that would be very cool to work on. If you\'re interested, please reach out to us on\\nDiscord!\\n\\n[moon]: /moon\\n[moonbase]: /moonbase\\n[proto]: /proto"},{"id":"proto-v0.27","metadata":{"permalink":"/blog/proto-v0.27","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-01-04_proto-v0.27.mdx","source":"@site/blog/2024-01-04_proto-v0.27.mdx","title":"proto v0.27 - PowerShell profiles, shim regeneration, and more","description":"This is a small release that improves the overall developer experience.","date":"2024-01-04T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"shim","permalink":"/blog/tags/shim"},{"inline":true,"label":"bin","permalink":"/blog/tags/bin"},{"inline":true,"label":"shell","permalink":"/blog/tags/shell"},{"inline":true,"label":"profile","permalink":"/blog/tags/profile"},{"inline":true,"label":"windows","permalink":"/blog/tags/windows"}],"readingTime":1.94,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.27","title":"proto v0.27 - PowerShell profiles, shim regeneration, and more","authors":["milesj"],"tags":["proto","shim","bin","shell","profile","windows"]},"unlisted":false,"prevItem":{"title":"What\'s in store for 2024","permalink":"/blog/2024-roadmap"},"nextItem":{"title":"moon v1.19 - Improvements to task dependencies, codegen, and more","permalink":"/blog/moon-v1.19"}},"content":"This is a small release that improves the overall developer experience.\\n\\n\x3c!--truncate--\x3e\\n\\n## PowerShell profile support\\n\\nWhen proto was first launched, we didn\'t support PowerShell profiles, but did support Windows by\\nrunning `setx` commands to inject the `PROTO_HOME` environment variable, and update `PATH`. While\\nthis worked, it was not ideal, and unexpected for users. This is our fault and our lack of Windows\\nknowledge.\\n\\nStarting with v0.27, we now official support PowerShell profiles, and will no longer call `setx`.\\nInstead we write the environment variable changes to one of these files, depending on what exists:\\n\\n- Windows\\n  - `~\\\\Documents\\\\PowerShell\\\\Microsoft.PowerShell_profile.ps1`\\n  - `~\\\\Documents\\\\PowerShell\\\\Profile.ps1`\\n- Unix\\n  - `~/.config/powershell/Microsoft.PowerShell_profile.ps1`\\n  - `~/.config/powershell/profile.ps1`\\n\\n## Regenerate shims & bins\\n\\nproto has gone through some growing pains, we won\'t deny that. With the handful of breaking changes,\\nthe configuration refactor, and the ground-up rework of how shims/bins are handled, we\'ve hit a few\\nsnags. Most of those snags have been around tool execution.\\n\\nTo remedy some of these problems, we\'re introducing the [`proto regen`](/docs/proto/commands/regen)\\ncommand. This command will clean the shims (`~/.proto/shims`) and optionally bins (`~/.proto/bins`)\\ndirectory, regenerate shims, and relink bins based on globally pinned versions.\\n\\n```shell\\n$ proto regen\\n\\n# Include bins\\n$ proto regen --bin\\n```\\n\\nThis is extremely useful in resetting to a clean state.\\n\\n## Better version parsing for TOML plugins\\n\\nWhen our [TOML plugin](/docs/proto/non-wasm-plugin) receives a version, we attempt to parse it into\\na valid semantic version. However, not all tools follow semver, as they may release without patch or\\nminor versions, or use a different pre/build pattern.\\n\\nTo remedy this, we\'ve updated our regex to be more flexible, and to utilize named capture groups.\\nWith named groups, we can now piece the version together, fill in missing values, and then parse it.\\n\\nWe\'ve also renamed the field to `version-pattern` from `git-tag-pattern`, as the regex is now also\\nused for manifest parsing. The old name is still supported for the time being.\\n\\n```toml\\n# Before\\n[resolve]\\ngit-tag-pattern = \\"^@protostar/cli@((\\\\\\\\d+)\\\\\\\\.(\\\\\\\\d+)\\\\\\\\.(\\\\\\\\d+))\\"\\n\\n# After\\n[resolve]\\nversion-pattern = \\"^@protostar/cli@((?<major>\\\\\\\\d+)\\\\\\\\.(?<minor>\\\\\\\\d+)\\\\\\\\.(?<patch>\\\\\\\\d+))\\"\\n```\\n\\n> Jump to the [official documentation](/docs/proto/non-wasm-plugin#version-patterns) for more\\n> information!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.27.0) for a full list\\nof changes."},{"id":"moon-v1.19","metadata":{"permalink":"/blog/moon-v1.19","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2024-01-01_moon-v1.19.mdx","source":"@site/blog/2024-01-01_moon-v1.19.mdx","title":"moon v1.19 - Improvements to task dependencies, codegen, and more","description":"In this release, we\'re introducing some long-awaited and requested improvements.","date":"2024-01-01T00:00:00.000Z","tags":[{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"deps","permalink":"/blog/tags/deps"},{"inline":true,"label":"args","permalink":"/blog/tags/args"},{"inline":true,"label":"env","permalink":"/blog/tags/env"},{"inline":true,"label":"codegen","permalink":"/blog/tags/codegen"},{"inline":true,"label":"templates","permalink":"/blog/tags/templates"},{"inline":true,"label":"experiments","permalink":"/blog/tags/experiments"}],"readingTime":4.21,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.19","title":"moon v1.19 - Improvements to task dependencies, codegen, and more","authors":["milesj"],"tags":["task","deps","args","env","codegen","templates","experiments"],"image":"./img/moon/v1.19.png"},"unlisted":false,"prevItem":{"title":"proto v0.27 - PowerShell profiles, shim regeneration, and more","permalink":"/blog/proto-v0.27"},"nextItem":{"title":"proto v0.26 - New native shim implementation","permalink":"/blog/proto-v0.26"}},"content":"In this release, we\'re introducing some long-awaited and requested improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Configure args and env vars for task dependencies\\n\\nThis has been a long standing request from the community, and we\'re happy to finally deliver it.\\nStarting with v1.19, you can now configure optional command line arguments and environment variables\\nfor each task [`deps`](/docs/config/project#deps) entry. These values will be passed to the task\\nwhen it is executed.\\n\\nHere\'s an example of what both patterns look like. The `target` field is required when configuring\\nan object, and both the `args` and `env` fields can be mixed and matched.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    command: \'vite build\'\\n    deps:\\n      # Just a target\\n      - \'^:build\'\\n\\n      # With args (string)\\n      - target: \'^:build\'\\n        args: \'--mode production\'\\n\\n      # With env vars\\n      - target: \'^:build\'\\n        env:\\n          NODE_ENV: \'production\'\\n\\n      # With args (array) and env vars\\n      - target: \'^:build\'\\n        args:\\n          - \'--mode\'\\n          - \'production\'\\n        env:\\n          NODE_ENV: \'production\'\\n```\\n\\nWhen using this functionality, there are a few things to understand about its implementation, and\\nhow it affects the rest of the pipeline:\\n\\n- When extending or inheriting a task and a merger is required, and this task has a dependency with\\n  a colliding target, the `args` and `env` fields will _NOT_ be deeply merged. Whichever task is\\n  inherited last will have its `deps` used.\\n- When multiple dependencies of the same target are ran in the action pipeline, but with differing\\n  args or env vars, only 1 will run at a time. We try to avoid running them in parallel to avoid\\n  collisions and corrupting outputs.\\n- Arguments and environment variables do _NOT_ support tokens.\\n- If dependencies all write to the same output, cleaning the output is your responsibility, not\\n  moon\'s.\\n\\n## Codegen improvements\\n\\nCode generation is one of moon\'s oldest features, and hasn\'t been improved in quite a while. We felt\\nthe time was right to give it a little love.\\n\\n### Extend other templates\\n\\nThis has been a [request for over a year](https://github.com/moonrepo/moon/issues/434), and we\\nfinally found the time to put it on the roadmap. Starting with this release, you can now extend\\nother templates using the [`extends`](/docs/config/template#extends) setting in\\n[`template.yml`](/docs/config/template), which supports a list of template names.\\n\\nTemplates will be recursively extended from top to bottom, and all files and variables will be\\ninherited and merged at the top-level.\\n\\n```yaml title=\\"template.yml\\"\\ntitle: \'npm package\'\\nextends: [\'node-common\']\\n```\\n\\n### Configure a default destination\\n\\nWhen you call [`moon generate`](/docs/commands/generate) you must provide a destination directory\\nfor the generated files, or we\'ll prompt you to provide one. But what if you wanted to standardize\\nthe destination? For example, a package scaffolding template should go to `packages/`. This is now\\npossible with the optional [`destination`](/docs/config/template#destination) setting in\\n[`template.yml`](/docs/config/template).\\n\\nIf no destination is provided to `moon generate`, we\'ll use this default destination.\\n\\n```yaml title=\\"template.yml\\"\\ntitle: \'npm package\'\\ndestination: \'packages/[name | kebab_case]\'\\nvariables:\\n  name:\\n    type: \'string\'\\n    default: \'\'\\n    required: true\\n    prompt: \'Package name?\'\\n```\\n\\n:::info\\n\\nFor better interoperability, this setting can also reference variables using `[var]` syntax, and can\\nalso use Tera filters. Learn more about this in the\\n[code generation documentation](/docs/guides/codegen#interpolation).\\n\\n:::\\n\\n## Resolved long-standing experiments\\n\\nmoon has a concept of [experiments](/docs/config/workspace#experiments), where certain features are\\ngated behind a flag. This allows us to support new and old functionality in parallel, and also allow\\nusers to gradually upgrade when encountering a breaking change. For many months now, we\'ve had 2\\nexperiments running, and have decided on a path forward.\\n\\nThe first is `experiments.interweavedTaskInheritance`, which would inherit global and local tasks in\\norder, interweaved within each other. The old implementation would inherit global first, then local\\nsecond, distinctly grouping them. Since this experiment was introduced, we have not received a\\nsingle bug report or issue. This is a good sign that the new behavior is working as expected, and as\\nsuch, have decided _to move forward_ with this experiment and make it the new implementation. The\\nold implementation has been removed entirely.\\n\\nThe second is `experiments.taskOutputBoundaries`, which was rather controversial when introduced.\\nThis experiment would trigger an error anytime a [task\'s `outputs`][outputs] overlapped within\\nanother [task\'s `outputs`][outputs]. The reason for this change, is that multiple tasks writing to\\nthe same output location could \\"corrupt\\" the expected state, and trigger unexpected results when\\nhydrating from the cache. However in practice, this restriction has caused more headache and\\nintroduced a steeper learning curve then expected. It also caused problems with\\n[tasks that extend](/docs/config/project#extends) from another, resulting in the same outputs being\\nused. Because of this, we\'ve decided _to **not** move forward_ with this experiment, and allow\\nwhatever task outputs you wish (we trust you\'re smart enough to not shoot yourself in the foot).\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.19.0) for a full list\\nof changes.\\n\\n- Updated proto to v0.26 (from v0.25), which includes a new shims implementation.\\n- Updated VS Code extension to support multiple VS Code workspace folders.\\n\\n[outputs]: /docs/config/project#outputs"},{"id":"proto-v0.26","metadata":{"permalink":"/blog/proto-v0.26","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-12-21_proto-v0.26.mdx","source":"@site/blog/2023-12-21_proto-v0.26.mdx","title":"proto v0.26 - New native shim implementation","description":"After many release candidates, and a ton of testing, proto v0.26 is finally here!","date":"2023-12-21T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"shim","permalink":"/blog/tags/shim"}],"readingTime":2.14,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.26","title":"proto v0.26 - New native shim implementation","authors":["milesj"],"tags":["proto","shim"]},"unlisted":false,"prevItem":{"title":"moon v1.19 - Improvements to task dependencies, codegen, and more","permalink":"/blog/moon-v1.19"},"nextItem":{"title":"proto v0.26 (rc) - Release candidate available for testing!","permalink":"/blog/proto-v0.26-rc"}},"content":"After many release candidates, and a ton of testing, proto v0.26 is finally here!\\n\\n\x3c!--truncate--\x3e\\n\\n## Rethinking shims\\n\\nproto at its core is a version manager, which means like most version managers, it relies on a\\nconcept known as shims. Shims are lightweight executable scripts that act like a proxy to the\\nunderlying binary, and are useful for proto to intercept executions and inject custom functionality,\\nlike our dynamic version detection.\\n\\nOn Unix machines, we relied on Bash scripts for shims, which worked rather well. However, on\\nWindows, we relied on PowerShell scripts (`.ps1`), batch/cmd scripts (`.cmd`), and Bash scripts, all\\nwith differing levels of functionality, and each serving a separate purpose. Windows support _did\\nnot_ work well.\\n\\nTo avoid current and future compatibility issues, we needed a truly native solution, and that\'s\\nexactly what we did. In this release, we wrote our own Rust based executable, that will replace all\\nof the custom shim scripts. This new executable is named `proto-shim` (`proto-shim.exe` on Windows)\\nand is published alongside the `proto` binary.\\n\\nThis new executable solves all of the following problems (hopefully):\\n\\n- Locatable on `PATH` (is an `.exe` for Windows)\\n- Can pipe/redirect data\\n- Handles stdin prompts/interactivity\\n- Supports ctrl+c interruptions\\n- Passes parent signals to child processes (uses `execvp` on Unix)\\n- Attempts to kill child processes on parent exit\\n- Bubbles exit codes\\n- Native performance\\n- Doesn\'t require special privileges (no symlinks)\\n\\n## Upgrade troubleshooting\\n\\nBecause this release adds a new executable (`proto-shim`), you\'ll most likely run into issues when\\nupgrading via `proto upgrade`. The root issue is that the upgrade process was only aware of the\\nsingle `proto` file, and not the new `proto-shim` file, so it will not copy the shim into the\\ncorrect location, and subsequent proto commands will fail.\\n\\nWe could backport this change to v0.25, but it would require all users to upgrade to that patch\\nversion first before upgrading to v0.26. But this still wouldn\'t solve the issue for users upgrading\\nfrom v0.24, or an even earlier version.\\n\\nThe best way to remedy this situation is to simply\\n[re-install proto as a whole](/docs/proto/install). Once you\'re on v0.26, this will be a non-issue.\\n\\n```shell\\n# Unix\\ncurl -fsSL https://moonrepo.dev/install/proto.sh | bash\\n\\n# Windows\\nirm https://moonrepo.dev/install/proto.ps1 | iex\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.26.0) for a full list\\nof changes.\\n\\n- Added basic telemetry to track tool install/uninstall metrics.\\n- Fixed an issue where binaries were being symlinked with broken versions in their file name (most\\n  commonly for Python)."},{"id":"proto-v0.26-rc","metadata":{"permalink":"/blog/proto-v0.26-rc","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-12-19_proto-v0.26-rc.mdx","source":"@site/blog/2023-12-19_proto-v0.26-rc.mdx","title":"proto v0.26 (rc) - Release candidate available for testing!","description":"We\'ve got a very special release candidate that we\'d love to stress test before an official release!","date":"2023-12-19T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"shim","permalink":"/blog/tags/shim"}],"readingTime":2.91,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.26-rc","title":"proto v0.26 (rc) - Release candidate available for testing!","authors":["milesj"],"tags":["proto","shim"]},"unlisted":false,"prevItem":{"title":"proto v0.26 - New native shim implementation","permalink":"/blog/proto-v0.26"},"nextItem":{"title":"moon v1.18 - New task execution flow and custom project names","permalink":"/blog/moon-v1.18"}},"content":"We\'ve got a very special release candidate that we\'d love to stress test before an official release!\\n\\n\x3c!--truncate--\x3e\\n\\nproto at its core is a version manager, which means like most version managers, it relies on a\\nconcept known as shims. Shims are lightweight executable scripts that act like a proxy to the\\nunderlying binary, and are useful for proto to intercept executions and inject custom functionality,\\nlike our dynamic version detection.\\n\\nOn Unix machines, we relied on Bash scripts for shims, which worked rather well. However, on\\nWindows, we relied on PowerShell scripts (`.ps1`), batch/cmd scripts (`.cmd`), and Bash scripts, all\\nwith differing levels of functionality, and each serving a separate purpose. Windows support _did\\nnot_ work well.\\n\\n## What didn\'t work?\\n\\nWhen using shims, you must ensure that all the following scenarios work well: piping data/commands,\\nredirection, stdin prompts, interactivity, signal handling, exit code bubbling, so on and so forth.\\nBash solves a lot of this for us, but Windows does not have a native Bash shell, and thus we had to\\nrely on other scripting languages. The `.cmd` files barely supported any of this, and the `.ps1`\\nfiles were a bit better, but still not great.\\n\\nFor the most part, executing a shim as-is and doing basic work was fine, but once you needed a\\ncomplex scenario (like above), it broke down pretty quickly. It was also further exacerbated when\\ndealing with nested shim executions, for example, `npm` calls `node` under the hood. The parent shim\\nmay be executed with `.ps1` but the child may be `.cmd`, and these do not play well together.\\n\\nThe other problem on Windows is that scripts are not true executables, and are not easily located on\\n`PATH` (excluding `.cmd` files).\\n\\n## What\'s new?\\n\\nTo combat all of these problems, we needed a truly native solution, and that\'s exactly what we did.\\nWe wrote our own Rust based executable, that will replace all of the custom shim scripts, and can\\nproperly handle all of the required scenarios. This new executable is named `proto-shim`\\n(`proto-shim.exe` on Windows) and is published alongside the `proto` binary.\\n\\nThis new executable solves all of the following problems (hopefully):\\n\\n- Locatable on `PATH` (is an `.exe` for Windows)\\n- Can pipe/redirect data\\n- Handles stdin prompts/interactivity\\n- Supports ctrl+c interruptions\\n- Passes parent signals to child processes\\n- Attempts to kill child processes on parent exit\\n- Bubbles exit codes\\n- Native performance\\n- Doesn\'t require special privileges (no symlinks)\\n\\n## How to test?\\n\\nIf you\'re interested in testing this new implementation (we\'d appreciate it), you can do so by\\ndownloading the latest release candidate from GitHub: https://github.com/moonrepo/proto/releases\\n\\nOnce downloaded, unpack the archive, and move the `proto` and `proto-shim` binaries to the\\n`~/.proto/bin` directory (or the location of your `PROTO_INSTALL_DIR` environment variable). From\\nhere, you can execute `proto` or your tool binaries as normal.\\n\\n:::warning\\n\\nIf you run into issues, try deleting the old `~/.proto/shims` directory and trying again. If\\nproblems still persist, please report an issue or reach out to us on Discord!\\n\\n:::\\n\\n:::info\\n\\nOn macOS, you may need to add the binary to the trusted list, in your Priacy & Security settings.\\nThis can also be achieved on the command line with `xattr -c ~/.proto/bin/*`.\\n\\n:::\\n\\n## What to test?\\n\\nBasically everything. We want to ensure that all of the functionality in [What\'s new?](#whats-new)\\nworks as expected, so simply go about your day to day development and let us know if you run into\\nany issues!"},{"id":"moon-v1.18","metadata":{"permalink":"/blog/moon-v1.18","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-12-12_moon-v1.18.mdx","source":"@site/blog/2023-12-12_moon-v1.18.mdx","title":"moon v1.18 - New task execution flow and custom project names","description":"With this release, we\'ve focused heavily on 2 important aspects: task execution, and our onboarding","date":"2023-12-12T00:00:00.000Z","tags":[{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"shell","permalink":"/blog/tags/shell"},{"inline":true,"label":"id","permalink":"/blog/tags/id"},{"inline":true,"label":"name","permalink":"/blog/tags/name"},{"inline":true,"label":"project","permalink":"/blog/tags/project"},{"inline":true,"label":"init","permalink":"/blog/tags/init"},{"inline":true,"label":"onboarding","permalink":"/blog/tags/onboarding"}],"readingTime":4.18,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.18","title":"moon v1.18 - New task execution flow and custom project names","authors":["milesj"],"tags":["toolchain","shell","id","name","project","init","onboarding"],"image":"./img/moon/v1.18.png"},"unlisted":false,"prevItem":{"title":"proto v0.26 (rc) - Release candidate available for testing!","permalink":"/blog/proto-v0.26-rc"},"nextItem":{"title":"proto v0.25 - Linux arm64 gnu and musl support","permalink":"/blog/proto-v0.25"}},"content":"With this release, we\'ve focused heavily on 2 important aspects: task execution, and our onboarding\\nflow.\\n\\n\x3c!--truncate--\x3e\\n\\n## New path based task execution\\n\\nSince moon\'s inception, before we would execute a task\'s command, we would locate its executable on\\nthe file system and execute it directly. We went with this approach as we wanted to avoid all of the\\nbaggage and \\"unknown behavior\\" that came with executing through a shell, and to ensure a more\\ndeterministic outcome. This approach worked very well for stand-alone binaries, like `node`,\\n`cargo`, and built-in commands like `rm`, `mkdir`, and `git`.\\n\\nHowever, it was very problematic in 2 scenarios: executables from language dependencies (Node.js\\nmodules, etc), and multi-command based tasks (using `&&`). To remedy this situation, we\'re no longer\\nlocating the executables ourselves, and instead are prepending `PATH` with the locations in which we\\nknow these executables should exist. We\'re also loosening the restriction on the\\n[`shell` task option](/docs/config/project#shell), which can now be enabled for _all_ tasks, not\\njust system tasks.\\n\\n### Dependency executables\\n\\nFor the 1st scenario, let\'s talk about Node.js modules. When we encountered an unknown task command,\\nlike `eslint` or `prettier`, we\'d attempt to locate its executable by traversing `node_modules/.bin`\\ndirectories, parsing Bash/PowerShell scripts, resolving the source `.js` files, and finally\\nexecuting with `node`. To demonstrate this, say you had the following task:\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  format:\\n    command: \'prettier --write .\'\\n```\\n\\nWhen finally executed, internally it would become something like this command:\\n\\n```shell\\n~/.proto/tools/node/<version>/bin/node ../../node_modules/prettier/internal/cli.mjs --write .\\n```\\n\\nThis was required since our runtime is Rust and we don\'t have access to Node.js\'s module resolution\\nalgorithm... but this approach was very brittle and error prone. It took us many releases to iron\\nout all the bugs, and we\'re pretty sure there are still edge cases unaccounted for. So instead, as\\nmentioned above, we now prepend `PATH`, resulting in the following command:\\n\\n```shell\\nPATH=\\"/path/to/node_modules/.bin:/path/to/proto/tools:$PATH\\" prettier --write .\\n```\\n\\nThis is a much cleaner approach and is far easier to understand as a user.\\n\\n### Multi-command tasks\\n\\nWhile not officially supported in moon, it\'s been possible to run multiple commands in a single task\\nusing `&&` syntax. However, this approach did not work correctly with our integrated toolchain, as\\nonly the 1st command in the list would have its binary be located and executed correctly.\\n\\nFor example, say we wanted to run 2 npm packages, the following would _not_ work:\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    command: \'rm -rf dist && vite build && tsc --build\'\\n```\\n\\nWith this new `PATH` based approach, this will now work correctly. And furthermore, this also\\nenables executables within Bash and PowerShell scripts to be located and executed correctly as well.\\n\\n### What\'s next?\\n\\nIn the future, we\'ll continue to expand on this functionality, and our ultimate goal is to remove\\nthe concept of `platform` from tasks, which has been a bit confusing for new users.\\n\\n## Customize the project name in `moon.yml`\\n\\nThis has been a long requested feature, but thanks to the project graph rework and improvements over\\nthe last few releases, this is now possible. In [`moon.yml`](/docs/config/project), you can now\\nconfigure the [`id`](/docs/config/project#id) setting to override the project name (identifier)\\nderived from [`projects`](/docs/config/workspace#projects) in\\n[`.moon/workspace.yml`](/docs/config/workspace) (most applicable to glob based project locations).\\n\\nFor example, say we have the following `projects` glob.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nprojects:\\n  - \'apps/*\'\\n  - \'packages/*\'\\n```\\n\\nBy default, the project folder name becomes the project name. For the most part this is fine, but\\nwhat if you have a very large monorepo? Or have conflicting project names? Or are migrating\\nprojects? It becomes difficult to manage and organize. But now, simply configure `id`!\\n\\n```yaml title=\\"<project>/moon.yml\\"\\nid: \'custom-project-name\'\\n```\\n\\n:::info\\n\\nBe sure that all targets, project dependencies, task dependencies, and other references are using\\nthe new identifier, otherwise an error will be triggered!\\n\\n:::\\n\\n## Improved onboarding flow\\n\\nWhile this doesn\'t affect current users, we still want to announce that we\'ve made some slight\\nchanges to our onboarding process and the [`moon init`](/docs/commands/init) command. The previous\\ncommand prompted far too many questions, as we would attempt to detect what languages are currently\\nin use, and integrate them into the toolchain.\\n\\nThis was confusing for new users, so starting with this release, we\'ve simplified the process to\\nonly create the moon workspace within a repository.\\n\\n```shell\\nmoon init\\n```\\n\\nWith that being said, you can still integrate tools into the toolchain, by passing the identifier of\\na supported moon tool as an argument.\\n\\n```shell\\nmoon init node # bun, rust, etc\\n```\\n\\n:::success\\n\\nWe\'ve also rewritten a good portion of the \\"[Getting started](/docs/setup-workspace)\\" documentation\\nto reflect these changes!\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.18.0) for a full list\\nof changes.\\n\\n- Improved string allocation and performance for queries, task tokens, and process commands.\\n- Improved remote caching flow and handling.\\n- Updated proto to v0.25."},{"id":"proto-v0.25","metadata":{"permalink":"/blog/proto-v0.25","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-12-11_proto-v0.25.mdx","source":"@site/blog/2023-12-11_proto-v0.25.mdx","title":"proto v0.25 - Linux arm64 gnu and musl support","description":"This is a very small release that primarily adds support for Linux arm64 targets.","date":"2023-12-11T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"linux","permalink":"/blog/tags/linux"},{"inline":true,"label":"musl","permalink":"/blog/tags/musl"},{"inline":true,"label":"gnu","permalink":"/blog/tags/gnu"},{"inline":true,"label":"arm64","permalink":"/blog/tags/arm-64"}],"readingTime":0.68,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.25","title":"proto v0.25 - Linux arm64 gnu and musl support","authors":["milesj"],"tags":["proto","linux","musl","gnu","arm64"]},"unlisted":false,"prevItem":{"title":"moon v1.18 - New task execution flow and custom project names","permalink":"/blog/moon-v1.18"},"nextItem":{"title":"proto v0.24 - Standardized configuration and 10x WASM boost","permalink":"/blog/proto-v0.24"}},"content":"This is a very small release that primarily adds support for Linux arm64 targets.\\n\\n\x3c!--truncate--\x3e\\n\\nThanks to [cargo-dist](https://github.com/axodotdev/cargo-dist), we can now build and distribute\\narm64 binaries with relative ease. When building the binary, libraries are statically linked to\\nensure that the binary can run on any Linux distribution.\\n\\nYou can download the binary from the official\\n[GitHub release](https://github.com/moonrepo/proto/releases/tag/v0.21.0) or by running the\\n[Bash installation script](/docs/proto/install#linux-macos-wsl).\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.25.0) for a full list\\nof changes.\\n\\n- Added a [`proto debug config`](/docs/proto/commands/debug/config) command, to debug all loaded\\n  configs and the final merged config.\\n- Added a `PROTO_BYPASS_VERSION_CHECK` environment variable, to bypass loading and checking of\\n  versions."},{"id":"proto-v0.24","metadata":{"permalink":"/blog/proto-v0.24","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-12-07_proto-v0.24.mdx","source":"@site/blog/2023-12-07_proto-v0.24.mdx","title":"proto v0.24 - Standardized configuration and 10x WASM boost","description":"In this release, we\'ve standardized our configuration from the ground-up.","date":"2023-12-07T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"config","permalink":"/blog/tags/config"},{"inline":true,"label":"tools","permalink":"/blog/tags/tools"}],"readingTime":4.18,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.24","title":"proto v0.24 - Standardized configuration and 10x WASM boost","authors":["milesj"],"tags":["proto","config","tools"],"image":"./img/proto/v0.24.png"},"unlisted":false,"prevItem":{"title":"proto v0.25 - Linux arm64 gnu and musl support","permalink":"/blog/proto-v0.25"},"nextItem":{"title":"moon v1.17 - Full Bun support, TypeScript improvements, and more!","permalink":"/blog/moon-v1.17"}},"content":"In this release, we\'ve standardized our configuration from the ground-up.\\n\\n\x3c!--truncate--\x3e\\n\\n## Improved WASM performance up to 20x\\n\\nBefore we dive into the major changes of this release, we want to highlight the performance\\nimprovements that have landed recently. Thanks to [Dylibso](https://dylibso.com/) and the\\n[Extism](https://extism.org/) team, we\'ve been able to improve the performance of our WASM plugins\\nby 10-20x! This was achieved by plugging into wasmtime\'s ahead-of-time (AOT) compiler and caching\\nlayer.\\n\\nHere\'s an example of the performance improvements when running `node --version`. On older versions,\\nthe execution time was anywhere from 100ms-200ms, but is now down to 10-20ms! This is almost as fast\\nas native\'s 5-10ms!\\n\\n```shell\\n# proto v0.23.5 and below\\nhyperfine --warmup 10 -- \'node --version\'\\nBenchmark 1: node --version\\n  Time (mean \xb1 \u03c3):      99.2 ms \xb1   6.3 ms    [User: 662.5 ms, System: 79.4 ms]\\n  Range (min \u2026 max):    91.3 ms \u2026 119.7 ms    29 runs\\n\\n# proto v0.23.6 and above\\nhyperfine --warmup 10 -- \'node --version\'\\nBenchmark 1: node --version\\n  Time (mean \xb1 \u03c3):      18.5 ms \xb1   1.0 ms    [User: 7.9 ms, System: 12.7 ms]\\n  Range (min \u2026 max):    17.1 ms \u2026  23.8 ms    146 runs\\n```\\n\\n:::success\\n\\nDylibso is hosting an [Extism hackathon](https://dylibso.com/events/2023/hack-for-good/) through the\\nmonth of December, that\'ll donate to children in need. Check it out and participate!\\n\\n:::\\n\\n## Standardized configuration (breaking)\\n\\nUp until now, proto has supported 2 types of configuration, `.prototools` and\\n`~/.proto/config.toml`. The former can exist in any folder, and is used for pinning versions and\\ndefining plugins. The latter is a per-user file that is used for customizing how proto works and\\nalso defining plugins.\\n\\nOver time, functionality in both of these files has grown, and so has the overlap between them. We\\nfelt it was time to standardize these files into a single configuration file, and as such, have\\nremoved `~/.proto/config.toml` and merged its functionality into\\n[`.prototools`](/docs/proto/config). The biggest changes are:\\n\\n- proto settings (like `auto-clean` and `http`) must now exist within a\\n  [`[settings]` table](/docs/proto/config#settings).\\n- Tool specific settings (like `node-intercept-globals`) have moved to the new\\n  [`[tools.node]` table](/docs/proto/config#tools) ([more info below](#tool-level-settings)).\\n- Plugins are still configured within a [`[plugins]` table](/docs/proto/config#plugins).\\n- Global/default settings can be defined in `~/.proto/.prototools`.\\n\\n```toml title=\\".prototools\\"\\nnode = \\"20.0.0\\"\\n\\n[settings]\\nauto-clean = true\\n\\n[settings.http]\\nallow-invalid-certs = true\\n```\\n\\nThe other massive benefit of this change, is that settings _can now be defined anywhere_!\\nPreviously, settings like `auto-clean` or `detect-strategy` could only be defined at the user-level,\\nbut what if your company or team wanted to control this setting? It wasn\'t possible without asking\\nall team members to update their configuration manually. With this change, settings can now be tied\\nto projects or repositories!\\n\\n:::info\\n\\nAfter upgrading, run `proto migrate v0.24` to migrate the old user configuration to the new format!\\n\\n:::\\n\\n### Tool-level settings\\n\\nWhile working on these configuration changes, we also landed the\\n[Tool-level configuration RFC](https://github.com/moonrepo/proto/issues/261), although with a\\ndifferent implementation. This enables users to define settings that will be passed to the WASM\\nplugin of a specific tool, controlling how it works. These settings can be configured with the new\\n[`[tools.<name>]` table](/docs/proto/config#tools).\\n\\nFor example, the `node` tool has a setting called `intercept-globals`, which will trigger an error\\nwhen npm/pnpm/yarn attempt to install a global package.\\n\\n```toml title=\\".prototools\\"\\n[tools.go]\\ngobin = false\\n\\n[tools.node]\\nintercept-globals = false\\n```\\n\\nAs of now, only the [Node.js](https://github.com/moonrepo/node-plugin) and\\n[Go](https://github.com/moonrepo/go-plugin) plugins support settings.\\n\\n## Moved aliases and default versions (breaking)\\n\\nTo continue with these configuration changes, we\'ve also moved aliases and the default version into\\nthis new configuration. Previously, both of these values were stored in\\n`~/.proto/tools/<name>/manifest.json`, but the problem was, that this file is internally managed by\\nproto, and should not be modified by users. This made it difficult for users to manage, and to\\npersist these values across machines (think dotfile syncing).\\n\\nNow these values are stored in [`.prototools`](/docs/proto/config), with aliases being configured in\\n[`[tools.<name>.aliases]`](/docs/proto/config#toolsaliases), and the default version (global) being\\npinned as a version in `~/.proto/.prototools`. Here\'s an example:\\n\\n```toml title=\\"~/.proto/.prototools\\"\\nnode = \\"20.0.0\\"\\n\\n[tools.node.aliases]\\nwork = \\"18\\"\\n```\\n\\nThis change also enables aliases to be defined anywhere! Previously, aliases were only allowed to be\\ndefined globally for a user, but now they can be defined per-project, or even per-directory.\\n\\n:::info\\n\\nAfter upgrading, run `proto migrate v0.24` to migrate your aliases and default versions to the new\\nconfiguration format!\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.24.0) for a full list\\nof changes.\\n\\n- proto now supports [canary](/docs/proto/install#canary-releases) and\\n  [nightly](/docs/proto/install#nightly-releases) releases.\\n- Updated non-latest plugins to be cached for 30 days, instead of forever.\\n- Fixed an issue where resolving canary versions wouldn\'t work correctly."},{"id":"moon-v1.17","metadata":{"permalink":"/blog/moon-v1.17","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-11-20_moon-v1.17.mdx","source":"@site/blog/2023-11-20_moon-v1.17.mdx","title":"moon v1.17 - Full Bun support, TypeScript improvements, and more!","description":"In this release, we\'ve focused heavily on the JavaScript and TypeScript ecosystems, by improving our","date":"2023-11-20T00:00:00.000Z","tags":[{"inline":true,"label":"bun","permalink":"/blog/tags/bun"},{"inline":true,"label":"typescript","permalink":"/blog/tags/typescript"},{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":4.74,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.17","title":"moon v1.17 - Full Bun support, TypeScript improvements, and more!","authors":["milesj"],"tags":["bun","typescript","javascript"],"image":"./img/moon/v1.17.png"},"unlisted":false,"prevItem":{"title":"proto v0.24 - Standardized configuration and 10x WASM boost","permalink":"/blog/proto-v0.24"},"nextItem":{"title":"proto v0.23 - New detection strategy, tool commands, and more","permalink":"/blog/proto-v0.23"}},"content":"In this release, we\'ve focused heavily on the JavaScript and TypeScript ecosystems, by improving our\\nimplementations, and providing full Bun support.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bun tier 1, 2, and 3 support\\n\\nYes you read that right! Not just 1 tier, not just 2 tiers, but all 3 language tiers have been\\nimplemented for Bun, providing [full language support](/docs/how-it-works/languages), and parity\\nwith Node.js. Thanks to the Bun work in [proto](/proto) and the previous\\n[v1.16 release](./moon-v1.16), we were able to add full Bun support with relative easy.\\n\\nSo what does Bun support look like? To start, you can now configure a\\n[`bun`](/docs/config/toolchain#bun) setting in [`.moon/toolchain.yml`](/docs/config/toolchain),\\nincluding an optional `version` to download and install, and settings similar to Node.js.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nbun:\\n  version: \'1.0.13\'\\n  syncProjectWorkspaceDependencies: true\\n```\\n\\nThis will enable the `bun` platform and the following integrations are applied:\\n\\n- Will automatically download and install Bun for the configured version.\\n- Will install dependencies using `bun install` (deduping currently not supported).\\n- Will parse `bun.lockb` for dependency resolution and task hashing.\\n- Will use `bunx` instead of `npx` for one-off package executions.\\n- Can execute `bun` commands within tasks.\\n\\nWith the `bun` platform enabled, you can now configure the platform for projects and tasks (is\\nautomatically detected when running the `bun` or `bunx` commands).\\n\\n```yaml title=\\"<project>/moon.yml\\"\\n# Default platform for all tasks (optional)\\nplatform: \'bun\'\\n\\ntasks:\\n  dev:\\n    command: \'bun run dev\'\\n  test:\\n    command: \'bun test\'\\n  lint:\\n    command: \'eslint .\'\\n    # Only required for npm packages (if not defined above)\\n    platform: \'bun\'\\n```\\n\\n## TypeScript improvements\\n\\n### Configure the root directory\\n\\nWhen moon was first designed, it was designed for JavaScript based monorepos. Because of this, there\\nwere a handful of assumptions that still exist today, one of which is that the moon workspace root\\nwas assumed to be the JavaScript and TypeScript root. The root is extremely important in resolving\\nrelative paths for project references and other path based functionality, so using the workspace\\nroot made the most sense.\\n\\nHowever, what if your TypeScript root isn\'t the workspace root? Or the TypeScript root and\\nJavaScript root are different? Well, you were out of luck... until now! We\'re introducing a new\\nsetting called [`typescript.root`](/docs/config/toolchain#root), that denotes the root directory for\\nTypeScript related functionality (relative from moon\'s workspace root).\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\ntypescript:\\n  root: \'./typescript\'\\n```\\n\\n### Include shared types\\n\\nAnother common TypeScript practice is to have shared `.d.ts` types that are used across multiple\\nprojects, or to augment third-party types. This is so common that we felt obligated to support it in\\nsome capacity within moon. With that said, we\'re introducing a new setting,\\n[`typescript.includeSharedTypes`](/docs/config/toolchain#includesharedtypes).\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\ntypescript:\\n  includeSharedTypes: true\\n```\\n\\nWhen enabled, we\'ll automatically sync the shared types path to the `include` field of all relevant\\nproject `tsconfig.json`s. However, for this to work correctly, the shared types _must_ exist in a\\n`types` folder relative from the [TypeScript root](#configure-the-root-directory).\\n\\nFor example, if the TypeScript root is `/`, and shared types is `/types`, then all packages in\\n`/packages/*` will be updated with the following:\\n\\n```json title=\\"packages/example/tsconfig.json\\"\\n{\\n  \\"include\\": [\\"../../types/**/*\\"]\\n}\\n```\\n\\n> This setting can be overridden on a per-project basis.\\n\\n### Include sources of project references\\n\\nContinuing with `include` related functionality, we\'ve introducing yet another new setting,\\n[`typescript.includeProjectReferenceSources`](/docs/config/toolchain#includeprojectreferencesources),\\nwhich does exactly as its name implies. It automatically appends the sources (`**/*`) of all project\\nreferences to the `include` field of all relevant project `tsconfig.json`s.\\n\\nThis is useful (and sometimes required) for the following reasons:\\n\\n- It makes files within a referenced project available for import into the consuming project. This\\n  is required for \\"press tab to auto-import\\" nested/deep files, otherwise only index imports will\\n  work (and barrel files are costly).\\n- It also improves the editor experience by making the source files available for intellisense,\\n  autocomplete, and other features.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\ntypescript:\\n  includeProjectReferenceSources: true\\n```\\n\\nTo understand this functionality, say you have a project with the following `tsconfig.json`, and\\nthis project depends on 2 other projects: ui and utils.\\n\\n```json title=\\"packages/example/tsconfig.json\\"\\n{\\n  \\"compilerOptions\\": {},\\n  \\"include\\": [\\"src/**/*\\"]\\n}\\n```\\n\\nWhen our syncing process occurs, we\'ll automatically sync project references, and include referenced\\nsources, like so.\\n\\n```json title=\\"packages/example/tsconfig.json\\"\\n{\\n  \\"compilerOptions\\": {},\\n  \\"include\\": [\\"src/**/*\\", \\"../ui/**/*\\", \\"../utils/**/*\\"],\\n  \\"references\\": [{ \\"path\\": \\"../ui\\" }, { \\"path\\": \\"../utils\\" }]\\n}\\n```\\n\\n> This setting can also be overridden on a per-project basis.\\n\\n## JavaScript improvements\\n\\n### Supporting the \\"single version policy\\" pattern\\n\\nIf you\'re unfamiliar with the single version policy, or the one version rule, it\'s a pattern that\\nonly allows dependencies to be configured in a single location, typically the root `package.json`.\\nThis pattern forces _all_ projects in a monorepo to use the same dependencies, and avoid the package\\n`workspaces` functionality.\\n\\nThis pattern was previously not possible in moon, as our automatic dependency installation process\\ndid not account for it, and it would either install in the root if using `workspaces`, or in a\\nproject otherwise. To support this pattern, we\'re introducing the new setting\\n[`node.rootPackageOnly`](/docs/config/toolchain#rootpackageonly) for Node.js, and\\n`bun.rootPackageOnly` for Bun.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nnode:\\n  rootPackageOnly: true\\n```\\n\\nWhen enabled, we\'ll only install dependencies in the workspace root, regardless of other settings or\\nhow `package.json`s are configured. However, this setting _does not_ verify that other\\n`package.json`s _do not_ have dependencies. It\'s up to you to ensure that other `package.json`s do\\nnot have dependencies.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.17.0) for a full list\\nof changes.\\n\\n- Updated automatic dependency linking to use the `build` scope instead of `peer` scope. This should\\n  alleviate some of the pain points with `package.json` syncing.\\n- Improved project reference syncing and edge case handling."},{"id":"proto-v0.23","metadata":{"permalink":"/blog/proto-v0.23","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-11-16_proto-v0.23.mdx","source":"@site/blog/2023-11-16_proto-v0.23.mdx","title":"proto v0.23 - New detection strategy, tool commands, and more","description":"With this release, we\'ve reorganized our commands, improved version detection, and Windows support.","date":"2023-11-16T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.23","title":"proto v0.23 - New detection strategy, tool commands, and more","authors":["milesj"],"tags":["proto"],"image":"./img/proto/v0.23.png"},"unlisted":false,"prevItem":{"title":"moon v1.17 - Full Bun support, TypeScript improvements, and more!","permalink":"/blog/moon-v1.17"},"nextItem":{"title":"moon v1.16 - Bun support, Rust improvements, and more!","permalink":"/blog/moon-v1.16"}},"content":"With this release, we\'ve reorganized our commands, improved version detection, and Windows support.\\n\\n\x3c!--truncate--\x3e\\n\\n## New `detect-strategy` setting\\n\\nUp until now, when proto would attempt to detect a version, it would use a version from the closest\\n`.prototools` file, or tool specific file (`package.json`, `.nvmrc`, etc), which ever matched first.\\nFor the most part, this works great, but what if you wanted `.prototools` to take precedence over\\nother files, even if found in a higher parent directory? You unfortunately couldn\'t.\\n\\nTo support this new flow, we\'re introducing a new [`~/.proto/config.toml`](/docs/proto/config)\\nsetting called [`detect-strategy`](/docs/proto/config#detect-strategy). This setting supports the\\nfollowing values, with more possibly in the future!\\n\\n- `first-available` (default) - Will use the first available version that is found. Either from\\n  `.prototools` or a tool specific file.\\n- `prefer-prototools` - Prefer a `.prototools` version, even if found in a parent directory. If none\\n  found, falls back to tool specific file.\\n\\n```toml title=\\"~/.proto/config.toml\\"\\ndetect-strategy = \\"prefer-prototools\\"\\n```\\n\\n## New `proto tool` command group (breaking)\\n\\nOur CLI surface area has been growing and we felt it was time to start grouping commands, starting\\nwith the new [`proto tool`](/docs/proto/commands/plugin) command. This command will contain \\"not\\nused very often\\" subcommands in relation to tools and their plugins, primarily for managing plugins,\\nand viewing tool information and inventory. As such, we\'ve deprecated and moved the following\\ntop-level commands:\\n\\n- Moved `proto add-plugin` to `proto tool add`.\\n- Moved `proto remove-plugin` to `proto tool remove`.\\n- Moved `proto plugins` to `proto tool list-plugins`.\\n- Moved `proto tools` to `proto tool list`.\\n\\n## New `proto tool info` command\\n\\nContinuing with the changes above, we\'re also introducing a new command,\\n[`proto tool info`](/docs/proto/commands/plugin/info), which displays detailed information about a\\ntool and its backing plugin. For example:\\n\\n```\\n$ proto tool info node\\n\\nnode - Node.js\\n\\nInventory\\n  Store: ~/.proto/tools/node\\n  Executable: ~/.proto/tools/node/20.0.0/bin/node\\n  Globals directory: ~/.proto/tools/node/globals/bin\\n  Binaries:\\n    - ~/.proto/bin/node (primary)\\n  Shims:\\n    - ~/.proto/shims/node (primary)\\n\\nPlugin\\n  Version: 0.5.2\\n  Source: https://github.com/moonrepo/node-plugin/releases/download/v0.5.2/node_plugin.wasm\\n```\\n\\n> This command also supports JSON output via `--json`.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.23.0) for a full list\\nof changes.\\n\\n- Added support to plugins to ignore certain paths when detecting a version.\\n- Updated Windows to create 3 shim files for each tool: `.cmd` (cmd.exe), `.ps1` (powershell), and\\n  no extension (bash)."},{"id":"moon-v1.16","metadata":{"permalink":"/blog/moon-v1.16","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-10-30_moon-v1.16.mdx","source":"@site/blog/2023-10-30_moon-v1.16.mdx","title":"moon v1.16 - Bun support, Rust improvements, and more!","description":"With this release, we\'ve focused on requests from the community, instead of internal migration work","date":"2023-10-30T00:00:00.000Z","tags":[{"inline":true,"label":"bun","permalink":"/blog/tags/bun"},{"inline":true,"label":"rust","permalink":"/blog/tags/rust"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"automation","permalink":"/blog/tags/automation"},{"inline":true,"label":"package","permalink":"/blog/tags/package"},{"inline":true,"label":"manager","permalink":"/blog/tags/manager"}],"readingTime":3.21,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.16","title":"moon v1.16 - Bun support, Rust improvements, and more!","authors":["milesj"],"tags":["bun","rust","toolchain","automation","package","manager"],"image":"./img/moon/v1.16.png"},"unlisted":false,"prevItem":{"title":"proto v0.23 - New detection strategy, tool commands, and more","permalink":"/blog/proto-v0.23"},"nextItem":{"title":"proto v0.21 - Linux x64 musl support","permalink":"/blog/proto-v0.21"}},"content":"With this release, we\'ve focused on requests from the community, instead of internal migration work\\nor new features.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bun as a package manager\\n\\nNow that [Bun v1 has officially released](https://bun.sh/blog/bun-v1.0) and our\\n[bun-plugin](https://github.com/moonrepo/bun-plugin) for proto has stabilized, we can start slowly\\nintegrating Bun support into moon. The first step in this series is adding Bun as a supported\\npackage manager for Node.js. Seems odd as they are conflicting runtimes... right? While true, a lot\\nof users are interested in using Bun purely as a package manager, as it can install dependencies\\nincredibly fast. So why not support it?\\n\\nIn this release, you can now install dependencies with Bun by configuring\\n[`node.packageManager`](/docs/config/toolchain#packagemanager) and\\n[`node.bun`](/docs/config/toolchain#npm-pnpm-yarn-bun) in your toolchain.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nnode:\\n  packageManager: \'bun\'\\n  bun:\\n    version: \'1.0.0\'\\n```\\n\\nAdditionally, you can now execute Bun commands within tasks! However, ensure the task\'s platform is\\nstill set to `node` though, as this is using Bun as a package manager within Node.js, not as a\\nseparate runtime.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  test:\\n    command: \'bun test\'\\n    platform: \'node\'\\n```\\n\\nWhen using Bun, the following integrations are applied:\\n\\n- Will automatically download and install Bun for the configured version.\\n- Will install dependencies using `bun install` (deduping currently not supported).\\n- Will parse `bun.lockb` for dependency resolution and task hashing.\\n- Will use `bunx` instead of `npx` for one-off package executions.\\n- Can execute `bun` commands within tasks.\\n\\n> This change _only_ adds support for Bun as a package manager for Node.js. It does not add Bun as a\\n> supported language/platform in the toolchain, but it does pave the way for this to happen! Also\\n> note that Bun _is not supported on Windows_!\\n\\n## Configure Rust components and targets\\n\\nWe\'ve had Rust tier 2 and 3 support for quite a while now, but there was a big missing piece: the\\nability to configure and install additional\\n[components](https://rust-lang.github.io/rustup/concepts/components.html) and\\n[targets](https://doc.rust-lang.org/nightly/rustc/platform-support.html) for the current toolchain.\\nIn this release, we\'ve added support for both!\\n\\nSimply configure the [`rust.components`](/docs/config/toolchain#components) or\\n[`rust.targets`](/docs/config/toolchain#targets) settings in\\n[`.moon/toolchain.yml`](/docs/config/toolchain), and moon will automatically install them when the\\npipeline is ran. This functionality uses the same hashing implementation as\\n[`rust.bins`](/docs/config/toolchain#bins-1), so will only install the first time, and again if the\\nconfiguration changes (or the cache is removed).\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nrust:\\n  version: \'1.73.0\'\\n  components:\\n    - \'clippy\'\\n    - \'rust-analyzer\'\\n  targets:\\n    - \'wasm32-wasi\'\\n```\\n\\n## Force toolchain to use global binaries\\n\\nOur [toolchain](/docs/concepts/toolchain) is great for local development, as it ensures all\\ndevelopers and machines are running the exact versions of tools required for the workspace. However,\\nit becomes overkill for other environments like CI and Docker where the environment has been\\npre-configured.\\n\\nTo avoid the unnecessary overhead of download and installing tools in the toolchain, we\'re\\nintroducing the `MOON_TOOLCHAIN_FORCE_GLOBALS` environment variable. When provided, this will:\\n\\n- Disable downloading and installing tools (will still download the WASM plugins).\\n- Execute all tool commands using the global binary available on `PATH`.\\n\\n```shell\\nMOON_TOOLCHAIN_FORCE_GLOBALS=true moon ci\\n```\\n\\n> We\'re looking into ways to automate this process, but for now, this is the best solution.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.16.0) for a full list\\nof changes.\\n\\n- Added an improved task inheritance chain resolver. To fallback to the previous behavior, set\\n  `experiments.interweavedTaskInheritance: false` in `.moon/workspace.yml`.\\n- Added a new [project type `automation`](/docs/config/project#type), for projects like E2E and\\n  integration testing.\\n- Updated action graph cycle detection to list all nodes in the cycle (when detectable).\\n- Updated all npx calls to use a package manager equivalent. For example: `yarn dlx`, `pnpm dlx`,\\n  `bunx`.\\n- Updated to support Yarn v4."},{"id":"proto-v0.21","metadata":{"permalink":"/blog/proto-v0.21","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-10-27_proto-v0.21.mdx","source":"@site/blog/2023-10-27_proto-v0.21.mdx","title":"proto v0.21 - Linux x64 musl support","description":"This is a very small release that primarily adds support for the Linux x64 musl target.","date":"2023-10-27T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"linux","permalink":"/blog/tags/linux"},{"inline":true,"label":"musl","permalink":"/blog/tags/musl"}],"readingTime":0.79,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.21","title":"proto v0.21 - Linux x64 musl support","authors":["milesj"],"tags":["proto","linux","musl"]},"unlisted":false,"prevItem":{"title":"moon v1.16 - Bun support, Rust improvements, and more!","permalink":"/blog/moon-v1.16"},"nextItem":{"title":"proto v0.20 - New shims and binaries management","permalink":"/blog/proto-v0.20"}},"content":"This is a very small release that primarily adds support for the Linux x64 musl target.\\n\\n\x3c!--truncate--\x3e\\n\\nThanks to [cargo-dist](https://github.com/axodotdev/cargo-dist), we can now build and distribute\\nmusl binaries with relative ease. When building the binary, libraries are statically linked to\\nensure that the binary can run on any Linux distribution.\\n\\nYou can download the binary from the official\\n[GitHub release](https://github.com/moonrepo/proto/releases/tag/v0.21.0) or by running the\\n[Bash installation script](/docs/proto/install#linux-macos-wsl). In the future, we plan to support\\narm64 builds for both Linux gnu and musl.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.21.0) for a full list\\nof changes.\\n\\n- Improved file and directory locking. Will now work correctly across processes and signals,\\n  especially for those killed/dropped.\\n- Updated WASM functions to use explicit Rust enum types for versions to properly handle all\\n  variations (version, alias, requirement, range)."},{"id":"proto-v0.20","metadata":{"permalink":"/blog/proto-v0.20","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-10-20_proto-v0.20.mdx","source":"@site/blog/2023-10-20_proto-v0.20.mdx","title":"proto v0.20 - New shims and binaries management","description":"In this release, we\'re reworking how shims and binaries work.","date":"2023-10-20T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"bin","permalink":"/blog/tags/bin"},{"inline":true,"label":"shim","permalink":"/blog/tags/shim"},{"inline":true,"label":"checksum","permalink":"/blog/tags/checksum"}],"readingTime":2.98,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.20","title":"proto v0.20 - New shims and binaries management","authors":["milesj"],"tags":["proto","bin","shim","checksum"]},"unlisted":false,"prevItem":{"title":"proto v0.21 - Linux x64 musl support","permalink":"/blog/proto-v0.21"},"nextItem":{"title":"moon v1.15 - Next-generation action graph","permalink":"/blog/moon-v1.15"}},"content":"In this release, we\'re reworking how shims and binaries work.\\n\\n\x3c!--truncate--\x3e\\n\\n## Shims _and_ Binaries (breaking)\\n\\nSince proto\'s inception, we\'ve used shims as a way to execute installed tools. This allowed us to\\nwrap the underlying tool binary to provide additional functionality, such as automatic version\\ndetection, runtime hooks, and more. However, this approach has some limitations, such as:\\n\\n- Shims are forced onto you and there\'s no way to use proto without shims.\\n- Shims are slower than executing the native binary, upwards of 10x slower. While this equates in\\n  milliseconds, it can be noticeable dependending on the tool.\\n- For Windows, our shim files are `.cmd` _and not_ `.exe`. This causes a lot of weird and unexpected\\n  problems when an environment expects a real executable, or uses a hard-coded `.exe` extension.\\n\\nTo remedy this, we\'re introducing both a shim and non-shim approach, which has resulted in a pretty\\nbig breaking change. Shims are now generated in `~/.proto/shims` (instead of `~/.proto/bin`), while\\n`~/.proto/bin` will now store symlinks to native binaries. To migrate to this new pattern, we\'re\\nintroducing a new `proto migrate` command (this only needs to be ran once).\\n\\n```shell\\n$ proto upgrade\\n$ proto migrate v0.20 --log debug\\n```\\n\\n### How it works\\n\\nWhen installing proto for the first time, or running the `proto migrate` command, we prepend `PATH`\\nwith `$PROTO_HOME/shims:$PROTO_HOME/bin`. This allows shims to be executed _first_ and fallthrough\\nto native binaries if a shim does not exist (for example, `.exe` on Windows).\\n\\nFurthermore, if you\'d prefer to _only use_ shims, or _only use_ binaries, you can update `PATH` and\\nremove the unwanted directory path.\\n\\nAnd lastly, if shims are causing problems, you can now easily reference the native binaries\\ndirectly. This was rather complicated before.\\n\\n### Comparison\\n\\n|                      | Shims                                              | Binaries                                                                |\\n| -------------------- | -------------------------------------------------- | ----------------------------------------------------------------------- |\\n| **Location**         | `~/.proto/shims`                                   | `~/.proto/bin`                                                          |\\n| **Created as**       | Scripts that run `proto run`                       | Symlinks to the native binary                                           |\\n| **Version executed** | Detects version at runtime                         | Last version that was installed + pinned                                |\\n| **Supported for**    | All tools                                          | Only tools that support native execution (may not work for `.js` files) |\\n| **Additional files** | Creates extra files (like `bunx`, `node-gyp`, etc) | Only links the primary binary                                           |\\n\\n## Support for minisign checksums\\n\\nWhen proto installs a tool, it runs a process known as checksum verification, where we ensure the\\ndownload hasn\'t been modified maliciously in anyway. Historically we only supported SHA256\\nchecksums, but now, we also support the new [minisign](https://jedisct1.github.io/minisign/) tool,\\nused by popular tools like [Zig](https://ziglang.org/).\\n\\nIf you\'re building a plugin for a tool that uses minisign, you can use the new\\n[`checksum_public_key`](/docs/proto/wasm-plugin#downloading-pre-builts) (WASM) or\\n[`install.checksum-public-key`](/docs/proto/non-wasm-plugin#downloading-and-installing) (TOML) field\\nto provide the public key for use in verification.\\n\\nWhen the checksum URL ends in a `.minisig` extension, proto will automatically use minisign for\\nchecksum verification!\\n\\n```toml\\n[install]\\nchecksum-url = \\"https://domain.com/some/path/to/checksum.minisig\\"\\nchecksum-public-key = \\"untrusted comment: ...\\"\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.20.0) for a full list\\nof changes.\\n\\n- Updated `proto use` to install tools in parallel.\\n- Updated `proto plugins` and `proto tools` to load plugins in parallel.\\n- Updated `proto run` to error when the tool attempts to self-upgrade outside of proto.\\n- Rust plugin\\n  - Will now attempt to install `rustup` if it does not exist on the current machine.\\n  - Will now respect the `RUSTUP_HOME` environment variable when locating the `.rustup` store.\\n- Schema plugin\\n  - Added `install.checksum_public_key` for defining the public key used to verify checksums.\\n  - Added `metadata.self_upgrade_commands` for defining which sub-commands should be blocked for\\n    self-upgrades."},{"id":"moon-v1.15","metadata":{"permalink":"/blog/moon-v1.15","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-10-09_moon-v1.15.mdx","source":"@site/blog/2023-10-09_moon-v1.15.mdx","title":"moon v1.15 - Next-generation action graph","description":"In this release, we\'ve taken the next step in modernizing our action pipeline, by rewriting the","date":"2023-10-09T00:00:00.000Z","tags":[{"inline":true,"label":"action","permalink":"/blog/tags/action"},{"inline":true,"label":"dependency","permalink":"/blog/tags/dependency"},{"inline":true,"label":"graph","permalink":"/blog/tags/graph"},{"inline":true,"label":"pipeline","permalink":"/blog/tags/pipeline"},{"inline":true,"label":"railway","permalink":"/blog/tags/railway"}],"readingTime":4.92,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.15","title":"moon v1.15 - Next-generation action graph","authors":["milesj"],"tags":["action","dependency","graph","pipeline","railway"],"image":"./img/moon/v1.15.png"},"unlisted":false,"prevItem":{"title":"proto v0.20 - New shims and binaries management","permalink":"/blog/proto-v0.20"},"nextItem":{"title":"proto v0.19 - Version pinning and outdated checks","permalink":"/blog/proto-v0.19"}},"content":"In this release, we\'ve taken the next step in modernizing our action pipeline, by rewriting the\\ndependency graph.\\n\\n\x3c!--truncate--\x3e\\n\\n## Hello action graph, goodbye dependency graph\\n\\nFor the past few months, we\'ve been working on a rewrite of our action pipeline, which consists of\\nthe project graph, dependency graph, task executor, process pipeline, and more. It\'s a slow process,\\nwith many different pieces that must land in sequence, but we\'re almost done. The next step in this\\nprocess is the [introduction of the new action graph](/docs/how-it-works/action-graph), which\\nreplaces the previous dependency graph.\\n\\nFor the most part, the graphs work in a similar fashion, but since we rewrote it from the ground up,\\nwe were able to resolve any discrepancies and performance issues. The biggest changes between the\\nnew and old graphs are:\\n\\n- All actions now depend on the `SyncWorkspace` action, instead of this action running arbitrarily.\\n- Cleaned up dependency chains between actions, greatly reducing the number of nodes in the graph.\\n- Renamed `RunTarget` to `RunTask`, including interactive and persistent variants.\\n- And lastly, we ditched our batched task approach for a ready queue. Continue reading for more\\n  information!\\n\\n### A new performant thread pool\\n\\nIn the old dependency graph, when we\'d execute a task, we\'d order the graph topologically and then\\ngroup actions into batches (or buckets) based on their dependency chains. Batches would then be\\nexecuted in order within the thread pool. This approach worked well, but had one major flaw: it\\nwasn\'t as performant as could be. For example, if our thread pool size was 12, and a batch only had\\n2 tasks in it, what were the other 10 threads doing? Absolutely nothing. They were sitting idly,\\nwaiting for a task.\\n\\nAnd now with the new action graph, we take full advantage of all threads in the pool. Instead of the\\nbatched approach above, we now use a topological task-ready queue, where a thread without work (or\\nis waiting for work) can poll the graph for a new task to run. A task is considered ready to run if\\nit either has no dependencies, or all of its dependencies (in the chain) have been ran.\\n\\nFor large graphs, this should result in a significant performance improvement!\\n\\n### Automatic dependency linking (breaking)\\n\\n> In v1.17, we changed the scope from \\"peer\\" to \\"build\\" to reduce friction.\\n\\nBecause of these graph changes, we do have a minor \\"breaking change\\". Tasks that depend (via `deps`)\\non other tasks from arbitrary projects (the parent project doesn\'t implicitly or explicitly depend\\non the other project), not including the root-level project, will now automatically mark that other\\nproject as a \\"peer\\" dependency (if not already configured with `dependsOn`). For example, \\"b\\"\\nbecomes a peer dependency for \\"a\\".\\n\\n```yaml title=\\"a/moon.yml\\"\\ntasks:\\n  build:\\n    deps: [\'b:build\']\\n```\\n\\nNow internally becomes:\\n\\n```yaml title=\\"a/moon.yml\\"\\ndependsOn:\\n  - id: \'b\'\\n    scope: \'peer\'\\n\\ntasks:\\n  build:\\n    deps: [\'b:build\']\\n```\\n\\nIf you\'d prefer this dependency to _not be_ a peer, you can explicitly configure it with a different\\nscope. For Node.js projects, the \\"build\\" scope can be used as a no-op replacement.\\n\\n```yaml title=\\"a/moon.yml\\"\\ndependsOn:\\n  - id: \'b\'\\n    scope: \'build\' # production, development\\n\\ntasks:\\n  build:\\n    deps: [\'b:build\']\\n```\\n\\nWe\'re marking this as a breaking change as this could subtly introduce cycles in the project graph\\nthat weren\'t present before, and for Node.js projects, this may inject `peerDependencies`. However,\\nthis change was necessary to ensure accurate dependency chains in the graph.\\n\\n## New `moonrepo/setup-toolchain` GitHub action\\n\\nWe\'ve begun a process to deprecate the\\n[moonrepo/setup-moon-action](https://github.com/moonrepo/setup-moon-action) and\\n[moonrepo/setup-proto](https://github.com/moonrepo/setup-proto) GitHub actions, and instead, combine\\nand replace them with a new [moonrepo/setup-toolchain](https://github.com/moonrepo/setup-toolchain)\\naction. Why a new action instead of fixing the others?\\n\\nThe biggest problem was that both previous actions shared about 90% of the same code, but were\\nslightly different in how they installed the binaries and cached the toolchain. It was was also\\nconfusing for consumers to understand and know which action to use (because they shouldn\'t be used\\ntogether).\\n\\nTo remedy this, we\'re prototyping the new\\n[moonrepo/setup-toolchain](https://github.com/moonrepo/setup-toolchain) action, which has been\\nworking quite well. It aims to solve the following:\\n\\n- Installs `proto` globally so that installed tools can also be executed globally.\\n- Conditionally installs `moon` globally if the repository is using moon (attempts to detect a\\n  `.moon` directory).\\n- Caches the toolchain (`~/.proto`) so subsequent runs are faster.\\n- Hashes `.prototools` and `.moon/toolchain.yml` files to generate a unique cache key.\\n- Cleans the toolchain before caching to remove unused or stale tools.\\n- Can auto-install tools when used.\\n\\n```diff\\n# ...\\njobs:\\n  ci:\\n    name: CI\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v4\\n        with:\\n          fetch-depth: 0\\n-      - uses: moonrepo/setup-moon-action@v1\\n+      - uses: moonrepo/setup-toolchain@v0\\n```\\n\\n## Now supported in Railway\\n\\nIf you\'re a big fan of [Railway](https://railway.app/) (like we are), and you\'re deploying a Node.js\\nbacked application, then you\'ll be happy to hear that Railway now officially and natively supports\\nmoon! We spent some time over the past month\\n[integrating moon support into their Nixpacks architecture](https://nixpacks.com/docs/providers/node).\\n\\nTo make use of this, set the `NIXPACKS_MOON_APP_NAME` environment variable to the name of your moon\\nproject that you want to be deployed. This will then automatically run `moon run <app>:build` and\\n`moon run <app>:start` respectively. To customize the task names, you can set the\\n`NIXPACKS_MOON_BUILD_TASK` and `NIXPACKS_MOON_START_TASK` environment variables.\\n\\n:::info\\n\\nThis is currently only supported for Node.js projects, but will be expanded to other languages in\\nthe future!\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.15.0) for a full list\\nof changes.\\n\\n- Added a `moon action-graph` command.\\n- Added a `--dependents` argument to `moon action-graph`.\\n- Added the ability to skip non-`RunTask` actions using environment variables.\\n- Deprecated the `moon dep-graph` command."},{"id":"proto-v0.19","metadata":{"permalink":"/blog/proto-v0.19","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-09-29_proto-v0.19.mdx","source":"@site/blog/2023-09-29_proto-v0.19.mdx","title":"proto v0.19 - Version pinning and outdated checks","description":"In this release, we\'re improving version pinning and introducing a new command to check for outdated","date":"2023-09-29T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"pin","permalink":"/blog/tags/pin"},{"inline":true,"label":"global","permalink":"/blog/tags/global"},{"inline":true,"label":"local","permalink":"/blog/tags/local"},{"inline":true,"label":"outdated","permalink":"/blog/tags/outdated"}],"readingTime":1.94,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.19","title":"proto v0.19 - Version pinning and outdated checks","authors":["milesj"],"tags":["proto","pin","global","local","outdated"],"image":"./img/proto/v0.19.png"},"unlisted":false,"prevItem":{"title":"moon v1.15 - Next-generation action graph","permalink":"/blog/moon-v1.15"},"nextItem":{"title":"moon v1.14 - Improvements to running targets and toolchain versions","permalink":"/blog/moon-v1.14"}},"content":"In this release, we\'re improving version pinning and introducing a new command to check for outdated\\nversions.\\n\\n\x3c!--truncate--\x3e\\n\\n## New `proto pin` command (breaking)\\n\\nBefore our official v1 release, which is relatively soon, we\'ll be making some breaking changes with\\nthe proto APIs. The first is the introduction of the new [`proto pin`](/docs/proto/commands/pin)\\ncommand, which replaces the previous `proto local` and `proto global` commands. We felt this was a\\nmuch cleaner change, and far easier to understand than the previous command names.\\n\\n```shell\\n# v0.18\\n$ proto local go 1.20\\n$ proto global node 20\\n\\n# v0.19+\\n$ proto pin go 1.20\\n$ proto pin node 20 --global\\n```\\n\\n## New `pin-latest` setting\\n\\nWhile we\'re on the subject of pinning versions, we\'ve also introduced a new\\n[`pin-latest`](/docs/proto/config#pin-latest) setting. Do you want the latest version to always be\\npinned? Do you forgot to pass `--pin` when installing? Do you forget to run the `proto global` or\\n`proto local` commands (now `proto pin`)? If you answered yes to any of these questions, then this\\nsetting is for you.\\n\\nWhen enabled, and a tool is installed with the \\"latest\\" version, the resolved version will\\nautomatically be pinned to the configuration of your choice. For example, say we have the following\\nuser config:\\n\\n```toml title=\\"~/.proto/config.toml\\"\\npin-latest = \\"local\\"\\n```\\n\\nAnd we run one of the following commands:\\n\\n```shell\\n$ proto install go\\n$ proto install node latest\\n```\\n\\nThen the resolved version of the tool will automatically be set to the `.prototools` file in the\\ncurrent directory. Handy right?\\n\\n## New `proto outdated` command\\n\\nBy request of the community, we\'re introducing yet another new command,\\n[`proto outdated`](/docs/proto/commands/outdated). If you\'re familiar with package managers, you can\\nprobably guess what this command does! It\'ll check for newer available versions, for all tools\\nconfigured in the closest `.prototools` file. Very handy for keeping your tools up to date.\\n\\n```\\n$ proto outdated\\n\\ngo - current version 1.20.2 (via ~1.20), newer version 1.20.8, update available!\\nnode - current version 20.7.0 (via 20.7.0), latest version 20.8.0, update available!\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.19.0) for a full list\\nof changes.\\n\\n- Added `PROTO_WASM_LOG` environment variable to toggle the logging of messages from Extism and WASM\\n  plugins. Useful for debugging.\\n- Updated `proto install` to auto-clean stale plugins after a successful installation."},{"id":"moon-v1.14","metadata":{"permalink":"/blog/moon-v1.14","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-09-25_moon-v1.14.mdx","source":"@site/blog/2023-09-25_moon-v1.14.mdx","title":"moon v1.14 - Improvements to running targets and toolchain versions","description":"In this release, we\'ve focused on loosening restrictions to improve the overall developer","date":"2023-09-25T00:00:00.000Z","tags":[{"inline":true,"label":"run","permalink":"/blog/tags/run"},{"inline":true,"label":"target","permalink":"/blog/tags/target"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"version","permalink":"/blog/tags/version"},{"inline":true,"label":"ci","permalink":"/blog/tags/ci"},{"inline":true,"label":"shorthand","permalink":"/blog/tags/shorthand"}],"readingTime":2.87,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.14","title":"moon v1.14 - Improvements to running targets and toolchain versions","authors":["milesj"],"tags":["run","target","toolchain","version","ci","shorthand"],"image":"./img/moon/v1.14.png"},"unlisted":false,"prevItem":{"title":"proto v0.19 - Version pinning and outdated checks","permalink":"/blog/proto-v0.19"},"nextItem":{"title":"proto v0.18 - List installed tools and configure HTTP client","permalink":"/blog/proto-v0.18"}},"content":"In this release, we\'ve focused on loosening restrictions to improve the overall developer\\nexperience.\\n\\n\x3c!--truncate--\x3e\\n\\n## Shorthand for `moon run`\\n\\nThis has been a long requested feature and we\'re happy to finally deliver it! You can now omit the\\n\\"run\\" keyword for the [`moon run`](/docs/commands/run) command, just so long as the first non-option\\nargument is a target (must contain a `:`).\\n\\n```shell\\n# v1.13\\n$ moon run app:build\\n\\n# v1.14+\\n$ moon app:build\\n```\\n\\n## Choose targets for `moon ci`\\n\\nWhen we initially built [`moon ci`](/docs/commands/ci), we wanted a solution that simply ran\\neverything in CI that _should be ran_, taking care of all the complicated logic to determine\\naffected tasks, comparing Git branches, gathering targets, partitioning across jobs, etc... And it\\ndoes just that, and it does it well!\\n\\nHowever, one major caveat to using `moon ci` is that it runs _every task_ in the workspace (assuming\\nthey\'re affected). This has been quite a blocker for adoption as teams may want fine-grained control\\nof their CI. For example, running build tasks in one job, lint tasks in another, so on and so forth.\\n\\nIn this release, we\'ve made the necessary changes to allow these workflows, by supporting a list of\\ntargets for `moon ci`, similar to how `moon run` works. If no targets are provide, the existing \\"run\\neverything\\" logic will be used.\\n\\n```shell\\n# v1.13\\n$ moon ci\\n\\n# v1.14+\\n$ moon ci :build :lint :etc\\n```\\n\\nSplitting targets across jobs is demonstrated with the following GitHub Action workflow:\\n\\n```yaml title=\\".github/workflows/ci.yml\\"\\nname: \'CI\'\\non:\\n  push:\\n    branches:\\n      - \'master\'\\n  pull_request:\\njobs:\\n  build:\\n    name: \'Build\'\\n    runs-on: \'ubuntu-latest\'\\n    steps:\\n      - uses: \'actions/checkout@v4\'\\n        with:\\n          fetch-depth: 0\\n      - uses: \'moonrepo/setup-moon-action@v1\'\\n      - run: \'moon ci :build\'\\n  format-lint:\\n    name: \'Format + Lint\'\\n    runs-on: \'ubuntu-latest\'\\n    steps:\\n      - uses: \'actions/checkout@v4\'\\n        with:\\n          fetch-depth: 0\\n      - uses: \'moonrepo/setup-moon-action@v1\'\\n      - run: \'moon ci :format :lint\'\\n  test:\\n    name: \'Test\'\\n    runs-on: \'ubuntu-latest\'\\n    steps:\\n      - uses: \'actions/checkout@v4\'\\n        with:\\n          fetch-depth: 0\\n      - uses: \'moonrepo/setup-moon-action@v1\'\\n      - run: \'moon ci :test\'\\n```\\n\\n## Configure partial toolchain versions\\n\\nSince moon\'s inception, our [integrated toolchain](/docs/concepts/toolchain) required fully\\nqualified semantic versions (major.minor.patch) for tools. This was by design to ensure that we\\ncould provide a consistent, reliable, and deterministic experience for all users. This solved the\\nproblem of \\"Is X using the correct version of Y?\\".\\n\\nHowever, this also meant that we were unable to support partial versions (major.minor) of tools,\\nwhich is a common use case and request for many users. Over the last few months, we\'ve made immense\\nprogress in [proto](/proto) on how it parses, resolves, and evaluates versions, known as the\\n[version specification](https://crates.io/crates/version_spec).\\n\\nWe felt the time was right to pull these changes into moon, and as such, all `version` fields in\\n[`.moon/toolchain.yml`](/docs/config/toolchain) now support partial versions, version\\nrequirements/ranges, and even aliases!\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nnode:\\n  version: \'20.7\' # ~20.7\\n  npm:\\n    version: \'^9\'\\n\\nrust:\\n  version: \'stable\'\\n```\\n\\n:::info\\n\\nLearn more about how this works under the hood in the\\n[official version specification documentation](/docs/concepts/toolchain#version-specification).\\n\\n:::\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.14.0) for a full list\\nof changes.\\n\\n- Added `packemon`, `sveltekit`, `vite`, `vitest` to\\n  [moonrepo/moon-configs](https://github.com/moonrepo/moon-configs).\\n- Updated `.moon/tasks` to support nested folders, for better organization of task files.\\n- Improved handling of certificates and proxies.\\n- Updated to proto v0.18."},{"id":"proto-v0.18","metadata":{"permalink":"/blog/proto-v0.18","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-09-18_proto-v0.18.mdx","source":"@site/blog/2023-09-18_proto-v0.18.mdx","title":"proto v0.18 - List installed tools and configure HTTP client","description":"Today we\'ve got a small release that includes some helpful features.","date":"2023-09-18T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"http","permalink":"/blog/tags/http"},{"inline":true,"label":"registry","permalink":"/blog/tags/registry"},{"inline":true,"label":"index","permalink":"/blog/tags/index"}],"readingTime":2.1,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.18","title":"proto v0.18 - List installed tools and configure HTTP client","authors":["milesj"],"tags":["proto","http","registry","index"],"image":"./img/proto/v0.18.png"},"unlisted":false,"prevItem":{"title":"moon v1.14 - Improvements to running targets and toolchain versions","permalink":"/blog/moon-v1.14"},"nextItem":{"title":"proto v0.17 - Experimental Python support and canary releases","permalink":"/blog/proto-v0.17"}},"content":"Today we\'ve got a small release that includes some helpful features.\\n\\n\x3c!--truncate--\x3e\\n\\n## New `proto tools` command\\n\\nAre you curious what tools you have installed? And more specifically, which versions? What about\\nconfigured aliases? Until now, you had to manually check the `~/.proto/tools` directory for this\\ninformation, but now, you can simply run [`proto tools`](/docs/proto/commands/plugin/list) to get a\\nlist of all installed tools.\\n\\nThis command will list all tools that have been installed, along with their installed versions,\\nrelevant timestamps, available aliases, and store location.\\n\\n```shell\\n$ proto tools\\ngo - Go\\n  Store: ~/.proto/tools/go\\n  Versions:\\n    1.20.0 - installed 08/24/23, last used 09/18/23\\n    1.20.2 - installed 01/01/70, last used 09/18/23, default version\\n\\nnode - Node.js\\n  Store: ~/.proto/tools/node\\n  Aliases:\\n    ~20 = stable\\n  Versions:\\n    18.0.0 - installed 09/03/23, last used 09/18/23, default version\\n    18.14.0 - installed 09/04/23, last used 09/04/23\\n    18.17.1 - installed 09/04/23, last used 09/04/23\\n    19.0.0 - installed 09/03/23\\n    20.0.0 - installed 09/03/23\\n    20.6.0 - installed 09/04/23, last used 09/18/23\\n```\\n\\n> This information can also be represented as JSON by passing the `--json` flag.\\n\\n## New `[http]` user settings\\n\\nFurthermore, we\'ve added a new\\n[`[http]` setting to `~/.proto/config.toml`](/docs/proto/config#settingshttp) that allows you to\\nconfigure aspects of the HTTP client, which is primarily used for downloading tools.\\n\\nThis may useful if you\'re behind a proxy, a VPN, or corporate network, and certain requests and\\ncertificates are blocked.\\n\\n```toml title=\\"~/.proto/config.toml\\"\\n[http]\\nproxies = [\\"http://intra.net/proxy\\"]\\nroot-cert = \\"/path/to/root/cert.pem\\"\\n```\\n\\n## Index for third-party tools\\n\\nNow that our TOML and WASM plugins have stabilized, we felt the time was right to start working on a\\nthird-party index, a registry of all available tools. We\'ve updated the official\\n[Supported tools](/docs/proto/tools) documentation to now include third-party tools.\\n\\nAt this time, the list of tools is powered by a JS/JSON object,\\n[which can be found here](https://github.com/moonrepo/moon/blob/master/website/src/data/proto-tools.tsx).\\nIn the future, we may move this to a database, add filtering, sorting, and everything else necessary\\nfor showcasing tools maintained by the community!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.18.0) for a full list\\nof changes.\\n\\n- For TOML plugins, we updated the schema internally to be represented as JSON instead of TOML,\\n  which may cause breakages depending on a version mismatch between proto and the plugin."},{"id":"proto-v0.17","metadata":{"permalink":"/blog/proto-v0.17","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-09-11_proto-v0.17.mdx","source":"@site/blog/2023-09-11_proto-v0.17.mdx","title":"proto v0.17 - Experimental Python support and canary releases","description":"This release implements two long requested features, Python language support and canary releases.","date":"2023-09-11T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"tool","permalink":"/blog/tags/tool"},{"inline":true,"label":"canary","permalink":"/blog/tags/canary"},{"inline":true,"label":"python","permalink":"/blog/tags/python"}],"readingTime":2.53,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.17","title":"proto v0.17 - Experimental Python support and canary releases","authors":["milesj"],"tags":["proto","plugin","tool","canary","python"],"image":"./img/proto/v0.17.png"},"unlisted":false,"prevItem":{"title":"proto v0.18 - List installed tools and configure HTTP client","permalink":"/blog/proto-v0.18"},"nextItem":{"title":"moon v1.13 - Toolchain now uses WASM plugins","permalink":"/blog/moon-v1.13"}},"content":"This release implements two long requested features, Python language support and canary releases.\\n\\n\x3c!--truncate--\x3e\\n\\n## Experimental Python support\\n\\nIt\'s been quite a while since we\'ve introduced a new language into proto, and we\'re excited to\\nannounce the highly requested language, Python! Since Python is now an\\n[officially supported language](https://github.com/moonrepo/python-plugin), installing Python (and\\npip) is as simple as:\\n\\n```shell\\n$ proto install python\\n```\\n\\nHowever, we\'re marking language support as experimental for the time being. We expect our\\nimplementation to work for modern Python versions, but may not work for older versions, especially\\nPython 2. The reasons for this are as follows:\\n\\n- proto will install pre-built binaries from\\n  [indygreg/python-build-standalone](https://github.com/indygreg/python-build-standalone). This is\\n  an unofficial project, and _does not_ support all Python versions.\\n- If [`python-build`](https://github.com/pyenv/pyenv/blob/master/plugins/python-build/README.md) is\\n  available, we\'ll attempt to use it to build + install Python. This currently requires `pyenv` to\\n  be installed, and _does not_ work on Windows.\\n- Furthermore, we only support `cpython` at the moment, and do not support `pypy`, `jython`, or\\n  other Python implementations. It\'s unknown whether this functionality should be in the core Python\\n  plugin, or another plugin entirely.\\n\\nIn a future proto version, we want to support a true \\"build from source\\" approach for all tools.\\nOnce that functionality has landed, we can properly support Python on all platforms, but until then,\\nlet us know how this works for you!\\n\\n## Install canary releases\\n\\nA canary release is a mechanism for rolling out new features and changes to a small subset of users,\\nwithout it being an official release on an official channel. This allows users to opt-in and test\\nfunctionality if they so choose. Canary releases are not meant to be used in production, and may\\ncontain bugs or breaking changes. A canary is similar to a nightly (or weekly) release, depending on\\nthe tool.\\n\\nWe now support this workflow in proto. To install a canary release, simply use the\\n[`--canary` flag when installing a tool](/docs/proto/commands/install):\\n\\n```shell\\n$ proto install <tool> --canary\\n```\\n\\nThis will install the latest canary release to `~/.proto/tools/<tool>/canary`, and _only_ the latest\\nrelease can be used. Re-installing with `--canary` will overwrite the previous canary installation.\\n\\nHowever, because we [detect a version to run with at runtime](/docs/proto/detection), how should you\\nactually run canary? The easiest way is to prefix the shim with an environment variable:\\n\\n```shell\\n$ PROTO_BUN_VERSION=canary bun ./index.ts\\n```\\n\\nOr to explicitly configure the version in [`.prototools`](/docs/proto/config):\\n\\n```toml\\nbun = \\"canary\\"\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.17.0) for a full list\\nof changes.\\n\\n- Added colors to command line `--help` menus.\\n- Updated the following locations to support partial versions and aliases:\\n  - Tool versions in `.prototools`.\\n  - Pinning a default version with `proto install --pin`.\\n  - Setting global version with `proto global`.\\n  - Setting local version with `proto local`.\\n- Node, npm, pnpm, and yarn will again extract a version from `package.json` engines."},{"id":"moon-v1.13","metadata":{"permalink":"/blog/moon-v1.13","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-09-05_moon-v1.13.mdx","source":"@site/blog/2023-09-05_moon-v1.13.mdx","title":"moon v1.13 - Toolchain now uses WASM plugins","description":"This is a light release that focused primarily on upgrading to the WASM based proto implementation.","date":"2023-09-05T00:00:00.000Z","tags":[{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"},{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"}],"readingTime":2.89,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.13","title":"moon v1.13 - Toolchain now uses WASM plugins","authors":["milesj"],"tags":["tasks","proto","wasm"],"image":"./img/moon/v1.13.png"},"unlisted":false,"prevItem":{"title":"proto v0.17 - Experimental Python support and canary releases","permalink":"/blog/proto-v0.17"},"nextItem":{"title":"proto v0.16 - Add, remove, and purge plugins","permalink":"/blog/proto-v0.16"}},"content":"This is a light release that focused primarily on upgrading to the WASM based proto implementation.\\n\\n\x3c!--truncate--\x3e\\n\\n## proto upgrade and WASM plugins\\n\\nOver the last few months, we\'ve made immense strides on [proto](/proto), our multi-language\\ntoolchain. For those of you unaware, moon\'s toolchain is built on top of proto, and we accomplish\\nthis by utilizing the same Rust code between both tools.\\n\\nHowever, moon has been locked to [proto v0.12](/blog/proto-v0.12), which was a purely Rust based\\nimplementation. With the release of [proto v0.13](/blog/proto-v0.13) and onward, proto has moved to\\na WASM based plugin architecture (with the core still in Rust), which allows us to support more\\nlanguages, and enables developers to write plugins in non-Rust languages.\\n\\nAnd since our WASM plugins have stabilized by [proto v0.16](/blog/proto-v0.16), we felt it was time\\nto finally upgrade moon\'s implementation to the latest and greatest. So what does this mean exactly?\\nA few things:\\n\\n- If you\'re using moon\'s [toolchain](/docs/config/toolchain) (like `node`), we will now download the\\n  [Node.js WASM plugins](https://github.com/moonrepo/node-plugin) in the background (to\\n  `~/.proto/plugins`).\\n- These plugins are in charge of downloading and installing the Node.js, npm, pnpm, or yarn version\\n  specified in your toolchain configuration.\\n- The entire plugin flow is now logged to the console, so you can see what\'s happening behind the\\n  scenes.\\n- In the future (most likely moon v2), our platform and language integration will also be powered by\\n  WASM plugins. This enables you to build your own custom plugins!\\n\\n:::info\\n\\nThis entire process should be transparent to all users, and you should not notice any changes.\\nHowever, in case this upgrade causes issues, we wanted to isolate it from other changes, hence the\\nlight release!\\n\\n:::\\n\\n## Allow tasks to fail\\n\\n\\"Allow tasks to fail?\\" You ask yourself. \\"Doesn\'t that defeat the point of a task runner?\\" You\\nquestion further. \\"You\'re not wrong!\\" We reply. These questions assume a perfect repository state,\\nwhere all tasks either pass or fail, and there\'s no middle ground. In reality, very rarely is that\\ntrue, and we want to support those stuck in the middle, such as:\\n\\n- In a heavy migration and it\'s known that a task is currently broken.\\n- The task is flaky but you\'ve been unable to find the root cause.\\n- Upstream dependencies have published a backwards incompatible change, and you\'re waiting on a fix.\\n- And of course, in the middle of adopting moon!\\n\\nFor situations where a task consistently or sometimes fails, but you don\'t want it to fail the\\nentire pipeline (especially in CI), you can enable the new\\n[`allowFailure` task option](/docs/config/project#allowfailure).\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  typecheck:\\n    command: \'tsc --build\'\\n    options:\\n      allowFailure: true\\n```\\n\\nWhen enabled, failing tasks will no longer bail [`moon run`](/docs/commands/run) early, nor will it\\nexit [`moon ci`](/docs/commands/ci) with a non-zero exit code. However, we still built guard rails\\naround this feature, as we don\'t want to encourage bad practices, and one of these guard rails is\\nthat tasks that enable `allowFailure` _cannot_ be depended on by other tasks, as we cannot guarantee\\nthat it\'s side-effect free.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.13.0) for a full list\\nof changes.\\n\\n- Added colors to command line `--help` menus.\\n- Updated `runner.archivableTargets` to support tag scoped targets.\\n- Updated `moon query tasks --affected` to filter based on affected task, instead of affected\\n  project."},{"id":"proto-v0.16","metadata":{"permalink":"/blog/proto-v0.16","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-09-04_proto-v0.16.mdx","source":"@site/blog/2023-09-04_proto-v0.16.mdx","title":"proto v0.16 - Add, remove, and purge plugins","description":"This release adds functionality for managing plugins and purging the proto store.","date":"2023-09-04T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"}],"readingTime":1.59,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.16","title":"proto v0.16 - Add, remove, and purge plugins","authors":["milesj"],"tags":["proto","plugin"]},"unlisted":false,"prevItem":{"title":"moon v1.13 - Toolchain now uses WASM plugins","permalink":"/blog/moon-v1.13"},"nextItem":{"title":"proto v0.15 - Install and uninstall globals","permalink":"/blog/proto-v0.15"}},"content":"This release adds functionality for managing plugins and purging the proto store.\\n\\n\x3c!--truncate--\x3e\\n\\n## Add and remove plugins\\n\\nNow that proto has fully embraced a plugin based architecture, we thought it\'d be nice to support\\nthe management of these plugins through the CLI. This release adds two new commands:\\n[`proto add-plugin`](/docs/proto/commands/plugin/add) and\\n[`proto remove-plugin`](/docs/proto/commands/plugin/remove).\\n\\nAdding a plugin requires a unique ID and what we call a locator, which is a string that dictates\\nwhere to locate and download the plugin from. Here\'s an example for Node.js, but this isn\'t\\nnecessary as it\'s built-in:\\n\\n```shell\\n$ proto add-plugin node source:https://github.com/moonrepo/node-plugin/releases/latest/download/node_plugin.wasm\\n```\\n\\nAdditionally, removing a plugin is even easier.\\n\\n```shell\\n$ proto remove-plugin node\\n```\\n\\n## Purge tools and plugins\\n\\nproto has supported cleaning for quite some time through the\\n[`proto clean`](/docs/proto/commands/clean) command (and the\\n[`auto-clean` setting](/docs/proto/config)), which would automatically delete installed tool\\nversions and temporary files that are older then a specific timeframe. This helps to free up disk\\nspace for unused or rarely used tools.\\n\\nIn this release, we\'re expanding the `clean` command\'s functionality with a concept known as\\npurging, which will \\"delete entirely\\". The first being the new `--purge` option, which will delete a\\ntool, its manifest, _all_ installed versions, and the entire `~/.proto/tools/<id>` directory.\\n\\n```shell\\n# Delete all traces of Node.js\\n$ proto clean --purge node\\n```\\n\\nAdditionally, a new `--purge-plugins` option can be used to delete all downloaded plugins (the\\n`~/.proto/plugins` directory). Useful for house keeping or if you want to start fresh.\\n\\n```shell\\n$ proto clean --purge-plugins\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.16.0) for a full list\\nof changes.\\n\\n- Added folder locking during tool installation to avoid colliding processes.\\n- Renamed `PROTO_ROOT` to `PROTO_HOME`, but we\'ll support `PROTO_ROOT` for the time being."},{"id":"proto-v0.15","metadata":{"permalink":"/blog/proto-v0.15","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-08-23_proto-v0.15.mdx","source":"@site/blog/2023-08-23_proto-v0.15.mdx","title":"proto v0.15 - Install and uninstall globals","description":"This is a small release that adds support for uninstalling globals, and improves our WASM APIs.","date":"2023-08-23T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"},{"inline":true,"label":"global","permalink":"/blog/tags/global"}],"readingTime":1.64,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.15","title":"proto v0.15 - Install and uninstall globals","authors":["milesj"],"tags":["proto","wasm","plugin","global"]},"unlisted":false,"prevItem":{"title":"proto v0.16 - Add, remove, and purge plugins","permalink":"/blog/proto-v0.16"},"nextItem":{"title":"moon v1.12 - Task improvements: extending, interactive, and more","permalink":"/blog/moon-v1.12"}},"content":"This is a small release that adds support for uninstalling globals, and improves our WASM APIs.\\n\\n\x3c!--truncate--\x3e\\n\\n## Uninstall global dependencies\\n\\nproto has supported [installing globals since v0.5](./proto-v0.5), but there\'s been no way to\\nuninstall an existing global, until now! In this release, we\'re introducing the\\n`proto uninstall-global` command, which will do just that! The API is exactly the same as its\\ninstallation counter-part.\\n\\n```shell\\nproto install-global node prettier\\n\\n# On second thought, nevermind...\\nproto uninstall-global node prettier\\n```\\n\\n### WASM functions\\n\\nImplementing this command was rather straight forward, but most of the work went into supporting\\n[`install_global` and `uninstall_global`](/docs/proto/wasm-plugin) functions for WASM plugins, and\\nthen updating all existing plugins! For those of you writing your own plugins, here\'s an example of\\nwhat the Rust code looks like:\\n\\n```rust\\n#[plugin_fn]\\npub fn install_global(\\n    Json(input): Json<InstallGlobalInput>,\\n) -> FnResult<Json<InstallGlobalOutput>> {\\n    let result = exec_command!(inherit, \\"npm\\", [\\"install\\", \\"--global\\", &input.dependency]);\\n\\n    Ok(Json(InstallGlobalOutput::from_exec_command(result)))\\n}\\n```\\n\\n### TOML setting\\n\\nWe\'ve also updated our TOML plugins to support uninstalling globals through the new\\n[`globals.uninstall-args`](/docs/proto/non-wasm-plugin) setting. Hopefully the name is self\\nexplanatory, but it\'s a list of arguments passed to the tool\'s binary, that\'ll uninstall the global.\\n\\n```toml\\n# ...\\n\\n[globals]\\ninstall-args = [\\"install\\", \\"--global\\", \\"{dependency}\\"]\\nuninstall-args = [\\"uninstall\\", \\"--global\\", \\"{dependency}\\"]\\n```\\n\\n## Improved WASM documentation\\n\\nWith each release we\'re slowly stabilizing the WASM and TOML APIs for an official v1 release (which\\nis soon), and with this, it requires more documentation. As part of this release, we\'ve done a giant\\npolish pass on our WASM documentation, and have included the following sections:\\n\\n- [Virtual paths](/docs/guides/wasm-plugins#virtual-paths)\\n- [Host environment](/docs/guides/wasm-plugins#host-environment)\\n- [Host functions](/docs/guides/wasm-plugins#host-functions--macros)\\n- [Tool ID and context](/docs/guides/wasm-plugins#plugin-identifier)\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.15.0) for a full list\\nof changes.\\n\\n- Major WASM API improvements, including backwards incompatible changes."},{"id":"moon-v1.12","metadata":{"permalink":"/blog/moon-v1.12","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-08-21_moon-v1.12.mdx","source":"@site/blog/2023-08-21_moon-v1.12.mdx","title":"moon v1.12 - Task improvements: extending, interactive, and more","description":"In this release, we focused heavily on improving tasks, its configuration, and related systems.","date":"2023-08-21T00:00:00.000Z","tags":[{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"},{"inline":true,"label":"inheritance","permalink":"/blog/tags/inheritance"}],"readingTime":3.35,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.12","title":"moon v1.12 - Task improvements: extending, interactive, and more","authors":["milesj"],"tags":["tasks","inheritance"],"image":"./img/moon/v1.12.png"},"unlisted":false,"prevItem":{"title":"proto v0.15 - Install and uninstall globals","permalink":"/blog/proto-v0.15"},"nextItem":{"title":"proto v0.14 - Node.js and Rust now powered by WASM plugins","permalink":"/blog/proto-v0.14"}},"content":"In this release, we focused heavily on improving tasks, its configuration, and related systems.\\n\\n\x3c!--truncate--\x3e\\n\\n## Extending sibling or inherited tasks\\n\\nThree months ago, we posted an\\n[RFC on how to support task extending / task variants](https://github.com/moonrepo/moon/issues/849).\\nOn paper this doesn\'t sound like a hard problem to solve, but internally it would of been an uphill\\nbattle to implement. Thanks to previous releases from the past few months, and the rewrite of the\\nproject graph, task builder, and more, this implementation was a breeze. To finalize the RFC, we\\nwent with option 2, by adding a new `extends` field to task configurations.\\n\\nWith this new addition, we can now rewrite this old configuration, which was needlessly\\nrepetitive...\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  lint:\\n    command: \'eslint .\'\\n    inputs:\\n      - \'@globs(sources)\'\\n      - \'@globs(tests)\'\\n      - \'*.js\'\\n      - \'.eslintrc.js\'\\n      - \'tsconfig.json\'\\n      - \'/.eslintignore\'\\n      - \'/.eslintrc.js\'\\n      - \'/tsconfig.eslint.json\'\\n      - \'/tsconfig.options.json\'\\n\\n  lint-fix:\\n    command: \'eslint . --fix\'\\n    local: true\\n    inputs:\\n      - \'@globs(sources)\'\\n      - \'@globs(tests)\'\\n      - \'*.js\'\\n      - \'.eslintrc.js\'\\n      - \'tsconfig.json\'\\n      - \'/.eslintignore\'\\n      - \'/.eslintrc.js\'\\n      - \'/tsconfig.eslint.json\'\\n      - \'/tsconfig.options.json\'\\n```\\n\\nInto the following configuration.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  lint:\\n    command: \'eslint .\'\\n    inputs:\\n      - \'@globs(sources)\'\\n      - \'@globs(tests)\'\\n      - \'*.js\'\\n      - \'.eslintrc.js\'\\n      - \'tsconfig.json\'\\n      - \'/.eslintignore\'\\n      - \'/.eslintrc.js\'\\n      - \'/tsconfig.eslint.json\'\\n      - \'/tsconfig.options.json\'\\n\\n  lint-fix:\\n    extends: \'lint\'\\n    args: \'--fix\'\\n    local: true\\n```\\n\\nWe\'re very happy with this solution, as it\'s far more readable, maintainable, and doesn\'t introduce\\nyet another paradigm to learn. Our goal was to be as familiar as possible, while providing extensive\\nfunctionality behind the scenes, which we believe to have achieved.\\n\\nSome other interesting facts around task extending:\\n\\n- When extending a task, [merge strategies](/docs/concepts/task-inheritance#merge-strategies) are\\n  applied in a similar fashion to inheritance.\\n- Inherited tasks can be extended from by project-level tasks.\\n- It\'s possible to create multiple extended chains.\\n\\n## Configure tasks as interactive\\n\\nSix months ago, we added support for [interactive tasks in v0.24](./v0.24#interactive-tasks), but\\nonly if certain conditions were met: if only 1 target is running, they are considered interactive,\\nor if the `--interactive` option was passed to [`moon run`](/docs/commands/run). However, we believe\\nit nice to support interactive tasks through task configuration directly, but it required some\\nthought into how this would work within the dependency graph and pipeline, as only 1 task can\\ninteract with stdin at a time.\\n\\nWe solved this problem by reworking our dependency graph so that interactive tasks are isolated from\\nother actions in the graph, and are not run in parallel with other actions. This will result in\\nlonger dependency chains, but results in a working stdin solution.\\n\\nTo mark a task as interactive, enable the [`options.interactive`](/docs/config/project#interactive)\\nsetting.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  init:\\n    command: \'init-app\'\\n    options:\\n      interactive: true\\n```\\n\\n## Tokens in environment variables\\n\\nUp until now, [token functions and variables](/docs/concepts/token) were only supported in task\\ncommands, args, inputs, and outputs, but not environment variables... why? Honestly, there was no\\nreal reason they weren\'t supported, it simply never crossed our mind! But thanks to requests from\\nthe community, both token functions and variables are now supported in task\\n[`env`](/docs/config/project#env-1).\\n\\nThis is great for propagating moon values to other systems. For example, say you want to use moon\\nproject names for Sentry, keeping a 1:1 mapping.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  start:\\n    command: \'run-server\'\\n    env:\\n      SENTRY_PROJECT: \'$project\'\\n```\\n\\nIf you\'re familiar with tokens, you may be asking yourself, \\"How do token functions work since they\\nexpand to a list of paths?\\" That\'s a great question! When token functions are used in an environment\\nvariable, like `@group(sources)`, the list of paths will be joined with a comma (`,`).\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    # ...\\n    env:\\n      SRCS: \'@group(sources)\'\\n```\\n\\nSince the environment variable is simply a string, you could parse it with your language of choice\\nto extract the list of paths.\\n\\n```js\\nconst paths = process.env.SRCS.split(\',\');\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.12.0) for a full list\\nof changes.\\n\\n- Added git worktree support.\\n- Updated task `outputs` to support negated globs.\\n- Will now log a warning to the console if a configuration file uses the `.yaml` extension."},{"id":"proto-v0.14","metadata":{"permalink":"/blog/proto-v0.14","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-08-11_proto-v0.14.mdx","source":"@site/blog/2023-08-11_proto-v0.14.mdx","title":"proto v0.14 - Node.js and Rust now powered by WASM plugins","description":"With this release, we\'ve finished our migration to a WASM based plugin architecture.","date":"2023-08-11T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"}],"readingTime":2.19,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.14","title":"proto v0.14 - Node.js and Rust now powered by WASM plugins","authors":["milesj"],"tags":["proto","wasm","plugin"]},"unlisted":false,"prevItem":{"title":"moon v1.12 - Task improvements: extending, interactive, and more","permalink":"/blog/moon-v1.12"},"nextItem":{"title":"moon v1.11 - Next-generation project graph","permalink":"/blog/moon-v1.11"}},"content":"With this release, we\'ve finished our migration to a WASM based plugin architecture.\\n\\n\x3c!--truncate--\x3e\\n\\n## Full migration to WASM\\n\\nIn [our last release](./proto-v0.13), we migrated the Bun, Deno, and Go plugins to WASM. In this\\nrelease, we\'re excited to announce that we have completed our WASM migration by also converting\\nNode.js (and npm, etc) and Rust to WASM plugins. We\'ve also updated our TOML plugin layer to use\\nWASM under the hood.\\n\\nWith this, 100% of our tools are now powered by WASM, and the APIs are stable enough for you, the\\nconsumers, to build your own plugins! We have plans for additional APIs in the next release,\\nprimarily installing and uninstall globals, and a hooks system, so look forward to that! To learn\\nmore about our official plugins, check out the their repositories!\\n\\n- [Bun](https://github.com/moonrepo/bun-plugin)\\n- [Deno](https://github.com/moonrepo/deno-plugin)\\n- [Go](https://github.com/moonrepo/go-plugin)\\n- [Node](https://github.com/moonrepo/node-plugin)\\n- [Rust](https://github.com/moonrepo/rust-plugin)\\n- [Schema](https://github.com/moonrepo/schema-plugin)\\n\\nThis release may seem light, but we\\n[rewrote the entire core](https://github.com/moonrepo/proto/pull/161) from the ground up to support\\na pure plugin based architecture. This was a lot of work, but our implementation is far easier to\\nwork with, and more robust. As part of this process, we improved version and range handling, archive\\nunpacking, and much more!\\n\\n> Because of the rewrite, we may have introduced a few bugs. Please report any issues!\\n\\n## Breaking changes for TOML plugins\\n\\nIn preparation for the next release, and as clean up during the rewrite, we\'ve made a few breaking\\nchanges to the TOML schema, primarily around global handling. To start, this old code:\\n\\n```toml\\n[install]\\nglobals-dir = [\\"$PROTOSTAR_HOME/bin\\", \\"$HOME/.protostar/bin\\"]\\nglobal-args = [\\"install\\", \\"--force\\", \\"{dependency}\\"]\\n```\\n\\nCan now be rewritten as:\\n\\n```toml\\n[globals]\\nlookup-dirs = [\\"$PROTOSTAR_HOME/bin\\", \\"$HOME/.protostar/bin\\"]\\ninstall-args = [\\"install\\", \\"--force\\", \\"{dependency}\\"]\\n```\\n\\nAnd lastly, the `install.unpack` setting has been removed. We believe our installation layer is\\nsmart enough to unpack or move files automatically.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.14.0) for a full list\\nof changes.\\n\\n- Versions defined in `.prototools` must be fully-qualified semantic versions. Partial versions\\n  (missing patch or minor) are no longer supported. This may change in the future based on feedback.\\n- Tool and plugin names must now be in kebab-case.\\n- Node\\n  - Yarn 2+ is now installed using `@yarnpkg/cli-dist`. We no longer downgrade to the latest v1.\\n  - Will no longer detect a version from `engines` in `package.json`.\\n- Rust\\n  - Will now detect a version/channel from `rust-toolchain.toml` and `rust-toolchain`."},{"id":"moon-v1.11","metadata":{"permalink":"/blog/moon-v1.11","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-07-31_moon-v1.11.mdx","source":"@site/blog/2023-07-31_moon-v1.11.mdx","title":"moon v1.11 - Next-generation project graph","description":"With this release, we\'ve focused heavily on rewriting our project graph for the next-generation of","date":"2023-07-31T00:00:00.000Z","tags":[{"inline":true,"label":"project-graph","permalink":"/blog/tags/project-graph"},{"inline":true,"label":"project","permalink":"/blog/tags/project"}],"readingTime":4.16,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.11","title":"moon v1.11 - Next-generation project graph","authors":["milesj"],"tags":["project-graph","project"],"image":"./img/moon/v1.11.png"},"unlisted":false,"prevItem":{"title":"proto v0.14 - Node.js and Rust now powered by WASM plugins","permalink":"/blog/proto-v0.14"},"nextItem":{"title":"proto v0.13 - Bun, Deno, and Go now powered by WASM plugins","permalink":"/blog/proto-v0.13"}},"content":"With this release, we\'ve focused heavily on rewriting our project graph for the next-generation of\\nmoon.\\n\\n\x3c!--truncate--\x3e\\n\\n## New project graph\\n\\nOne of the first features that was built for moon was the project graph, as this was required to\\ndetermine relationships between tasks and projects. Its initial implementation was rather simple, as\\nit was a basic directed acyclic graph (DAG). However, as moon grew in complexity, so did the project\\ngraph, and overtime, it has accrued a lot of cruft and technical debt.\\n\\nOne of the biggest pain points has been the project graph cache, and correctly invalidating the\\ncache for all necessary scenarios. If you\'ve been using moon for a long time, you\'re probably aware\\nof all the hot fixes and patches that have been released. Another problem with the cache, is that it\\nincluded hard-coded [file system paths](https://github.com/moonrepo/moon/issues/937) and\\n[environment variables](https://github.com/moonrepo/moon/issues/896), both of which would not\\ninvalidate the cache when changed.\\n\\nWe felt it was time to rebuild the project graph from the ground up. Some of this work has already\\nlanded in [previous releases](./moon-v1.9#rewritten-task-inheritance).\\n\\n### Old implementation\\n\\nFor those of you who are interested in the technical details, here\'s a quick overview of how the old\\nproject graph worked. To start, the graph was composed around the following phases:\\n\\n- **Build** - Projects are loaded into the graph (nodes), relationships are linked (edges),\\n  configurations are read, tasks are inherited, and platform/language rules are applied.\\n- **Expand** - In all tasks, token variables and functions are expanded/substituted, dependencies\\n  are expanded (`^:deps`, etc), `.env` files are read (when applicable), so on and so forth.\\n- **Validate** - Enforces project and task boundaries and constraints.\\n\\nThis is quite a lot of work, and it was all done in _a single pass_. What this means is that for\\neach project loaded into the graph, we would recursively build -> expand -> validate, until all\\nprojects have been loaded, synchronously at once in the same thread. Because this is a rather\\nexpensive operation, the project graph cache was introduced to avoid having to do this work on every\\nrun.\\n\\nMakes sense, right? For the most part yes, but there is a core problem with the solution above, and\\nif you\'ve noticed it already, amazing! The problem is that out of these 3 phases, only the build\\nphase is truly cacheable, as the expand and validate phases are far too dynamic and dependent on the\\nenvironment. This means that the cache is only partially effective, and in some cases, entirely\\nbroken.\\n\\nAnother unrelated problem with this solution, is that because everything is built in a single pass,\\nadvanced functionality that requires multiple passes is not possible and has been stuck on the\\nbacklog.\\n\\n### New implementation\\n\\nFor backwards compatibility, the new project graph works in a similar manner, but has none of the\\nshortcomings of the old implementation (hopefully). To start, the new project graph still has the\\nsame 3 phases, but they are _no longer processed in a single pass_, instead...\\n\\nThe build phase is now asynchronous, enabling deeper interoperability with the rest of the\\nasync-aware codebase. However, the critical change is that the project graph cache is now written\\n_after_ the build phase (and read _before_), instead of after the entire graph being generated.\\n\\n> The new cache file is `.moon/cache/states/partialProjectGraph.json`, and is named partial because\\n> tasks have not been expanded. Use `moon project-graph --json` for a fully expanded graph.\\n\\nThe expand phase has changed quite a bit. Instead of expanding everything at once, projects and\\ntasks are only expanded when they are needed. For example, if only running a single target, we\'ll\\nnow only expand that project and task, instead of _everything_ in the graph. With this change, you\\nshould potentially see performance increases, unless you\'re using `moon ci` or `moon check --all`.\\n\\nAnd lastly, validation is still the same, but has been reworked so that we can easily extend it with\\nmore validation rules in the future.\\n\\n### Unlocked features\\n\\nWith these changes to building and expanding, we\'ve unlocked a few new features that were not\\npossible before.\\n\\n- Task dependencies can now reference tag based targets. For example, say we want to build all React\\n  projects before starting our application.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  dev:\\n    command: \'next dev\'\\n    deps:\\n      - \'#react:build\'\\n```\\n\\n- Task commands and arguments will now substitute environment variables, by first checking `env`,\\n  then those from the system.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    command: \'docker build --build-arg pkg=$PKG_NAME\'\\n  env:\\n    PKG_NAME: \'foo-bar\'\\n```\\n\\n- Project dependencies can now mark relationships as `build`. This is only applicable for languages\\n  that support build dependencies, like Rust.\\n\\n```yaml title=\\"moon.yml\\"\\ndependsOn:\\n  - id: \'foo\'\\n    scope: \'build\'\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.11.0) for a full list\\nof changes.\\n\\n- Identifiers (project names, file groups, etc) can now be prefixed with underscores (`_`).\\n- Added Poetry detection support for Python projects.\\n- Added an `experiments` setting to `.moon/workspace.yml`."},{"id":"proto-v0.13","metadata":{"permalink":"/blog/proto-v0.13","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-07-21_proto-v0.13.mdx","source":"@site/blog/2023-07-21_proto-v0.13.mdx","title":"proto v0.13 - Bun, Deno, and Go now powered by WASM plugins","description":"With this release, we\'re embracing WASM even further.","date":"2023-07-21T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"}],"readingTime":2.44,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.13","title":"proto v0.13 - Bun, Deno, and Go now powered by WASM plugins","authors":["milesj"],"tags":["proto","wasm","plugin"]},"unlisted":false,"prevItem":{"title":"moon v1.11 - Next-generation project graph","permalink":"/blog/moon-v1.11"},"nextItem":{"title":"moon v1.10 - Mid-year quality of life improvements","permalink":"/blog/moon-v1.10"}},"content":"With this release, we\'re embracing WASM even further.\\n\\n\x3c!--truncate--\x3e\\n\\n## Core migration to WASM\\n\\nNow that WASM plugin support is up and running, we\'ve hit a non-ideal situation where we have\\nmultiple competing implementations for \\"tools\\" in proto. We currently have 3 different approaches:\\n\\n- Tools implemented in Rust and built into proto\'s core.\\n- TOML based plugins, with a simple Rust based wrapper.\\n- WASM based plugins.\\n\\nThis is far too many implementations to support, and makes it extremely difficult to add new\\nfeatures for tools, as it affects all 3. To remedy this situation, we\'ve decided to migrate all core\\ntools to WASM plugins, and remove the Rust based implementations. The core of proto and its CLI will\\nstill be Rust, but will be slowly migrated into a truly pluggable architecture.\\n\\nTo test drive and experiment with this solution, we\'ve migrated\\n[Bun](https://github.com/moonrepo/bun-plugin), [Deno](https://github.com/moonrepo/deno-plugin), and\\n[Go](https://github.com/moonrepo/go-plugin) into WASM plugins, and starting with this release, they\\nare purely powered by WASM and have been removed entirely from the Rust implementation.\\n\\nIn the next release, we hope to migrate Node.js and Rust as well. And in a future release, the TOML\\nplugins will be compiled into\\n[`.wat` files](https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format)\\nand loaded as WASM plugins. From here, we will have a single tool implementation, and can implement\\nsome really exciting features!\\n\\n## New `github:` plugin configuration\\n\\nAlongside the `source:` configuration strategy, plugins can now be configured with the `github:`\\nstrategy to locate WASM files from GitHub releases. For example, the `bun_plugin.wasm` file will be\\ndownloaded from our\\n[`bun-plugin`\'s latest release](https://github.com/moonrepo/bun-plugin/releases).\\n\\n[Learn more about this new locator scope!](/docs/proto/plugins)\\n\\n```toml title=\\".prototools\\"\\n[plugins]\\nbun = \\"github:moonrepo/bun-plugin\\"\\n```\\n\\n> Bun support is built into proto, there is merely an example!\\n\\n## New `proto plugins` commands\\n\\nWith the advent of plugins, we thought it would be nice to know which plugins are actually\\nconfigured and in use, without having to manually search config files across the file system, and as\\nsuch, have added a new [`proto plugins`](/docs/proto/commands/plugin/list) command.\\n\\nThis command is simple. It will list all plugins that are currently configured for the current\\nproject, by loading all `.prototools` files up the tree, and loading the user\\n`~/.proto/config.toml`.\\n\\n```shell\\n$ proto plugins\\nbun - Bun\\n  GitHub: moonrepo/bun-plugin\\n  Tag: latest\\n\\ndeno - Deno\\n  GitHub: moonrepo/deno-plugin\\n  Tag: latest\\n\\ngo - Go\\n  GitHub: moonrepo/go-plugin\\n  Tag: latest\\n```\\n\\n[Learn more about this new command!](/docs/proto/commands/plugin/list)\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.13.0) for a full list\\nof changes.\\n\\n- Added documentation for writing [unit tests for WASM plugins](/docs/proto/wasm-plugin#unit-tests).\\n- Updated `proto clean` and `proto use` to load and merge all `.prototools` from the current\\n  directory and upwards.\\n- Many WASM API improvements."},{"id":"moon-v1.10","metadata":{"permalink":"/blog/moon-v1.10","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-07-10_moon-v1.10.mdx","source":"@site/blog/2023-07-10_moon-v1.10.mdx","title":"moon v1.10 - Mid-year quality of life improvements","description":"Instead of launching a large feature this release, we\'re focusing on quality of life and developer","date":"2023-07-10T00:00:00.000Z","tags":[{"inline":true,"label":"quality","permalink":"/blog/tags/quality"},{"inline":true,"label":"life","permalink":"/blog/tags/life"},{"inline":true,"label":"qol","permalink":"/blog/tags/qol"},{"inline":true,"label":"ignore","permalink":"/blog/tags/ignore"},{"inline":true,"label":"hasher","permalink":"/blog/tags/hasher"},{"inline":true,"label":"vcs","permalink":"/blog/tags/vcs"},{"inline":true,"label":"ci","permalink":"/blog/tags/ci"},{"inline":true,"label":"debug","permalink":"/blog/tags/debug"}],"readingTime":3.77,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.10","title":"moon v1.10 - Mid-year quality of life improvements","authors":["milesj"],"tags":["quality","life","qol","ignore","hasher","vcs","ci","debug"],"image":"./img/moon/v1.10.png"},"unlisted":false,"prevItem":{"title":"proto v0.13 - Bun, Deno, and Go now powered by WASM plugins","permalink":"/blog/proto-v0.13"},"nextItem":{"title":"proto v0.12 - Experimental WASM plugins","permalink":"/blog/proto-v0.12"}},"content":"import Button from \'@site/src/ui/Button\';\\n\\nInstead of launching a large feature this release, we\'re focusing on quality of life and developer\\nexperience improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Quality improvements\\n\\nIn the past 6 months, we\'ve released over 16 versions of moon, with our official v1.0 release among\\nthem. This is extremely impressive and we\'re very proud of the progress we\'ve made. To continue this\\ntrend, we\'ll be starting a new initiative that will land quality of life improvements (instead of\\nmajor features) every 6 months, starting with this release!\\n\\n### Potential breaking changes\\n\\nWhile APIs haven\'t changed, we have introduced some fixes for edge case that could be considered\\nbreaking, but for the most part, these changes probably won\'t affect you. With that being said...\\n\\nThe first fix is that tasks configured with the same `outputs` location (including glob overlap)\\nwill now error. This is extremely problematic for caching and hydration, as multiple tasks all\\nwriting to the same output will inflate the tarball, and cause unwanted side effects. To demonstrate\\nthis, the following is now an error:\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  build:\\n    command: \'foo build\'\\n    outputs:\\n      - \'dist\'\\n\\n  compile:\\n    command: \'bar compile\'\\n    outputs:\\n      - \'dist\'\\n```\\n\\nThe other fix, which primarily applies to [`moon ci`][ci] and [`moon check`](/docs/commands/check),\\nis that a target will be skipped if one of its dependencies failed or has also been skipped.\\nPreviously the target would attempt to run and most likely fail since it relied on artifacts from\\nits dependencies (which don\'t exist). Another benefit of this change is that runs should be much\\nfaster, as we\'re not wasting time running targets that we know will fail, which is great for CI.\\n\\n### Ignore hashing input files\\n\\nWe\'re introducing 2 new settings to [`.moon/workspace.yml`](/docs/config/workspace) that\'ll provide\\nmore control over the hashing flow, [`hasher.ignorePatterns`](/docs/config/workspace#ignorepatterns)\\nand [`hasher.ignoreMissingPatterns`](/docs/config/workspace#ignoremissingpatterns).\\n\\nThe `ignorePatterns` setting can be used to entirely ignore a file (using glob patterns) from being\\nhashed, and in turn, exclude it as an input source. For example, say we want to ignore all image\\nfiles.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nhasher:\\n  ignorePatterns:\\n    - \'**/*.{png,svg}\'\\n```\\n\\nThe `ignoreMissingPatterns` setting pairs with\\n[`hasher.warnOnMissingInputs`](/docs/config/workspace#warnonmissinginputs). When enabled, moon will\\nlog a warning to the terminal that an input is missing. This is useful for uncovering\\nmisconfigurations, but can be quite noisy when inputs are truly optional. This new setting can be\\nused to filter these warnings.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nhasher:\\n  warnOnMissingInputs: true\\n  ignoreMissingPatterns:\\n    - \'**/.eslintrc.*\'\\n    - \'**/*.config.*\'\\n```\\n\\n### Customize base and head revision\\n\\nThe [`moon ci`][ci] command has always supported customizing the Git base and head revisions through\\nthe `--base` and `--head` options respectively. This was a requirement for running CI effectively,\\nby comparing across branches or commits. However, the [`moon run`][run] did not support this, as\\nthis command was designed to primarily be run locally, but it turns out, y\'all are using it in CI\\ntoo!\\n\\nTo improve the effectiveness of `moon run` in CI, we\'ve made the following improvements, all of\\nwhich require the `--remote` option to be passed.\\n\\n- Added support for `MOON_BASE` and `MOON_HEAD` environment variables, for customizing the base and\\n  head revisions respectively (also supported in `moon ci`). If not defined, will use the default\\n  branch and `HEAD`.\\n- When the current branch is the default branch, the base revision will be the previous commit.\\n  Useful for commits landing on master/main.\\n\\n## New debugging a task guide\\n\\nRunning tasks is the most common way to interact with moon, so what do you do when your task isn\'t\\nworking as expected? Diagnose it of course! However, diagnosing the root cause of a broken task can\\nbe quite daunting:\\n\\n- Is configuration wrong?\\n- What about inheritance? Or merging?\\n- Is the task platform correct?\\n- Were tokens expanded correctly?\\n- What about variable substitution?\\n- So on and so forth...\\n\\nTo help answer these questions, we\'re excited to publish an\\n[in-depth guide for debugging a task](/docs/guides/debug-task)! These steps are the same steps we\\nuse internally to diagnose reported issues, or help the Discord community. We hope you find this\\nguide extremely beneficial!\\n\\n<div class=\\"flex justify-center\\">\\n  <Button label=\\"View debugging a task guide\\" href=\\"/docs/guides/debug-task\\" size=\\"lg\\" />\\n</div>\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.10.0) for a full list\\nof changes.\\n\\n- Updated [`moon ci`][ci] to include a summary of all failed actions.\\n- Updated the run report to include stderr/stdout for all attempts.\\n\\n[ci]: /docs/commands/ci\\n[run]: /docs/commands/run"},{"id":"proto-v0.12","metadata":{"permalink":"/blog/proto-v0.12","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-07-07_proto-v0.12.mdx","source":"@site/blog/2023-07-07_proto-v0.12.mdx","title":"proto v0.12 - Experimental WASM plugins","description":"After months of hard work, we\'re excited to release our first iteration of WASM plugins for proto.","date":"2023-07-07T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"wasm","permalink":"/blog/tags/wasm"},{"inline":true,"label":"plugin","permalink":"/blog/tags/plugin"}],"readingTime":2.17,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.12","title":"proto v0.12 - Experimental WASM plugins","authors":["milesj"],"tags":["proto","wasm","plugin"]},"unlisted":false,"prevItem":{"title":"moon v1.10 - Mid-year quality of life improvements","permalink":"/blog/moon-v1.10"},"nextItem":{"title":"moon v1.9 - VCS hooks management and improved task inheritance","permalink":"/blog/moon-v1.9"}},"content":"import Button from \'@site/src/ui/Button\';\\n\\nAfter months of hard work, we\'re excited to release our first iteration of WASM plugins for proto.\\n\\n\x3c!--truncate--\x3e\\n\\n## WASM plugins\\n\\nThree months ago, we [published an RFC](https://github.com/moonrepo/proto/issues/73) for supporting\\nplugins in proto. Plugins are a must, as they allow consumers to easily extend proto with additional\\ntools, instead of them being built into proto core (which is very time consuming).\\n\\nTwo months ago, we released support for [TOML plugins](/docs/proto/non-wasm-plugin). These are very\\nsimple plugins powered by static configuration files. They\'re great for simple tools like CLIs and\\npre-built languages, as everything is powered by static HTTP URLs and file names. However, sometimes\\nyou need dynamic control...\\n\\nAnd after 2 months of development, and help from the [Extism team](https://extism.org/), we\'re\\nexcited to announce initial support for WASM plugins. WASM is a portable binary format, with\\nsandboxed access to the file system (via WASI), and the ability to execute processes and fetch URLs.\\nThis means that plugins can be written in any language that compiles to WASM, like Rust, C, C++, Go,\\nTypeScript, and more. This removes the requirement of writing Rust and contributing to proto\\ndirectly!\\n\\n<div class=\\"flex justify-center\\">\\n  <Button label=\\"View WASM plugin guide\\" href=\\"/docs/proto/wasm-plugin\\" size=\\"lg\\" />\\n</div>\\n\\n### Using WASM plugins\\n\\nOnce the `.wasm` file is publicly available for download, we can configure it as a plugin in\\n[`.prototools`](/docs/proto/config).\\n\\n```toml\\n[plugins]\\nmy-plugin = \\"source:https://domain.com/path/to/wasm/plugin.wasm\\"\\n```\\n\\nAnd execute all `proto` commands using the configured plugin identifier.\\n\\n```shell\\nproto install my-plugin\\n```\\n\\n### Example implementation\\n\\nThe official guide above walks you through creating a plugin, but to demonstrate the power of WASM\\nplugins, here\'s an example function that defines parameters for downloading and installing Node.js.\\nThis is written in Rust and using Extism\'s official PDK.\\n\\n```rust\\n#[plugin_fn]\\npub fn download_prebuilt(\\n    Json(input): Json<DownloadPrebuiltInput>,\\n) -> FnResult<Json<DownloadPrebuiltOutput>> {\\n    let version = input.env.version;\\n    let arch = input.env.arch;\\n\\n    let prefix = match input.env.os {\\n        HostOS::Linux => format!(\\"node-v{version}-linux-{arch}\\"),\\n        HostOS::MacOS => format!(\\"node-v{version}-darwin-{arch}\\"),\\n        HostOS::Windows => format!(\\"node-v{version}-win-{arch}\\"),\\n        other => {\\n            return Err(PluginError::UnsupportedPlatform {\\n                tool: NAME.into(),\\n                platform: format!(\\"{:?}\\", other),\\n            })?;\\n        }\\n    };\\n\\n    let filename = if input.env.os == HostOS::Windows {\\n        format!(\\"{prefix}.zip\\")\\n    } else {\\n        format!(\\"{prefix}.tar.xz\\")\\n    };\\n\\n    Ok(Json(DownloadPrebuiltOutput {\\n        archive_prefix: Some(prefix),\\n        download_url: format!(\\"https://nodejs.org/dist/v{version}/{filename}\\"),\\n        download_name: Some(filename),\\n        checksum_url: Some(format!(\\"https://nodejs.org/dist/v{version}/SHASUMS256.txt\\")),\\n        ..DownloadPrebuiltOutput::default()\\n    }))\\n}\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.12.0) for a full list\\nof changes."},{"id":"moon-v1.9","metadata":{"permalink":"/blog/moon-v1.9","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-06-26_moon-v1.9.mdx","source":"@site/blog/2023-06-26_moon-v1.9.mdx","title":"moon v1.9 - VCS hooks management and improved task inheritance","description":"In this release, we\'re introducing a long requested feature, VCS hooks! As well as a complete","date":"2023-06-26T00:00:00.000Z","tags":[{"inline":true,"label":"vcs","permalink":"/blog/tags/vcs"},{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"hooks","permalink":"/blog/tags/hooks"},{"inline":true,"label":"task","permalink":"/blog/tags/task"},{"inline":true,"label":"inheritance","permalink":"/blog/tags/inheritance"}],"readingTime":2.92,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.9","title":"moon v1.9 - VCS hooks management and improved task inheritance","authors":["milesj"],"tags":["vcs","git","hooks","task","inheritance"],"image":"./img/moon/v1.9.png"},"unlisted":false,"prevItem":{"title":"proto v0.12 - Experimental WASM plugins","permalink":"/blog/proto-v0.12"},"nextItem":{"title":"proto v0.11 - New shims and better logging","permalink":"/blog/proto-v0.11"}},"content":"In this release, we\'re introducing a long requested feature, VCS hooks! As well as a complete\\nrewrite of our task inheritance layer.\\n\\n\x3c!--truncate--\x3e\\n\\n## Support for VCS hooks\\n\\nIn our last release, we added support for [code ownership](./moon-v1.8), to better help teams manage\\ntheir code review and approval workflows. To continue this trend of \\"features all companies require\\nbut don\'t have a good solution for\\", we\'re adding support for VCS hooks,\\n[starting with Git](https://git-scm.com/docs/githooks).\\n\\nIf you\'re unfamiliar with Git hooks, they\'re a mechanism for running scripts before or after certain\\nGit events. For example, before a commit is added, before pushing, or after merging. Hooks can be\\nused for such situations as:\\n\\n- Ensuring commit messages abide by a certain format.\\n- Ensuring affected project\'s source code pass linting and formatting checks.\\n- Validating configuration files.\\n- And much more!\\n\\n:::info\\n\\nFor more information, view our official in-depth [VCS hooks guide](/docs/guides/vcs-hooks)!\\n\\n:::\\n\\n### New `vcs` settings\\n\\nTo support hooks, we\'re introducing the `vcs.hooks` and `vcs.syncHooks` settings to\\n[`.moon/workspace.yml`](/docs/config/workspace). The former is where you configure the list of\\ncommands to run, grouped by hook type.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nvcs:\\n  hooks:\\n    pre-commit:\\n      - \'pre-commit run\'\\n      - \'moon run :lint --affected\'\\n```\\n\\nThe latter will automatically create and sync hooks with the local VCS checkout, enabling them going\\nforward. [Learn more about enabling hooks](/docs/guides/vcs-hooks#enabling-hooks), and choosing the\\napproach that works best for you or your team!\\n\\n### New `moon sync hooks` command\\n\\nAlthough moon can [automatically create](/docs/config/workspace#synchooks) hooks when running a\\ntarget, this may be undesirable or abrasive for some developers. Instead, we also support an opt-in\\nsolution through the [`moon sync hooks`](/docs/commands/sync/hooks) command, which will manually\\ncreate the hooks.\\n\\n```shell\\n$ moon sync hooks\\n```\\n\\n## Rewritten task inheritance\\n\\nOne of the most complicated systems in moon is the task inheritance layer. On the surface, it sounds\\nrather simple, but internally it was very complicated. For common use cases, it worked very well,\\nbut for advanced use cases, how a task was \\"inherited and merged\\" was sometimes undefined behavior.\\n\\nOver the past year, we\'ve introduced many new features, such as\\n[implicit dependencies and inputs](./v0.23), [tag-based task inheritance](./moon-v1.2),\\n[project-level environment variables](./v0.23#project-level-environment-variables),\\n[custom languages](./v0.25#custom-project-language) and\\n[platforms](./v0.24#project-level-task-platform), and so much more. Each of these new features would\\nthrow yet another facet to be aware of during the task inheritance model, and over the past year, it\\nhas become rather unwieldy.\\n\\nTo rectify this situation before it becomes worse, we rewrote our\\n[project, task](https://github.com/moonrepo/moon/pull/921), and\\n[task inheritance](https://github.com/moonrepo/moon/pull/939) layers from the ground-up using a new\\nbuilder pattern, including writing all new unit tests, to properly and efficiently account for all\\nedge cases.\\n\\nGoing forward, tasks should be far more accurate and deterministic. If you encounter any weirdness,\\nit\'s either a bug/edge case that was rectified (and is no longer allowed), or a bug/edge case not\\naccounted for in our current unit test suite. Please report them either way!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.9.0) for a full list of\\nchanges.\\n\\n- Added `--clean` and `--force` flags to `moon sync codeowners` command.\\n- Updated `moon init` to detect VCS providers and resolve fully-qualified tool versions.\\n- Improved VCS file handling, caching, and performance."},{"id":"proto-v0.11","metadata":{"permalink":"/blog/proto-v0.11","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-06-25_proto-v0.11.mdx","source":"@site/blog/2023-06-25_proto-v0.11.mdx","title":"proto v0.11 - New shims and better logging","description":"This is a small release that improves shims and logs.","date":"2023-06-25T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"shim","permalink":"/blog/tags/shim"},{"inline":true,"label":"logging","permalink":"/blog/tags/logging"}],"readingTime":1.09,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.11","title":"proto v0.11 - New shims and better logging","authors":["milesj"],"tags":["proto","shim","logging"]},"unlisted":false,"prevItem":{"title":"moon v1.9 - VCS hooks management and improved task inheritance","permalink":"/blog/moon-v1.9"},"nextItem":{"title":"moon v1.8 - Code owners and shared configuration","permalink":"/blog/moon-v1.8"}},"content":"This is a small release that improves shims and logs.\\n\\n\x3c!--truncate--\x3e\\n\\n## New and improved shims\\n\\nThe core facet of proto is our shims found at `~/.proto/bin`. They exist purely to re-route tool\\nexecutions internally to proto, so that we can detect the correct version of these tools to run.\\nHowever, maintaining and creating these shims has historically been very complicated. So we chose to\\nrewrite them from the ground-up!\\n\\nAll tools should continue to function exactly as they did before, if not better. Furthermore,\\nbecause of this new shim layer, we\'re now able to create what we call \\"secondary shims\\", like\\n[`bunx` for Bun](https://bun.sh/docs/cli/bunx), `pnpx` for pnpm, and `yarnpkg` for Yarn.\\n\\n## Better logging\\n\\nproto has supported logging since its initial release behind the `PROTO_LOG` environment variable.\\nHowever, this variable wasn\'t heavily documented, nor easily discoverable. So as an alternative, we\\nnow support a global `--log` option, which can be passed to any `proto` command.\\n\\n```shell\\n$ proto install node --log trace\\n```\\n\\nOn top of this, we also ran an audit of all our log calls, to improve messaging, include additional\\ninformation, rework applicable levels, and more. They should be far more readable!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.11.0) for a full list\\nof changes."},{"id":"moon-v1.8","metadata":{"permalink":"/blog/moon-v1.8","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-06-12_moon-v1.8.mdx","source":"@site/blog/2023-06-12_moon-v1.8.mdx","title":"moon v1.8 - Code owners and shared configuration","description":"With this release, we\'ve focused on a critical facet of managing a large codebase, source code","date":"2023-06-12T00:00:00.000Z","tags":[{"inline":true,"label":"source","permalink":"/blog/tags/source"},{"inline":true,"label":"code","permalink":"/blog/tags/code"},{"inline":true,"label":"owners","permalink":"/blog/tags/owners"},{"inline":true,"label":"ownership","permalink":"/blog/tags/ownership"}],"readingTime":3.7,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.8","title":"moon v1.8 - Code owners and shared configuration","authors":["milesj"],"tags":["source","code","owners","ownership"],"image":"./img/moon/v1.8.png"},"unlisted":false,"prevItem":{"title":"proto v0.11 - New shims and better logging","permalink":"/blog/proto-v0.11"},"nextItem":{"title":"moon v1.7 - Next-generation configuration and errors","permalink":"/blog/moon-v1.7"}},"content":"With this release, we\'ve focused on a critical facet of managing a large codebase, source code\\nownership, and sharing task configuration.\\n\\n\x3c!--truncate--\x3e\\n\\n## Support for code ownership\\n\\nAn important workflow for companies of any size is reviewing code, and ensuring the right people are\\nreviewing and approving that code. This is especially true for large companies with hundreds of\\ndevelopers, or many distinct teams working in a single codebase.\\n\\nPopular VCS providers like [GitHub](https://github.com/), [GitLab](https://about.gitlab.com/), and\\n[Bitbucket](https://bitbucket.org/product/) provide built-in features to handle such workflows,\\naptly named code owners. They all achieve this through a similar mechanism, a single `CODEOWNERS`\\nfile that maps file system paths to owners (users, teams, groups, etc). These owners are then\\nrequired to approve a pull/merge request because it can be merged into the base branch.\\n\\n:::info\\n\\nFor more information, view our official in-depth [code owners guide](/docs/guides/codeowners)!\\n\\n:::\\n\\n### Generate a `CODEOWNERS`\\n\\nManaging the `CODEOWNERS` file manually can be a tedious task, especially when you have hundreds of\\nprojects. To help with this, moon can generate the `CODEOWNERS` file for you,\\n[based on project owners](#new-project-owners-setting), formatted to your VCS provider of choice.\\nThis helps to avoid an out-of-date ownership file!\\n\\nWe\'re introducing a few new workspace settings to handle this, the first is\\n[`codeowners`](/docs/config/workspace#codeowners), which enables and configure code ownership as a\\nwhole, and the second is [`vcs.provider`](/docs/config/workspace#provider), which determines the VCS\\nprovider to generate the file for (and unlocks future features).\\n\\n```yaml title=\\".moon/workspace.yml\\"\\ncodeowners:\\n  syncOnRun: true\\n  globalPaths:\\n    \'*\': [\'@admins\']\\n\\nvcs:\\n  manager: \'git\'\\n  provider: \'github\'\\n```\\n\\nThe settings above will generate the following file:\\n\\n```shell title=\\".github/CODEOWNERS\\"\\n# (workspace)\\n* @admins\\n```\\n\\nWhile this looks very simple, it really shines once projects start adding their own granular code\\nownership. Continue reading for more information!\\n\\n### New project `owners` setting\\n\\nTo make use of code owners, you\'ll need to define an [`owners`](/docs/config/project#owners) setting\\nin a project\'s [`moon.yml`](/docs/config/project) file. This setting requires a list/map of owners\\n(contributors required to review) associated to file paths/patterns, relative from the current\\nproject\'s root.\\n\\n```yaml title=\\"packages/components/moon.yml\\"\\nowners:\\n  paths:\\n    \'src/\': [\'@frontend\', \'@design-system\']\\n    \'*.config.js\': [\'@frontend-infra\']\\n    \'*.json\': [\'@frontend-infra\']\\n```\\n\\nThese paths will then be prefixed with the project source when\\n[generating the `CODEOWNERS`](#generate-a-codeowners) file.\\n\\n```shell title=\\".github/CODEOWNERS\\"\\n# components\\n/packages/components/src/ @frontend @design-system\\n/packages/components/*.config.js @frontend-infra\\n/packages/components/*.json @frontend-infra\\n```\\n\\n### New `moon sync codeowners` command\\n\\nAlthough moon can [automatically generate](/docs/config/workspace#synconrun) the `CODEOWNERS` file\\nwhen running a target, there may be situations where this is disabled, or teams/developers would\\nlike to generate the file manually. To handle this, we\'re providing the\\n[`moon sync codeowners`](/docs/commands/sync/codeowners) command, which will trigger the generation\\nprocess.\\n\\n```shell\\n$ moon sync codeowners\\n```\\n\\n## Community-driven task configuration\\n\\nA powerful but often overlooked feature of moon is the ability to\\n[share and extend task configuration](/docs/guides/sharing-config) from remote sources. This is\\nextremely useful in...\\n\\n- Providing a single source of truth for configuration.\\n- Reducing task duplication across projects.\\n- Ensuring tasks are battle-tested and ready for use.\\n\\nThe other upside of this approach is that configuration can be _community-driven_! To support this\\nas a first-class feature, we\'re launching the\\n[`moon-configs` repository](https://github.com/moonrepo/moon-configs), a collection of task\\nconfigurations for popular programming languages, frameworks, libraries, and more! As of now, the\\nrepository is kind of empty, but we\'re hoping to grow it over time, so feel free to contribute!\\n\\nIf you\'re curious how this works in practice, we\'ll use our Rust configuration as an example. The\\nentire system is based around [tag inheritance](/docs/concepts/task-inheritance), where a project\\ncan inherit tasks from a remote source, and then extend or override them as needed. For example,\\ncreate the tag-based config:\\n\\n```yaml title=\\".moon/tasks/tag-rust.yml\\"\\nextends: \'https://raw.githubusercontent.com/moonrepo/moon-configs/master/rust/tasks-workspace.yml\'\\n```\\n\\nAnd then in Rust projects that you\'d like to inherit these tasks, add the following tags:\\n\\n```yaml title=\\"<project>/moon.yml\\"\\ntags: [\'rust\']\\n```\\n\\nIt\'s as simple as that!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.8.0) for a full list of\\nchanges.\\n\\n- Added a new action to the graph, `SyncWorkspace`, that\'ll be used for workspace-level checks.\\n- Added `MOON_OUTPUT_STYLE` and `MOON_RETRY_COUNT` environment variables."},{"id":"moon-v1.7","metadata":{"permalink":"/blog/moon-v1.7","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-05-30_moon-v1.7.mdx","source":"@site/blog/2023-05-30_moon-v1.7.mdx","title":"moon v1.7 - Next-generation configuration and errors","description":"With this release, we\'ve rewritten configuration from the ground up, improved error messages, and","date":"2023-05-30T00:00:00.000Z","tags":[{"inline":true,"label":"config","permalink":"/blog/tags/config"},{"inline":true,"label":"errors","permalink":"/blog/tags/errors"}],"readingTime":2.63,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.7","title":"moon v1.7 - Next-generation configuration and errors","authors":["milesj"],"tags":["config","errors"],"image":"./img/moon/v1.7.png"},"unlisted":false,"prevItem":{"title":"moon v1.8 - Code owners and shared configuration","permalink":"/blog/moon-v1.8"},"nextItem":{"title":"proto v0.9 - New GitHub action, plugin unpacking, and more","permalink":"/blog/proto-v0.9"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nWith this release, we\'ve rewritten configuration from the ground up, improved error messages, and\\nstarted work on diagnostics!\\n\\n\x3c!--truncate--\x3e\\n\\n## Configuration rewrite\\n\\nIf you\'ve ever written Rust before, you may be familiar with the state of configuration crates in\\nthe ecosystem. There\'s only 2 viable choices to choose from, and we\'ve been using 1 of them.\\nHowever, it\'s been a constant source of friction for our use cases, and didn\'t support features that\\nwe\'ve needed (built-in validation, file extending, and more).\\n\\nAfter researching our options, and attempting to contribute upstream, we decided to build our own\\nconfiguration solution, unique to moonrepo\'s projects. As such, we\'re excited to announce\\n[schematic](https://github.com/moonrepo/schematic), the most powerful configuration crate in the\\nRust ecosystem, with built-in features like:\\n\\n- Strict parsing with serde (serilization, deserialization).\\n- Code frames in errors (when applicable).\\n- Source file/URL extending.\\n- Partial file parsing and merging.\\n- Field-level merge strategies.\\n- Recursive validation.\\n- Dynamic default and env var values.\\n- And much more!\\n\\nWe\'ve spent the last few weeks building this crate from the ground up, and migrating the moon\\ncodebase to it. It\'s been quite a feat, but we\'re very excited for what it has to offer already, and\\nwhat\'s to come!\\n\\n### Strict parsing\\n\\nWhen we fail to parse a configuration file, we now include a descriptive message of the failure, and\\nthe file that failed to parse. Typically this will be for unknown fields and invalid value types.\\n\\n<Image src={require(\'./img/moon/v1.7/parse-unknown.png\')} width=\\"90%\\" />\\n<Image src={require(\'./img/moon/v1.7/parse-type.png\')} width=\\"90%\\" />\\n\\n> We hope this bubbles up typos and incorrectly nested settings!\\n\\n### Recursive validation\\n\\nPreviously when validation would fail, we\'d return on the first error and ignore subsequent errors.\\nThis is a non-ideal experience as you\'d have to constantly run `moon` commands until all validation\\nissues have been resolved.\\n\\nNow we aggregate all validation errors, even from deeply nested fields, and present them together.\\n\\n<Image src={require(\'./img/moon/v1.7/validate.png\')} width=\\"90%\\" />\\n\\n### What\'s next?\\n\\nSince [schematic](https://github.com/moonrepo/schematic) is very young, and it hasn\'t been tested\\nheavily in the ecosystem, we expect bugs and weird edge cases to popup. If you encounter any issues,\\nplease report them immediately so that we can fix them as soon as possible!\\n\\nWith that being said, we\'ll continue to improve parsing, error messages, and unique functionality,\\nlike code frames within errors. Here\'s an example for a basic JSON file.\\n\\n<Image src={require(\'./img/moon/v1.7/code-frame.png\')} width=\\"90%\\" />\\n\\n## Better errors\\n\\nYou may have noticed the errors in the screenshots above look quite different than what we\'ve\\nrendered until now, and you are correct. Going forward, all errors will be rendered by the wonderful\\nRust crate, [miette](https://crates.io/crates/miette).\\n\\nWe\'ve introduced this crate to handle _all_ errors and diagnostics within moon, not just\\nconfiguration. So expect a much better developer experience moving forward!\\n\\n<Image src={require(\'./img/moon/v1.7/errors.png\')} width=\\"90%\\" />\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.7.0) for a full list of\\nchanges.\\n\\n- Added support for npm lockfile v3 format."},{"id":"proto-v0.9","metadata":{"permalink":"/blog/proto-v0.9","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-05-23_proto-v0.9.mdx","source":"@site/blog/2023-05-23_proto-v0.9.mdx","title":"proto v0.9 - New GitHub action, plugin unpacking, and more","description":"This is a small release that provides many internal improvements.","date":"2023-05-23T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"action","permalink":"/blog/tags/action"},{"inline":true,"label":"github","permalink":"/blog/tags/github"}],"readingTime":1.94,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.9","title":"proto v0.9 - New GitHub action, plugin unpacking, and more","authors":["milesj"],"tags":["proto","action","github"],"image":"./img/proto/v0.9.png"},"unlisted":false,"prevItem":{"title":"moon v1.7 - Next-generation configuration and errors","permalink":"/blog/moon-v1.7"},"nextItem":{"title":"moon v1.6 - Persistent tasks and task extending RFC","permalink":"/blog/moon-v1.6"}},"content":"This is a small release that provides many internal improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## New `moonrepo/setup-proto` GitHub action\\n\\nIf you\'re using proto in GitHub Actions and would love to automate the workflow as much as possible,\\nwell look no further, as we\'re introducing the\\n[moonrepo/setup-proto](https://github.com/moonrepo/setup-proto) action. Thanks to\\n[Tom Davidson](https://github.com/tomdavidson) for the initial spike of work!\\n\\nThis action will automatically install the `proto` binary globally, and cache the toolchain at\\n`~/.proto` (be sure to run `proto use` to download and install tools).\\n\\n```yaml\\n# ...\\njobs:\\n  ci:\\n    name: \'CI\'\\n    runs-on: \'ubuntu-latest\'\\n    steps:\\n      - uses: \'actions/checkout@v4\'\\n      - uses: \'moonrepo/setup-proto@v0\'\\n      - run: \'proto use\'\\n```\\n\\n> If you\'re using moon, be sure to use\\n> [moonrepo/setup-moon](https://github.com/moonrepo/setup-moon-action) instead.\\n\\n## Added `install.unpack` to TOML plugin\\n\\nOur [TOML plugins](./proto-v0.7#toml-plugins) have been quite popular, and the community has been\\nusing them to much success. However, the plugin assumed that all downloaded files are archives (tar,\\nzip) and will attempt to unpack them based on file extension. This is not always the case, as some\\ndownloads are just raw executables.\\n\\nBecause of this, unpacking would sometimes fail, or we\'d be unable to extract the correct file\\nextension. To work around this limitation, we\'re introducing a new setting, `install.unpack`, that\\ncontrols whether the downloaded file should be unpacked or not. By default this setting is `true`.\\n\\nHere\'s an example using [moon](/moon).\\n\\n```toml\\n# ...\\n\\n[platform.linux]\\ndownload-file = \\"moon-{arch}-unknown-linux-{libc}\\"\\n\\n[platform.macos]\\ndownload-file = \\"moon-{arch}-apple-darwin\\"\\n\\n[platform.windows]\\ndownload-file = \\"moon-{arch}-pc-windows-msvc.exe\\"\\n\\n[install]\\ndownload-url = \\"https://github.com/moonrepo/moon/releases/download/v{version}/{download_file}\\"\\nunpack = false\\n```\\n\\n## Initial support for `node-gyp`\\n\\nThe [`node-gyp` binary](https://github.com/nodejs/node-gyp) is required for building Node.js native\\naddons, and was previously not supported in proto. We will now create a `node-gyp` binary in\\n`~/.proto/bin` when the `npm` tool is installed. Why npm? Because `node-gyp` comes packaged with npm\\ninstead of Node.js... for some reason.\\n\\nWith that being said, this is currently experimental, as we haven\'t tested it thoroughly, and are\\nunaware of all the possible edge cases. So keep that in mind!\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.9.0) for a full list\\nof changes."},{"id":"moon-v1.6","metadata":{"permalink":"/blog/moon-v1.6","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-05-15_moon-v1.6.mdx","source":"@site/blog/2023-05-15_moon-v1.6.mdx","title":"moon v1.6 - Persistent tasks and task extending RFC","description":"In this release, we\'re introducing a new feature called persistent tasks, and an RFC for extending","date":"2023-05-15T00:00:00.000Z","tags":[{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"},{"inline":true,"label":"rfc","permalink":"/blog/tags/rfc"},{"inline":true,"label":"log","permalink":"/blog/tags/log"}],"readingTime":3.69,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.6","title":"moon v1.6 - Persistent tasks and task extending RFC","authors":["milesj"],"tags":["tasks","rfc","log"],"image":"./img/moon/v1.6.png"},"unlisted":false,"prevItem":{"title":"proto v0.9 - New GitHub action, plugin unpacking, and more","permalink":"/blog/proto-v0.9"},"nextItem":{"title":"moon v1.5 - Rust tier 2 and 3 support","permalink":"/blog/moon-v1.5"}},"content":"import Button from \'@site/src/ui/Button\';\\n\\nIn this release, we\'re introducing a new feature called persistent tasks, and an RFC for extending\\ntasks.\\n\\n\x3c!--truncate--\x3e\\n\\n## RFC: Task extending/variants\\n\\nBefore we dive into this release, we want to briefly talk about a new RFC that we\'re looking for\\nfeedback on, [task extending/variants](https://github.com/moonrepo/moon/issues/849). This is a\\nfeature that has been top-of-mind since moon\'s inception, but we haven\'t had the foundation in place\\nto support it, nor what the API should look like.\\n\\nThe gist of the RFC is that we want to support tasks that extend other tasks with additional\\narguments. This is a common workflow with npm scripts:\\n\\n```json\\n{\\n  \\"scripts\\": {\\n    \\"lint\\": \\"eslint .\\",\\n    \\"lint:fix\\": \\"npm run lint --fix\\"\\n  }\\n}\\n```\\n\\nAs consumers of moon, we\'d appreciate any feedback on the RFC before we move forward!\\n\\n<div class=\\"flex justify-center\\">\\n  <Button label=\\"View RFC\\" href=\\"https://github.com/moonrepo/moon/issues/849\\" size=\\"lg\\" />\\n</div>\\n\\n## Persistent tasks\\n\\nTasks that never complete, like servers and watchers, are known as persistent tasks. Historically we\\nhad support for these kinds of tasks through the [`local`](/docs/config/project#local) setting in\\n[`moon.yml`](/docs/config/project). This setting would modify the task for continuous execution by\\ndisabling caching, streaming output, and not running in CI.\\n\\nWhile this worked for the most part, there was one scenario that was still problematic, and that was\\nrunning multiple persistent tasks in parallel. Depending on the task dependency chain, sometimes\\nthese tasks would _not_ run in parallel, some may never start (blocked on another tasks), or the\\norder of nodes in the graph is non-ideal. A great example of this can be found in this\\n[discussion thread](https://github.com/moonrepo/moon/discussions/830).\\n\\nTo mitigate this problem, we\'re introducing a new task option,\\n[`persistent`](/docs/config/project#persistent) (which is also enabled by the `local` setting). When\\na task is marked as persistent, it will always _run last and in parallel_ within the dependency\\ngraph, after all dependencies (from all other persistent tasks) have completed.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  dev:\\n    command: \'next dev\'\\n    local: true\\n    # OR\\n    options:\\n      persistent: true\\n```\\n\\nThis is a perfect solution to running multiple development servers and tools in watch mode:\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  dev:\\n    command: \'noop\'\\n    deps:\\n      - \'frontend:dev\'\\n      - \'backend:dev\'\\n      - \'database:start\'\\n      - \'tailwind:watch\'\\n```\\n\\n## Logging migration\\n\\nThis is more of a heads up than anything, but we\'ve started an internal Rust migration from the old\\n[log](https://crates.io/crates/log) crate to the new [tracing](https://crates.io/crates/tracing)\\ncrate. Tracing provides is with far more information, metrics, and instrumentation, which we hope to\\ntake advantage of in the future.\\n\\nThis will be an ongoing migration that will last for many releases, and during this time while we\\nsupport both `log` and `tracing` in unison, the logs will be a bit noisy. We\'ll be working to clean\\nup the logs as we gradually convert the codebase.\\n\\nAnd lastly, the move to `tracing` has also caused the log output to change. For example, in the log\\nexcerpt below, all messages with \\"log\\" after the date are the old `log` crate, while the others with\\ndistinct module names are the new `tracing` crate.\\n\\n```log\\n[DEBUG 14:44:19] moon_process::command_inspector  Running command git status --porcelain --untracked-files -z  env_vars={} working_dir=\\"~/Projects/moon\\"\\n[DEBUG 14:44:19] log  Filtering based on touched status \\"all\\"  log.target=\\"moon:query:touched-files\\" log.module_path=\\"moon_cli::queries::touched_files\\" log.file=\\"crates/cli/src/queries/touched_files.rs\\" log.line=85\\n[DEBUG 14:44:19] log  Creating dependency graph  log.target=\\"moon:dep-graph\\" log.module_path=\\"moon_dep_graph::dep_builder\\" log.file=\\"crates/core/dep-graph/src/dep_builder.rs\\" log.line=35\\n[DEBUG 14:44:19] log  Running 32 actions across 5 batches  log.target=\\"moon:action-pipeline\\" log.module_path=\\"moon_action_pipeline::pipeline\\" log.file=\\"crates/core/action-pipeline/src/pipeline.rs\\" log.line=93\\n[DEBUG 14:44:19] log  Setting up Node.js 20.0.0 toolchain  log.target=\\"moon:action:setup-tool\\" log.module_path=\\"moon_action_pipeline::actions::setup_tool\\" log.file=\\"crates/core/action-pipeline/src/actions/setup_tool.rs\\" log.line=26\\n[DEBUG 14:44:19] proto_node::resolve  Resolving a semantic version for \\"20.0.0\\"\\n[DEBUG 14:44:19] proto_core::resolver:load_versions_manifest  Loading versions manifest from local cache  cache_file=~/.proto/temp/3d16d1693e83828f98bae178f181d5a01103b7f222db27cdeaec9b4950e951d7.json\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.6.0) for a full list of\\nchanges.\\n\\n- Updated long running processes to log a checkpoint indicating it\'s still running.\\n- Reworked file groups to use workspace relative paths, instead of project relative.\\n- Reworked processes to better handle command line arguments, shells, and piped stdin input."},{"id":"moon-v1.5","metadata":{"permalink":"/blog/moon-v1.5","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-05-08_moon-v1.5.mdx","source":"@site/blog/2023-05-08_moon-v1.5.mdx","title":"moon v1.5 - Rust tier 2 and 3 support","description":"With this release, we\'re announcing not just tier 2, but also tier 3 support for the Rust language.","date":"2023-05-08T00:00:00.000Z","tags":[{"inline":true,"label":"rust","permalink":"/blog/tags/rust"},{"inline":true,"label":"lang","permalink":"/blog/tags/lang"},{"inline":true,"label":"tier","permalink":"/blog/tags/tier"}],"readingTime":3.24,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.5","title":"moon v1.5 - Rust tier 2 and 3 support","authors":["milesj"],"tags":["rust","lang","tier"],"image":"./img/moon/v1.5.png"},"unlisted":false,"prevItem":{"title":"moon v1.6 - Persistent tasks and task extending RFC","permalink":"/blog/moon-v1.6"},"nextItem":{"title":"moon v1.4 - New tag target scope, MQL support for query commands, and more!","permalink":"/blog/moon-v1.4"}},"content":"import Button from \'@site/src/ui/Button\';\\n\\nWith this release, we\'re announcing not just tier 2, but also tier 3 support for the Rust language.\\n\\n\x3c!--truncate--\x3e\\n\\nAs big fans of Rust (moon is written in it), we\'re stoked to finally add full language support, and\\nto integrate our first non-JavaScript language! This release is rather massive, and required a ton\\nof internal work, most of which we\'ll skip over.\\n\\nInstead we\'ll only talk about the key features that you, the consumers, will actually care about. To\\nstart, we\'ve started working on a Rust handbook, that outlines how to enable Rust, what kind of\\nintegrations we support, and a handful of common questions.\\n\\n<div class=\\"flex justify-center\\">\\n  <Button label=\\"View Rust handbook\\" href=\\"/docs/guides/rust/handbook\\" size=\\"lg\\" />\\n</div>\\n\\n## New `rust` configurations\\n\\nLanguages in\\n[moon are enabled through configuration](/docs/how-it-works/languages#enabling-a-language) blocks in\\n[`.moon/toolchain.yml`](/docs/config/toolchain), and Rust is no different. We now support a\\n[`rust`](/docs/config/toolchain#rust) toolchain setting\\n([view all available settings](/docs/config/toolchain#rust)).\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nrust:\\n  version: \'1.69.0\'\\n```\\n\\nWhen the `rust` setting is defined, it will enable the language and\\n[deep platform integration](/docs/how-it-works/languages#tier-2--platform), and when the `version`\\nfield is defined, it will further enable\\n[toolchain support](/docs/how-it-works/languages#tier-3--toolchain). Both of these features provide\\nheavy automation, improving the overall developer experience.\\n\\nThis is fantastic, but what if another Rust project in the monorepo requires a different toolchain\\nchannel/version? If so, they can use the new [`toolchain.rust`](/docs/config/project#rust) setting\\nin [`moon.yml`](/docs/config/project) to define project-level overrides.\\n\\n```yaml title=\\"<project>/moon.yml\\"\\ntoolchain:\\n  rust:\\n    version: \'1.58.0\'\\n```\\n\\n## New `rust` task platform\\n\\nThe main benefit of Rust language support is that tasks can be ran within the context of our\\n[Rust platform integration](/docs/how-it-works/languages#tier-2--platform). This can easily be done\\nby setting the project\'s [`language`](/docs/config/project#language) to \\"rust\\" in\\n[`moon.yml`](/docs/config/project).\\n\\nThis will set the [`platform`](/docs/config/project#platform-1) of all tasks within the project to\\n\\"rust\\", unless they have been explicitly configured to something else.\\n\\n```yaml title=\\"<project>/moon.yml\\"\\nlanguage: \'rust\'\\ntype: \'application\'\\n```\\n\\nIf you\'re mixing languages within a single project, and can\'t use the `language` setting above, you\\ncan define `platform` on the task directly.\\n\\n```yaml title=\\"<project>/moon.yml\\"\\ntasks:\\n  build:\\n    command: \'cargo build\'\\n    platform: \'rust\'\\n```\\n\\n> We also attempt to detect this automatically by comparing command names and checking for the\\n> existence of files like `Cargo.toml`.\\n\\n## Updated `moon init` command\\n\\nAs part of this release, we\'ve also updated the [`moon init`](/docs/commands/init) command to\\nsupport initializing Rust. By default, the command will prompt you on whether to install Rust or\\nnot, otherwise, when `--yes` is passed, the language will be installed if a `Cargo.toml` file is\\ndetected in the destination directory.\\n\\nIf you already have a moon workspace, you can pass `--tool rust` to install Rust into the workspace.\\n\\n```shell\\n$ moon init --tool rust\\n```\\n\\n## Updated `moon docker` commands\\n\\nAnd lastly, we also want to provide a great [`Dockerfile` experience](/docs/guides/docker) when\\nusing Rust. The [`moon docker scaffold`](/docs/commands/docker/scaffold) command has been updated to\\ncopy `Cargo.toml`, `Cargo.lock`, `rust-toolchain.toml`, and other Rust/Cargo related files. When\\nusing Cargo workspaces, nested `Cargo.toml` files are also scaffolded.\\n\\n```docker\\nRUN moon docker scaffold rust-app\\n```\\n\\nFurthermore, we\'ve also updated the [`moon docker prune`](/docs/commands/docker/scaffold) command to\\nremove the entire `target` directory, greatly reducing the size of the image. Pruning makes the\\nassumption that it\'s being ran _after_ a release profile has been built.\\n\\n```docker\\nRUN moon run rust-app:build-release\\nRUN moon docker prune\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.5.0) for a full list of\\nchanges."},{"id":"moon-v1.4","metadata":{"permalink":"/blog/moon-v1.4","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-05-01_moon-v1.4.mdx","source":"@site/blog/2023-05-01_moon-v1.4.mdx","title":"moon v1.4 - New tag target scope, MQL support for query commands, and more!","description":"With this release, we\'re bringing further improvements to tags and MQL.","date":"2023-05-01T00:00:00.000Z","tags":[{"inline":true,"label":"query","permalink":"/blog/tags/query"},{"inline":true,"label":"lang","permalink":"/blog/tags/lang"},{"inline":true,"label":"tag","permalink":"/blog/tags/tag"},{"inline":true,"label":"alias","permalink":"/blog/tags/alias"}],"readingTime":1.88,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.4","title":"moon v1.4 - New tag target scope, MQL support for query commands, and more!","authors":["milesj"],"tags":["query","lang","tag","alias"],"image":"./img/moon/v1.4.png"},"unlisted":false,"prevItem":{"title":"moon v1.5 - Rust tier 2 and 3 support","permalink":"/blog/moon-v1.5"},"nextItem":{"title":"proto v0.8 - Version detection and installation improvements","permalink":"/blog/proto-v0.8"}},"content":"With this release, we\'re bringing further improvements to tags and MQL.\\n\\n\x3c!--truncate--\x3e\\n\\n## Run targets by tag with `#tag:task`\\n\\nWe love our community, as you all continuously suggest new and awesome features that haven\'t crossed\\nour minds. One such feature was the ability to run tasks for all projects with a tag,\\n[suggested by @theoephraim](https://github.com/moonrepo/moon/issues/803), which is now possible with\\nthe new [tag scope](/docs/concepts/target#by-tag), `#tag:task`.\\n\\nAs an example, we can easily lint all projects that have the `frontend` tag.\\n\\n```shell\\n$ moon run \'#frontend:lint\'\\n```\\n\\n> Because `#` is special syntax and denotes a comment, the target will need to be quoted to work\\n> correctly!\\n\\n## Updated `moon query` commands to support MQL\\n\\nLast week we announced [MQL](./moon-v1.3#run-targets-based-on-a-query), a custom query language for\\napplying filters to moon\'s project graph, primarily through the [`moon run`](/docs/commands/run)\\ncommand. We plan to slowly integrate MQL throughout moon as it provides an easy to use API, and an\\noverall better developer experience.\\n\\nAs such, we\'ve updated both [`moon query projects`](/docs/commands/query/projects) and\\n[`moon query tasks`](/docs/commands/query/tasks) to support MQL statements as an optional first\\nargument. Totally makes sense that query commands would support MQL!\\n\\n```shell\\n# Find all projects with a `lint` or `build` task\\n$ moon query projects \\"task=[lint,build]\\"\\n\\n# Find all tasks with an id that starts with \\"dev\\"\\n$ moon query tasks \\"task~dev-*\\"\\n```\\n\\n## Deprecated `node.aliasPackageNames` setting\\n\\nmoon project\'s support the [concept of aliasing](/docs/concepts/project#aliases), where\\nlanguage/ecosystem specific names are used alongside moon\'s. For example, the `name` field from\\n`package.json`. However, aliasing was off by default for Node.js projects and had to be explicitly\\nenabled with the `node.aliasPackageNames` setting.\\n\\nIn an effort to streamline moon adoption for Node.js codebases, we\'re deprecating that setting, and\\ninstead will now always inherit the `package.json` name as an alias. For example, if you\'re package\\nname was `@company/utils`, you can now run a target like so:\\n\\n```shell\\n$ moon run @company/utils:build\\n```\\n\\n> This setting is now a no-op and can be removed from your configuration.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.4.0) for a full list of\\nchanges.\\n\\n- Upgraded to proto v0.8."},{"id":"proto-v0.8","metadata":{"permalink":"/blog/proto-v0.8","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-28_proto-v0.8.mdx","source":"@site/blog/2023-04-28_proto-v0.8.mdx","title":"proto v0.8 - Version detection and installation improvements","description":"In this release, we\'re dropping some quality of life workflow improvements.","date":"2023-04-28T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"detect","permalink":"/blog/tags/detect"}],"readingTime":1.36,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.8","title":"proto v0.8 - Version detection and installation improvements","authors":["milesj"],"tags":["proto","detect"],"image":"./img/proto/v0.8.png"},"unlisted":false,"prevItem":{"title":"moon v1.4 - New tag target scope, MQL support for query commands, and more!","permalink":"/blog/moon-v1.4"},"nextItem":{"title":"moon v1.3 - Advanced run targeting and an official proto plugin","permalink":"/blog/moon-v1.3"}},"content":"In this release, we\'re dropping some quality of life workflow improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Built-in detection for `proto use`\\n\\nThe [`proto use`](/docs/proto/commands/use) command is extremely useful for bootstrapping your\\ndevelopment environment with all necessary tooling, but it had a hard requirement on the\\n[`.prototools`](/docs/proto/config) configuration file. But what if you\'re already using non-proto\\nversion files, like `.nvmrc` or `.dvmrc`? Or maybe manifest settings, like `packageManager` or\\n`engines` in `package.json`?\\n\\nGreat questions, and we agree! As such, we\'ve updated `proto use` to _also_ detect a version from\\nthe environment for the current working directory. We suggest using `.prototools`, but feel free to\\nconfigure your environments as you so choose!\\n\\n```shell\\n# Install all the things!\\n$ proto use\\n```\\n\\n## Smarter version detection\\n\\nOne of proto\'s best features is its [contextual version detection](/docs/proto/detection), but it\\ndid have 1 shortcoming. When we detected a partial version, like `1.2`, we\'d resolve to a fully\\nqualified version with the latest patch version (e.g. `1.2.3`). While this worked in most cases,\\neverytime a new patch was released upstream (e.g. `1.2.4`), proto would error and require a manual\\ninstall of this new version. This was pretty annoying as `1.2.3` and `1.2.4` are likely to be\\ncompatible, and both satisfy the `1.2` version constraint.\\n\\nTo mitigate this scenario, we\'ve updated the version detection to scan the locally installed\\nversions _first_ when encountering a partial version. This solves the problem above by allowing\\n`1.2.3` to satisfy the requirement, instead of forcing an install of `1.2.4`.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/proto/releases/tag/v0.8.0) for a full list\\nof changes."},{"id":"moon-v1.3","metadata":{"permalink":"/blog/moon-v1.3","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-24_moon-v1.3.mdx","source":"@site/blog/2023-04-24_moon-v1.3.mdx","title":"moon v1.3 - Advanced run targeting and an official proto plugin","description":"After many months of design and development, we\'re finally introducing MQL, our own unique query","date":"2023-04-24T00:00:00.000Z","tags":[{"inline":true,"label":"query","permalink":"/blog/tags/query"},{"inline":true,"label":"lang","permalink":"/blog/tags/lang"},{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"schema","permalink":"/blog/tags/schema"},{"inline":true,"label":"toml","permalink":"/blog/tags/toml"},{"inline":true,"label":"target","permalink":"/blog/tags/target"}],"readingTime":2.38,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.3","title":"moon v1.3 - Advanced run targeting and an official proto plugin","authors":["milesj"],"tags":["query","lang","proto","schema","toml","target"],"image":"./img/moon/v1.3.png"},"unlisted":false,"prevItem":{"title":"proto v0.8 - Version detection and installation improvements","permalink":"/blog/proto-v0.8"},"nextItem":{"title":"proto v0.7 - First step towards plugins","permalink":"/blog/proto-v0.7"}},"content":"After many months of design and development, we\'re finally introducing MQL, our own unique query\\nlanguage!\\n\\n\x3c!--truncate--\x3e\\n\\n## Run targets based on a query\\n\\nOur [`moon run`](/docs/commands/run) command is pretty powerful. It allows you to run targets in\\none, many, or all projects. It also supports running multiple targets in parallel. However, it\\nwasn\'t powerful enough, as it couldn\'t run the following types of scenarios:\\n\\n- Run a target in projects of a specific language.\\n- Run a target in libraries or applications.\\n- Run a target based on project file system path.\\n- Run a target in projects with a matching tag.\\n- Run a target in projects that match a keyword.\\n- Run a target in projects based on AND or OR conditions.\\n- Or a combination of these.\\n- And many more!\\n\\nSupporting all of these scenarios through CLI arguments just feels like bad design, and would result\\nin a poor developer experience. There had to be a better way to support this! So we set out to solve\\nthis problem, and after much thought, we\'re stoked to introduce\\n[MQL, a query language unique to moon](/docs/concepts/query-lang).\\n\\nWith MQL, you can now run scenarios like \\"I want to build all Node.js libraries\\", or \\"I want to lint\\nand test all Rust projects\\". Simply pass an unscoped target and a query to the `run` command:\\n\\n```shell\\n$ moon run :build --query \\"taskPlatform=node && projectType=library\\"\\n\\n$ moon run :lint :test --query \\"language=rust\\"\\n```\\n\\nThis is only the first iteration of MQL and it\'s already quite powerful. Expect additional fields,\\nfeatures, and functionality in the future!\\n\\n## Plugin support for proto\\n\\nEarlier this week we announced [plugin support for proto](./proto-v0.7), starting with a TOML based\\nplugin. This is great as it allows _any_ kind of versioned tool to be managed in proto\'s toolchain,\\nso why not moon? Starting with this release, you can now install and manage moon _from_ proto, using\\nour officially maintained TOML plugin.\\n\\nIn your `.prototools` or `~/.proto/config.toml` file, add the following snippet:\\n\\n```toml title=\\".prototools\\"\\n[plugins]\\nmoon = \\"source:https://raw.githubusercontent.com/moonrepo/moon/master/proto-plugin.toml\\"\\n```\\n\\nAnd as easy as that, you can now use `moon` as a tool within any `proto` command. For example:\\n\\n```shell\\n$ proto install moon 1.3.0\\n$ proto list-remote moon\\n$ proto bin moon\\n```\\n\\nFurthermore, with proto, we can now pin the version of moon on a per-project basis. Perfect for\\nenforcing the same version for all developers on your team!\\n\\n```toml title=\\".prototools\\"\\nmoon = \\"1.3.0\\"\\n```\\n\\n> When using this approach, be sure `~/proto/.bin` is in your `PATH`, and takes precedence over\\n> `~/.moon/bin`.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.3.0) for a full list of\\nchanges.\\n\\n- Upgraded to proto v0.7.\\n- Improved accuracy of our globbing utilities, especially around dotfiles/dotfolders.\\n- Updated config loading to be strict and error on unknown fields for non-root fields."},{"id":"proto-v0.7","metadata":{"permalink":"/blog/proto-v0.7","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-21_proto-v0.7.mdx","source":"@site/blog/2023-04-21_proto-v0.7.mdx","title":"proto v0.7 - First step towards plugins","description":"With this release, we\'re very excited to announce our initial support for plugins in proto!","date":"2023-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"plugins","permalink":"/blog/tags/plugins"}],"readingTime":2.59,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.7","title":"proto v0.7 - First step towards plugins","authors":["milesj"],"tags":["proto","plugins"],"image":"./img/proto/v0.7.png"},"unlisted":false,"prevItem":{"title":"moon v1.3 - Advanced run targeting and an official proto plugin","permalink":"/blog/moon-v1.3"},"nextItem":{"title":"moon v1.2 - Tag based task inheritance","permalink":"/blog/moon-v1.2"}},"content":"With this release, we\'re very excited to announce our initial support for plugins in proto!\\n\\n\x3c!--truncate--\x3e\\n\\n## Initial plugins architecture\\n\\nLast week we posted an [RFC for a new plugins architecture](./proto-v0.6#rfc-plugins-system) for\\nproto. We believe plugins will unlock an array of capabilities for proto, will enable the community\\nto add their own custom integrations, and the ability for tools to be managed within proto\'s\\ntoolchain.\\n\\nWe were very excited for this RFC, and couldn\'t wait, so we spent the last week prototyping\\nimplementations. We got the basics of downloading, installing, and enabling a plugin at _runtime_\\nworking incredibly fast. However, implementing the entire RFC in 1 release would have taken too\\nlong, and we wanted to avoid dropping such a large feature in a single release. Because of this,\\nwe\'ve only implemented [TOML plugins](/docs/proto/non-wasm-plugin) in this release, and will\\nimplement WASM plugins in a future release.\\n\\n### TOML plugins\\n\\nYou may be asking yourself, aren\'t plugins typically code? For the most part, yes, but after\\nbuilding a \\"version manager\\" for multiple languages, we\'ve come to the realization that many tools\\ncan simply be supported through a basic configuration file.\\n\\nAt minimum, tools require the following pieces to be managed:\\n\\n- Where and how to download the tool\\n- How to install/unpack the tool\\n- How to resolve available versions to install\\n- How to execute the tool\'s binary\\n\\nAll 4 of these pieces can be solved with a configuration file, and as such, we opted to support a\\n[TOML schema based plugin](/docs/proto/non-wasm-plugin) as an alternative to a code based plugin.\\nThe other benefits of a schema is that it\'s _easy to write, read, and maintain_, doesn\'t require any\\ncode, and doesn\'t force you into a specific programming language.\\n\\nTo demonstrate how this plugin works, here\'s an example of a [moon](/moon) TOML schema.\\n\\n```toml title=\\"moon-schema.toml\\"\\nname = \\"moon\\"\\ntype = \\"cli\\"\\n\\n[platform.linux]\\ndownload-file = \\"moon-{arch}-unknown-linux-{libc}\\"\\n\\n[platform.macos]\\ndownload-file = \\"moon-{arch}-apple-darwin\\"\\n\\n[platform.windows]\\ndownload-file = \\"moon-{arch}-pc-windows-msvc.exe\\"\\n\\n[install]\\ndownload-url = \\"https://github.com/moonrepo/moon/releases/download/v{version}/{download_file}\\"\\n\\n[resolve]\\ngit-url = \\"https://github.com/moonrepo/moon\\"\\n```\\n\\nVery simple right? With this, you can now configure moon as a plugin within proto.\\n\\n```toml title=\\".prototools\\"\\nmoon = \\"1.2.0\\"\\n\\n[plugins]\\nmoon = \\"source:./path/to/moon-schema.toml\\"\\n```\\n\\nAnd ultimately manage every version of moon through proto! Because moon is now a plugin, every\\ncommand in proto that accepts a `<tool>` argument, will now accept `moon` as a valid tool.\\n\\n```shell\\n$ proto install moon 1.2.0\\n$ proto list-remote moon\\n$ proto use\\n```\\n\\nLearn more about [TOML plugins in the official docs](/docs/proto/plugins)!\\n\\n## Cleaning improvements\\n\\nLast week we introduced the [`proto clean`](/docs/proto/commands/clean) command that will\\nautomatically delete stale and unused tools from the toolchain. This week we\'ve implemented a few\\nimprovements to the cleaning process:\\n\\n- Added a `--yes` option to [`proto clean`](/docs/proto/commands/clean), allowing prompts to be\\n  bypassed.\\n- Added a `auto-clean` setting to `~/.proto/config.toml`, enabling automatic cleaning when\\n  [`proto use`](/docs/proto/commands/use) is ran."},{"id":"moon-v1.2","metadata":{"permalink":"/blog/moon-v1.2","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-17_moon-v1.2.mdx","source":"@site/blog/2023-04-17_moon-v1.2.mdx","title":"moon v1.2 - Tag based task inheritance","description":"In this small release, we\'re improving our task inheritance and performance.","date":"2023-04-17T00:00:00.000Z","tags":[{"inline":true,"label":"tags","permalink":"/blog/tags/tags"},{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"}],"readingTime":1.4,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.2","title":"moon v1.2 - Tag based task inheritance","authors":["milesj"],"tags":["tags","tasks"],"image":"./img/moon/v1.2.png"},"unlisted":false,"prevItem":{"title":"proto v0.7 - First step towards plugins","permalink":"/blog/proto-v0.7"},"nextItem":{"title":"proto v0.6 - Unused cleaning and improved global binaries","permalink":"/blog/proto-v0.6"}},"content":"In this small release, we\'re improving our task inheritance and performance.\\n\\n\x3c!--truncate--\x3e\\n\\n## Task inheritance based on project tags\\n\\nIn v0.23 we introduced [scoped task inheritance](/blog/v0.23#improved-task-inheritance-model) by\\nproject type/language, and in v1.0 we introduced [project tagging](/blog/moon-v1.0#project-tagging),\\nbut what if we combined both of these features? In this release, you can now define workspace-level\\ntasks _by tag_ that\'ll be inherited by all projects with that tag.\\n\\nTo demonstrate this, say you have a monorepo composed of multiple [Astro](https://astro.build)\\napplications, each duplicating the same Astro tasks. Instead of duplicating, define an `astro` tag\\nin each project\'s [`moon.yml`](/docs/config/project#tags).\\n\\n```yaml title=\\"<project>/moon.yml\\"\\nlanguage: \'typescript\'\\ntype: \'application\'\\ntags: [\'astro\']\\n```\\n\\nAnd then create a new tasks configuration at `.moon/tasks/tag-astro.yml` with the following\\ncontents:\\n\\n```yaml title=\\".moon/tasks/tag-astro.yml\\"\\nfileGroups:\\n  astro:\\n    - \'public/**/*\'\\n    - \'src/**/*\'\\n    - \'astro.config.*\'\\n    - \'tsconfig.json\'\\n\\ntasks:\\n  astro:\\n    command: \'astro\'\\n    local: true\\n\\n  # Development server\\n  dev:\\n    command: \'astro dev\'\\n    local: true\\n\\n  # Production build\\n  build:\\n    command: \'astro build\'\\n    inputs: [\'@group(astro)\']\\n    outputs: [\'dist\']\\n\\n  # Check .astro files\\n  check:\\n    command: \'astro check\'\\n    inputs: [\'@group(astro)\']\\n    deps: [\'typecheck\']\\n\\n  # Preview production build locally\\n  preview:\\n    command: \'astro preview\'\\n    deps: [\'build\']\\n    local: true\\n```\\n\\nEach of these Astro applications will now inherit all 5 tasks and the file group automatically! This\\nhelps to greatly reduce maintenance overhead and help enforce consistency across projects. Jump to\\nthe official [task inheritance docs](/docs/concepts/task-inheritance) for more information on tag\\nbased inheritance.\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.2.0) for a full list of\\nchanges.\\n\\n- Upgraded to proto v0.6.\\n- Improvements to file system operations.\\n- Minor improvements to performance."},{"id":"proto-v0.6","metadata":{"permalink":"/blog/proto-v0.6","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-13_proto-v0.6.mdx","source":"@site/blog/2023-04-13_proto-v0.6.mdx","title":"proto v0.6 - Unused cleaning and improved global binaries","description":"With this release, we\'re expanding on our global binary support and providing quality of life","date":"2023-04-13T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"globals","permalink":"/blog/tags/globals"},{"inline":true,"label":"clean","permalink":"/blog/tags/clean"},{"inline":true,"label":"errors","permalink":"/blog/tags/errors"}],"readingTime":2.62,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.6","title":"proto v0.6 - Unused cleaning and improved global binaries","authors":["milesj"],"tags":["proto","globals","clean","errors"],"image":"./img/proto/v0.6.png"},"unlisted":false,"prevItem":{"title":"moon v1.2 - Tag based task inheritance","permalink":"/blog/moon-v1.2"},"nextItem":{"title":"proto v0.5 - Version aliasing and global binaries","permalink":"/blog/proto-v0.5"}},"content":"import Button from \'@site/src/ui/Button\';\\nimport Image from \'@site/src/components/Image\';\\n\\nWith this release, we\'re expanding on our global binary support and providing quality of life\\nimprovements.\\n\\n\x3c!--truncate--\x3e\\n\\n## RFC: Plugins system\\n\\nSince proto\'s inception, plugins have been top of mind, but runtime based plugins in Rust are\\n_difficult_. The only viable solution to this problem is WASM, but most developers have never used\\nWASM before, nor are they familiar with WASM tooling (myself included).\\n\\nHowever, we\'re at a point in proto\'s life-cycle where the core is rather stable, and it\'s time to\\nstart investigating plugin support. To this end, we\'ve introduced a small RFC outlining how plugins\\nwill be used, enabled, and implemented. It\'s not very in-depth as we want to avoid implementation\\ndetails, but from a consumers perspective, we want to ensure that it makes sense.\\n\\nWe\'d very much appreciate it if you could take a look at the RFC and provide feedback. If you have\\nany experience in Rust runtime plugins, we\'d love to hear your thoughts as well.\\n\\n<div class=\\"flex justify-center\\">\\n  <Button label=\\"View RFC\\" href=\\"https://github.com/moonrepo/proto/issues/73\\" size=\\"lg\\" />\\n</div>\\n\\n## Cleaning stale and unused tools\\n\\nIs your `~/.proto` installation growing out of control? Are there old versions of tools that you\\ndon\'t use anymore? Or versions you never used? Unsure if you\'re using a tool at all or still need\\nit?\\n\\nTo help avoid these questions and problems, we\'re introducing a new command that will uninstall\\nstale and unused tools, [`proto clean`](/docs/proto/commands/clean). When ran, the command will\\nlaunch an interactive session and scan the file system for old tools, prompting you to remove them.\\n\\n```shell\\n$ proto clean\\n```\\n\\nBy default the command will uninstall tools that haven\'t been used in over 30 days, but this can be\\ncustomized with the `--days` option.\\n\\n:::info\\n\\nTools installed before v0.6 will most likely be considered stale, as we weren\'t tracking install and\\nlast used timestamps. However, everything will work as intended after running a tool or simply\\nmoving forward from this point.\\n\\n:::\\n\\n## Global binary improvements\\n\\nIn our [previous release](./proto-v0.5), we announced the `proto install-global` command for\\ninstalling global dependencies that are unique per tool. Thanks to the community, this command has\\nbeen updated to support installing multiple globals at once!\\n\\n```shell\\n$ proto install-global node typescript webpack-cli\\n```\\n\\nOn top of this, we\'re also introducing another command that was requested by the community,\\n`proto list-global`, that can be used to list all currently installed globals.\\n\\n```shell\\n$ proto list-global node\\ntsc - ~/.proto/tools/node/globals/lib/node_modules/typescript/bin/tsc\\ntsserver - ~/.proto/tools/node/globals/lib/node_modules/typescript/bin/tsserver\\n```\\n\\n## Better error messages\\n\\nWe\'ve spent most of the past week working on a new internal architecture called\\n[Starbase](https://github.com/moonrepo/starbase), which will be the new foundation for proto and\\nmoon moving forward. One of the major benefits of this new architecture is a rewritten error system\\nthat provides more context and better error messages.\\n\\nHere\'s an example of this, albeit with a contrived situation:\\n\\n<Image src={require(\'./img/proto/v0.6-errors.png\')} width=\\"90%\\" />"},{"id":"proto-v0.5","metadata":{"permalink":"/blog/proto-v0.5","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-06_proto-v0.5.mdx","source":"@site/blog/2023-04-06_proto-v0.5.mdx","title":"proto v0.5 - Version aliasing and global binaries","description":"With this release, we\'re providing solutions for installing globals and using aliases.","date":"2023-04-06T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"alias","permalink":"/blog/tags/alias"},{"inline":true,"label":"globals","permalink":"/blog/tags/globals"}],"readingTime":1.9,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.5","title":"proto v0.5 - Version aliasing and global binaries","authors":["milesj"],"tags":["proto","alias","globals"],"image":"./img/proto/v0.5.png"},"unlisted":false,"prevItem":{"title":"proto v0.6 - Unused cleaning and improved global binaries","permalink":"/blog/proto-v0.6"},"nextItem":{"title":"moon v1.1 - Task debugging and improvements","permalink":"/blog/moon-v1.1"}},"content":"With this release, we\'re providing solutions for installing globals and using aliases.\\n\\n\x3c!--truncate--\x3e\\n\\n## Install global binaries\\n\\nInstalling global binaries (packages, modules, etc) is a common task for developers, and proto now\\nprovides a solution for this workflow with the `proto install-global` command. Continue reading for\\nmore information.\\n\\n:::info\\n\\nGlobal install directories will need to be added manually to your `PATH` from your shell.\\n\\n:::\\n\\n### Bun, Deno, Go, Rust\\n\\nAll of these languages provide a built-in solution for installing global binaries to a shared\\nlocation, regardless of the language\'s current version. Because of this, proto will simply call\\ntheir install commands under the hood.\\n\\n```shell\\n$ proto install-global rust cargo-release\\n\\n# Same as\\n$ cargo install cargo-release --force\\n```\\n\\nGlobals will be installed to the following locations:\\n\\n- **Bun**: `~/.bun/bin`\\n- **Deno**: `~/.deno/bin`\\n- **Go**: `~/go/bin`\\n- **Rust**: `~/.cargo/bin`\\n\\n### Node.js, npm, pnpm, yarn\\n\\nUnfortunately, the Node.js ecosystem is pretty fractured when it comes to installing global\\nbinaries. Each package manager provides their own solution for installing globals, and each has\\ntheir own quirks. The problem is further exacerbated by the fact that globals are tied to Node.js\\nversion, so if you switch versions, you lose all your previous globals!\\n\\nTo work around this, proto standardizes the global installation process for Node.js, but requires\\nall globals to be installed through proto. You can no longer use `npm install -g`, `pnpm add -g`, so\\non and so forth, and must use:\\n\\n```shell\\n$ proto install-global node webpack-cli\\n```\\n\\nGlobals will be installed to a shared location, `~/.proto/tools/node/globals/bin`, and will persist\\nacross versions!\\n\\n## Custom version aliases\\n\\nWe are excited to announce 2 new commands that enable you to define custom version aliases,\\n[`proto alias`](/docs/proto/commands/alias) and [`proto unalias`](/docs/proto/commands/unalias).\\nAliasing of versions is a feature that allows you to assign a custom name or label to a specific\\nversion of a tool.\\n\\nFor example, instead of using the version number, you can assign a label such as \\"work\\" or\\n\\"personal\\" to a version. This makes it easier to remember and manage different versions.\\n\\n```shell\\n$ proto alias node work 16.16\\n$ proto alias node personal 18\\n```\\n\\nAliases can be used anywhere a version is accepted, for example:\\n\\n```shell\\n$ proto bin node work\\n$ proto install node personal\\n```"},{"id":"moon-v1.1","metadata":{"permalink":"/blog/moon-v1.1","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-04-03_moon-v1.1.mdx","source":"@site/blog/2023-04-03_moon-v1.1.mdx","title":"moon v1.1 - Task debugging and improvements","description":"With this release, we\'re introducing some quality of life task improvements.","date":"2023-04-03T00:00:00.000Z","tags":[{"inline":true,"label":"tokens","permalink":"/blog/tags/tokens"},{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"}],"readingTime":1.83,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.1","title":"moon v1.1 - Task debugging and improvements","authors":["milesj"],"tags":["tokens","tasks"],"image":"./img/moon/v1.1.png"},"unlisted":false,"prevItem":{"title":"proto v0.5 - Version aliasing and global binaries","permalink":"/blog/proto-v0.5"},"nextItem":{"title":"proto v0.4 - Rust support, user configs, and more","permalink":"/blog/proto-v0.4"}},"content":"With this release, we\'re introducing some quality of life task improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Token variable support in task commands\\n\\nmoon supports a concept known as [tokens](/docs/concepts/token) where values are injected into tasks\\nduring project graph creation. This allows for dynamic values in your tasks, such as the current\\nproject language, or the current task name, and is crucial for task inheritance to work.\\n\\nHowever, tokens were only supported by task args, inputs, and outputs, but not commands... until\\nnow. Commands can now use token variables (but not token functions). For example, this is useful for\\nreferencing shared scripts from the workspace root.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  precheck:\\n    command: \'$workspaceRoot/scripts/precheck.sh\'\\n```\\n\\n## Run targets in closest project\\n\\nThe [`moon run`](/docs/commands/run) command can run targets in an array of different formats, but\\nwas unable to run targets based on the current working directory. Well no more! You can now run\\ntasks from the closest project based on file path by omitting `:` from the target name.\\n\\n```shell\\n$ cd packages/components\\n\\n# Runs `components:build` internally\\n$ moon run build\\n```\\n\\n## View resolved task information\\n\\nDebugging task issues can be a quite a pain, as there can be many points of failure. Are inputs too\\ngreedy? Are outputs not being created? Does it exist at all? To help with this, you can now view\\ntask information by running [`moon task <target>`](/docs/commands/task).\\n\\n```shell\\n$ moon task app:build\\n```\\n\\nThis command will display _resolved_ information, including inherited settings, and path resolved\\ninputs and outputs. Here\'s an example:\\n\\n```\\nRUNTIME:BUILD\\n\\nID: build\\nProject: runtime\\nPlatform: node\\nType: build\\n\\nPROCESS\\n\\nCommand: packemon build --addFiles --addExports --declaration\\nEnvironment variables:\\n - NODE_ENV = production\\nWorking directory: /Projects/moon/packages/runtime\\nRuns dependencies: Concurrently\\nRuns in CI: Yes\\n\\nDEPENDS ON\\n\\n - types:build\\n\\nINPUTS\\n\\n - .moon/*.yml\\n - packages/runtime/src/**/*\\n - packages/runtime/tsconfig.*.json\\n - packages/runtime/types/**/*\\n - packages/runtime/package.json\\n - packages/runtime/tsconfig.json\\n - tsconfig.options.json\\n\\nOUTPUTS\\n\\n - packages/runtime/cjs\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.1.0) for a full list of\\nchanges.\\n\\n- Support pnpm v8\'s new lockfile format.\\n- Better handling for task\'s that execute the `moon` binary.\\n- Updated `noop` tasks to be cacheable, so that they can be used for cache hit early returns."},{"id":"proto-v0.4","metadata":{"permalink":"/blog/proto-v0.4","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-03-31_proto-v0.4.mdx","source":"@site/blog/2023-03-31_proto-v0.4.mdx","title":"proto v0.4 - Rust support, user configs, and more","description":"With this release, we\'ve added Rust language support, user configs, and a few other improvements.","date":"2023-03-31T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"rust","permalink":"/blog/tags/rust"},{"inline":true,"label":"config","permalink":"/blog/tags/config"}],"readingTime":1.52,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.4","title":"proto v0.4 - Rust support, user configs, and more","authors":["milesj"],"tags":["proto","rust","config"],"image":"./img/proto/v0.4.png"},"unlisted":false,"prevItem":{"title":"moon v1.1 - Task debugging and improvements","permalink":"/blog/moon-v1.1"},"nextItem":{"title":"moon v1.0 - Official release! Project constraints, tagging, and more!","permalink":"/blog/moon-v1.0"}},"content":"With this release, we\'ve added Rust language support, user configs, and a few other improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Rust language support\\n\\nWe\'re very excited to announce support for the [Rust language](https://www.rust-lang.org/) in proto.\\nThis is our first language addition since the initial release, and we\'re very happy with how it\\nturned out.\\n\\n```shell\\n$ proto install rust stable\\n```\\n\\nFor those of you unfamiliar with Rust, Rust provides its own toolchain manager through\\n[`rustup`](https://rustup.rs/) \u2014 a very powerful one at that. We don\'t want to reinvent the wheel\\nhere, so instead of downloading and installing Rust into proto\'s toolchain, we chose to call\\n`rustup` commands under the hood. Because of this, Rust support in proto requires Rust/Cargo to be\\npre-installed on your system. Jump to the [docs for more information](/docs/proto/tools).\\n\\nAll in all, the cool thing about supporting Rust in proto is that you can standardize all your tools\\nin a single config for [`proto use`](/docs/proto/commands/use).\\n\\n```toml title=\\".prototools\\"\\nnode = \\"18.2.0\\"\\nrust = \\"1.68.0\\"\\n```\\n\\n## New user configuration\\n\\nWe have a long list of ideas and features that would be cool to support in proto, but not as the\\ndefault functionality. Because of this, we required a way for users to opt-in to this functionality,\\nand have landed on a new user configuration located at `~/.proto/config.toml`.\\n\\n```toml title=\\"~/.proto/config.toml\\"\\nauto-install = true\\n```\\n\\nThis new configuration only supports a single setting (for now), `auto-install`, that when enabled,\\nwill automatically install a missing tool for the detected version when running\\n[`proto run`](/docs/proto/commands/run) (or a shim).\\n\\n## New `proto upgrade` command\\n\\nWe now provide a [`proto upgrade`](/docs/proto/commands/upgrade) command for upgrading proto itself.\\nThis will download the latest version and replace the binary at `~/.proto/bin/proto`.\\n\\n```shell\\n$ proto upgrade\\n```"},{"id":"moon-v1.0","metadata":{"permalink":"/blog/moon-v1.0","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-03-27_moon-v1.0.mdx","source":"@site/blog/2023-03-27_moon-v1.0.mdx","title":"moon v1.0 - Official release! Project constraints, tagging, and more!","description":"\ud83c\udf89 It\'s finally here! After almost a year of development, a handful of breaking changes, we\'ve","date":"2023-03-27T00:00:00.000Z","tags":[{"inline":true,"label":"projects","permalink":"/blog/tags/projects"},{"inline":true,"label":"constraints","permalink":"/blog/tags/constraints"},{"inline":true,"label":"tags","permalink":"/blog/tags/tags"},{"inline":true,"label":"env-vars","permalink":"/blog/tags/env-vars"},{"inline":true,"label":"tokens","permalink":"/blog/tags/tokens"}],"readingTime":5.12,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.0","title":"moon v1.0 - Official release! Project constraints, tagging, and more!","authors":["milesj"],"tags":["projects","constraints","tags","env-vars","tokens"],"image":"./img/moon/v1.0.png"},"unlisted":false,"prevItem":{"title":"proto v0.4 - Rust support, user configs, and more","permalink":"/blog/proto-v0.4"},"nextItem":{"title":"proto v0.3 - Improved npm, go, and version requirement support","permalink":"/blog/proto-v0.3"}},"content":"\ud83c\udf89 It\'s finally here! After almost a year of development, a handful of breaking changes, we\'ve\\nofficially reached a stable v1 of moon! This release is feature packed with quality of life\\nimprovements.\\n\\n\x3c!--truncate--\x3e\\n\\n## The road to v1\\n\\nIt\'s been 10 months since moon launched publicly, and since that time we have landed 501 pull\\nrequests, fixed 100\'s of bugs, made 16 breaking changes, released 26 versions, and have been used by\\ncompanies like Ikea, SumUp, Depot, and Gallery. It\'s been a wild ride, and we\'re excited to finally\\nreach a stable v1 release.\\n\\n## Project boundaries with constraints\\n\\nOne feature that moon has not supported, but is critical for large monorepos, is project boundaries.\\nA project boundary is a concept that enforces a strict relationship between projects, and is a\\ncommon pattern in monorepos. For example, a project may only be allowed to depend on projects with a\\n[specific tag](#enforce-relationships-with-tags), or a project of a specific type.\\n\\nmoon now supports this functionality through the new\\n[`constraints`](/docs/config/workspace#constraints) setting in\\n[`.moon/workspace.yml`](/docs/config/workspace). The primary constraint we\'re introducing is\\n[`enforceProjectTypeRelationships`](/docs/config/workspace#enforceprojecttyperelationships), which\\nenforces relationships between projects based on their [`type`](/docs/config/project#type) field.\\n\\nFor example, an application can only depend on library or tool based projects, but _not_ other\\napplications (this is a code smell). This setting is enabled by default!\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nconstraints:\\n  enforceProjectTypeRelationships: true\\n```\\n\\nAnd that\'s not all, continue reading for more information on tag based constraints!\\n\\n## Project tagging\\n\\nEveryone is familiar with the concept of tagging, and moon\'s implementation is no different. Tags\\nare a simple mechanism for categorizing projects, and can be defined through the\\n[`tags`](/docs/config/project#tags) setting in [`moon.yml`](/docs/config/project).\\n\\n```yaml title=\\"moon.yml\\"\\ntags:\\n  - \'react\'\\n  - \'prisma\'\\n```\\n\\nTags can be used to group projects together for easier querying, enforcing of project boundaries,\\napplying constraints, and more in the future. Tags will become a staple for maintaining repositories\\nat scale. Continue reading for more information!\\n\\n### Querying projects by tag\\n\\nThe first integration with tags is project querying. You can now query for projects by tag using the\\nnew `--tags` option in the [`moon query projects`](/docs/commands/query/projects) command. For\\nexample, say you want to find all projects that are tagged with `vue` or `trpc`:\\n\\n```shell\\n$ moon query projects --tags \'vue|trpc\'\\n```\\n\\n### Enforce relationships with tags\\n\\nAnother feature of tags is enforcing relationships between projects using our new\\n[`constraints`](#project-boundaries-with-constraints) setting. When a tagged constraint is defined,\\nit requires all [dependencies](/docs/concepts/project#dependencies) of a tagged project to require 1\\nof the configured tags, otherwise an error is thrown during project graph creation.\\n\\nTo demonstrate this, take the following configuration:\\n\\n```yaml title=\\".moon/workspace.yml\\" {2,3}\\nconstraints:\\n  tagRelationships:\\n    next: [\'react\', \'trpc\']\\n```\\n\\nThis dictates that all dependencies of a project with the `next` tag, must declare either `react`,\\n`trpc`, or `next` in their own tags. This is great for crafting a monorepo with strict project\\nboundaries!\\n\\n## Shells for system tasks\\n\\nUp until now, all executed tasks would not be wrapped in a shell for 1 reason, to ensure tasks are\\ndeterministic. A major goal for moon is that tasks are deterministic and easily reproducible across\\nall machines. Shells break this guarantee, as they can introduce subtle bugs that are difficult to\\ndiagnose, and may differ wildly between developers and machines.\\n\\nHowever in practice, not supporting shells has been a major pain point for many users, and for the\\nmost part, most system tasks typically run common commands or execute pre-defined scripts. The\\nchance of a non-deterministic build is very small. As such, we\'ve decided to make a compromise, and\\nallow shells for [system tasks](/docs/config/project#platform-1), but not for language based tasks.\\n\\nFor example, the following tasks:\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  example:\\n    command: \'echo $PWD\'\\n    platform: \'system\'\\n  global:\\n    command: \'bin-on-path\'\\n    platform: \'system\'\\n```\\n\\nWould now be executed as `/bin/sh -c \'echo $PWD\'` and `/bin/sh -c \'bin-on-path\'` on Unix platforms\\nrespectively. On Windows, we execute tasks with `pwsh.exe -c` and pass arguments via stdin.\\n\\nWe\'re also taking this a step further, by introducing a new task option called\\n[`shell`](/docs/config/project#shell), that can be used to toggle the shell wrapping on or off. When\\nturned off, this allows you to customize and execute the shell as you please.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  example:\\n    command: \'bash -c \\"echo $PWD\\"\'\\n    platform: \'system\'\\n    options:\\n      shell: false\\n```\\n\\n## Environment variable substitution\\n\\nmoon supports granular environment variables through the project-level\\n[`env`](/docs/config/project#env) setting, task-level [`env`](/docs/config/project#env-1) setting,\\nand the task [`envFile`](/docs/config/project#envfile) option. We\'re expanding their functionality\\nwith variable substitution, allowing the value of another environment variable to be interpolated\\nusing the syntax `${VAR_NAME}`. This is especially useful for composing complex environment\\nvariables.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  dev:\\n    command: \'app start\'\\n    env:\\n      APP_TARGET: \'${REGION}-${ENVIRONMENT}\'\\n```\\n\\nThe same substitution syntax can also be used within `.env` files.\\n\\n```toml title=\\".env\\"\\nAPP_TARGET=\\"${REGION}-${ENVIRONMENT}\\"\\n```\\n\\n## Date/time token variables\\n\\n[Tokens](/docs/concepts/token) are a mechanism used in task configuration for dynamically injecting\\nvalues from the current project or task, especially when task inheritance is involved. Tokens have\\nexisted since moon\'s inception, without much change... until now.\\n\\nWe\'re excited to introduce a new set of tokens for referencing the\\n[current date or time](/docs/concepts/token#datetime): `$date`, `$time`, `$datetime`, and\\n`$timestamp`. With these new tokens, you\'re now able to implement clever or unusual solutions, like\\ngrouping builds or deploys based on the current timestamp.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  deploy:\\n    command: \'app deploy --output ./build/$timestamp\'\\n```\\n\\n## Other changes\\n\\nView the [official release](https://github.com/moonrepo/moon/releases/tag/v1.0.0) for a full list of\\nchanges.\\n\\n- Added a `hasher.warnOnMissingInputs` setting to `.moon/workspace.yml`.\\n- Added a `$projectAlias` task token.\\n- Added a `telemetry` setting to `.moon/workspace.yml`.\\n- Updated the new version check to only run on the `check`, `ci`, `run`, and `sync` commands.\\n\\n## What\'s next?\\n\\nExpect the following in the v1.1 release!\\n\\n- Polish and stability initiatives.\\n- Task inheritance based on tags.\\n- Deno tier 3 support."},{"id":"proto-v0.3","metadata":{"permalink":"/blog/proto-v0.3","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-03-15_proto-v0.3.mdx","source":"@site/blog/2023-03-15_proto-v0.3.mdx","title":"proto v0.3 - Improved npm, go, and version requirement support","description":"With this release, we\'re improving some workflows and version detection logic based on initial","date":"2023-03-15T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"npm","permalink":"/blog/tags/npm"},{"inline":true,"label":"go","permalink":"/blog/tags/go"}],"readingTime":1.36,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto-v0.3","title":"proto v0.3 - Improved npm, go, and version requirement support","authors":["milesj"],"tags":["proto","npm","go"],"image":"./img/proto/v0.3.png"},"unlisted":false,"prevItem":{"title":"moon v1.0 - Official release! Project constraints, tagging, and more!","permalink":"/blog/moon-v1.0"},"nextItem":{"title":"moon v0.26 - Deeper proto integration, Docker setup, and query commands","permalink":"/blog/v0.26"}},"content":"With this release, we\'re improving some workflows and version detection logic based on initial\\nfeedback.\\n\\n\x3c!--truncate--\x3e\\n\\n## Bundled npm support\\n\\nAfter Node.js is installed, the version of npm that came bundled with that Node.js version will also\\nbe installed into proto. This functionality can be skipped by passing `--no-bundled-npm` during\\ninstallation.\\n\\n```shell\\n$ proto install node -- --no-bundled-npm\\n```\\n\\nTo further expand upon this, `bundled` is now considered a built-in alias, and will be used during\\nversion detection. When encountered, we\'ll first detect the version of Node.js running, and infer\\nthe npm version from there.\\n\\n```shell\\n$ proto global npm bundled\\n```\\n\\n> Only supported by proto, not moon.\\n\\n## Automatic `GOBIN` setup\\n\\nAfter Go is installed, we\'ll now inject a `GOBIN` environment variable into your shell, pointing to\\n`~/go/bin`, if it doesn\'t already exist. This variable will be used to locate Go binaries across all\\ninstalled versions, and help to avoid binary not found errors.\\n\\nThis functionality can be skipped by passing `--no-gobin` during installation.\\n\\n```shell\\n$ proto install go -- --no-gobin\\n```\\n\\n> Only supported by proto, not moon.\\n\\n## Better version requirement detection\\n\\nPreviously when proto encountered a version requirement (`^`, `~`, `>=`, etc) during version\\ndetection, we would attempt to resolve a version that satisfied the requirement based on versions\\navailable in the remote manifest (what\'s been officially released). While this worked, it would\\nresult in far too many local installs as that satisfied version constantly changed.\\n\\nInstead, we now satisfy the version requirement based on versions that have been installed locally\\nto `~/.proto/tools`. If no version matches, detection will simply move on to the next case, and\\neventually fallback to the global default version."},{"id":"v0.26","metadata":{"permalink":"/blog/v0.26","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-03-13_v0.26.mdx","source":"@site/blog/2023-03-13_v0.26.mdx","title":"moon v0.26 - Deeper proto integration, Docker setup, and query commands","description":"With this release, we\'re providing deeper integration with our new proto toolchain","date":"2023-03-13T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"docker","permalink":"/blog/tags/docker"},{"inline":true,"label":"query","permalink":"/blog/tags/query"},{"inline":true,"label":"hash","permalink":"/blog/tags/hash"}],"readingTime":3.39,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.26","title":"moon v0.26 - Deeper proto integration, Docker setup, and query commands","authors":["milesj"],"tags":["proto","docker","query","hash"],"image":"./img/v0.26.png"},"unlisted":false,"prevItem":{"title":"proto v0.3 - Improved npm, go, and version requirement support","permalink":"/blog/proto-v0.3"},"nextItem":{"title":"Introducing proto, a next-generation toolchain manager!","permalink":"/blog/proto"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport Button from \'@site/src/ui/Button\';\\nimport Logo from \'../static/brand/proto/logo.svg\';\\n\\nWith this release, we\'re providing deeper integration with our new [proto](/proto) toolchain\\nmanager, better Docker support, and new query commands for debugging.\\n\\n\x3c!--truncate--\x3e\\n\\n## Full proto toolchain integration\\n\\n<div className=\\"float-right ml-4 mb-1\\" style={{ width: \'50%\' }}>\\n  <Logo />\\n</div>\\n\\nEarlier this week we announced [proto](/proto), our own toolchain manager, and an attempt at a next\\ngeneration version manager for multiple languages. proto was originally moon\'s toolchain layer, but\\nwe felt it best to extract it out into a stand-alone tool for everyone to use, especially those not\\nusing moon!\\n\\nNow that proto has been released, we\'ve updated moon\'s Rust internals to utilize proto\'s latest Rust\\ncrates. For the most part, everything will continue to work the same. However, the biggest change is\\nthat the toolchain has moved from `~/.moon` to `~/.proto`, and will result in tools being\\nre-downloaded and installed. Feel free to delete the old `~/.moon` directory manually.\\n\\nFurthermore, we\'ve added first-class support for the new [`.prototools`](/docs/proto/config)\\nconfiguration file. If this file is found in the workspace root, we\'ll automatically enable the\\ntools in our toolchain, and inject the versions (when not defined in `.moon/toolchain.yml`).\\n\\n```toml title=\\".prototools\\"\\nnode = \\"18.0.0\\"\\npnpm = \\"7.29.0\\"\\n```\\n\\n## New `moon docker setup` command\\n\\nmoon has provided [built-in `Dockerfile` support](/docs/guides/docker) since v0.15 (11 versions\\nago!) and we\'ve always encouraged the use of the [`moon setup`](/docs/commands/setup) command to\\nsetup the toolchain and install project dependencies. Here\'s an example of a moon powered\\n`Dockerfile`:\\n\\n```docker\\nFROM node:latest\\nWORKDIR /app\\n\\n# Install moon binary\\nRUN npm install -g @moonrepo/cli\\n\\n# Copy workspace skeleton\\nCOPY ./.moon/docker/workspace .\\n\\n# Install toolchain and dependencies\\nRUN moon setup\\n\\n# Copy source files\\nCOPY ./.moon/docker/sources .\\n\\n# Build something\\nRUN moon run app:build\\n\\n# Prune workspace\\nRUN moon docker prune\\n\\nCMD [\\"moon\\", \\"run\\", \\"app:start\\"]\\n```\\n\\nHowever, over the course of these 11 releases since v0.15, we refactored the `moon setup` command to\\nonly setup the toolchain, and _no longer_ install project dependencies. We inadvertently broke our\\nDocker integration. This was an oversight on our part.\\n\\nTo rectify this situation, we\'re introducing a new\\n[`moon docker setup`](/docs/commands/docker/setup) command that will efficiently install\\ndependencies for projects focused/affected within the `Dockerfile`. This is a much better solution\\nthan before, and you should see improved Docker layer caching!\\n\\n```diff\\n-RUN moon setup\\n+RUN moon docker setup\\n```\\n\\n## New `moon query hash` command\\n\\nWhen moon runs a task, we generate a unique hash representing the state of that run. When something\\ngoes wrong however, and the hash is different than what you expect, debugging why is rather\\nnon-trivial and requires a lot of internal knowledge. We\'re looking to reduce this burden, by\\nintroducing the new [`moon query hash`](/docs/commands/query/hash) command.\\n\\n```shell\\n$ moon query hash 0b55b234\\n```\\n\\nThis command will print the contents of the hash manifest, which is all inputs and sources used to\\ngenerate the unique hash. From here you can use this output to investigate what\'s actually\\nhappening.\\n\\n```json\\n{\\n  \\"command\\": \\"build\\",\\n  \\"args\\": [\\"./build\\"]\\n  // ...\\n}\\n```\\n\\n## New `moon query hash-diff` command\\n\\nExpanding on the new command above, we\'re also introducing the\\n[`moon query hash-diff`](/docs/commands/query/hash-diff) command, which can be used to compute the\\ndifference between 2 hashes. Perfect in understanding what has changed between ran tasks.\\n\\n```shell\\n$ moon query hash-diff 0b55b234 2388552f\\n```\\n\\nWhen ran, the command will print out the differences as highlighted lines. If you use `git diff`,\\nthis will feel familiar to you.\\n\\n```diff\\n{\\n\\t\\"command\\": \\"build\\",\\n\\t\\"args\\": [\\n+\\t\\t\\"./dist\\"\\n-\\t\\t\\"./build\\"\\n\\t],\\n\\t...\\n}\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.26.0) for a\\nfull list of changes.\\n\\n- A handful of critical bug fixes.\\n- Targets that generate an empty hash are now considered a failure, as they may be an edge case not\\n  accounted for.\\n\\n## What\'s next?\\n\\nExpect the following in the v1 release!\\n\\n- Officially release a v1!\\n- Project tagging and constraints."},{"id":"proto","metadata":{"permalink":"/blog/proto","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-03-09_proto.mdx","source":"@site/blog/2023-03-09_proto.mdx","title":"Introducing proto, a next-generation toolchain manager!","description":"We are proud to announce the launch of proto, a next-generation toolchain manager for all","date":"2023-03-09T00:00:00.000Z","tags":[{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"proto","title":"Introducing proto, a next-generation toolchain manager!","authors":["milesj"],"tags":["proto","toolchain"],"image":"./img/proto/v0.png"},"unlisted":false,"prevItem":{"title":"moon v0.26 - Deeper proto integration, Docker setup, and query commands","permalink":"/blog/v0.26"},"nextItem":{"title":"moon v0.25 - Deno tier 2 support, CI insights, custom project languages, and more","permalink":"/blog/v0.25"}},"content":"import Button from \'@site/src/ui/Button\';\\nimport Logo from \'../static/brand/proto/logo.svg\';\\n\\nWe are proud to announce the launch of [proto](/proto), a next-generation toolchain manager for all\\nof your favorite programming languages.\\n\\n\x3c!--truncate--\x3e\\n\\n<div className=\\"flex justify-center mb-3\\">\\n  <Logo width=\\"40%\\" className=\\"block\\" />\\n</div>\\n\\n[proto](/proto) is a Rust based multi-language toolchain manager that will download and install\\ntools by version, and immediately make them available on `PATH`. proto is launching with initial\\nsupport for [Bun](https://bun.sh), [Deno](https://deno.land), [Node.js](https://nodejs.org) (and\\nnpm, pnpm, yarn), and [Go](https://go.dev), with more languages on the way!\\n\\n```shell\\nproto install node 18\\nproto install go 1.20\\nproto install deno 1.30\\n```\\n\\nUnlike other version managers that pin their global binary to a default version, proto will\\n[contextually detect an applicable version](/docs/proto/detection) from the environment or the\\nlanguage\'s ecosystem (like `package.json`), ensuring the correct tool is always being ran.\\n\\n```shell\\n# Will detect a version before running\\nbun run ./script.ts\\n```\\n\\nFurthermore, with proto\'s [`.prototools`](/docs/proto/config) file, you can pin versions of all\\nrequired tools on a per-project or per-repository basis, allowing for near instant setup of\\ndeveloper environments. Perfect for onboarding new developers!\\n\\n```toml title=\\".prototools\\"\\nnode = \\"18.12.0\\"\\nyarn = \\"3.3.0\\"\\n```\\n\\n```shell\\n# Install all the things!\\nproto use\\n```\\n\\nAnd lastly, [moon](/moon)\'s toolchain is built on proto, so if you\'re using moon, you might as well\\nuse proto. This will enable a single toolchain for both tools (in v0.26)!\\n\\n<div class=\\"flex justify-center\\">\\n  <Button label=\\"View documentation\\" href=\\"/docs/proto\\" size=\\"lg\\" />\\n</div>\\n\\n## How to get started?\\n\\nIn a terminal that supports Bash, run:\\n\\n```\\ncurl -fsSL https://moonrepo.dev/install/proto.sh | bash\\n```\\n\\nIn Powershell or Windows Terminal, run:\\n\\n```\\nirm https://moonrepo.dev/install/proto.ps1 | iex\\n```\\n\\nJump to the [documentation](/docs/proto) for more information on getting started and available\\ncommands!\\n\\n## Why another version manager?\\n\\nTo start, proto powers [moon\'s](/moon) toolchain and integrated developer environment. We believed\\nthat moon\'s toolchain would be extremely beneficial for developers as a whole, and so we extracted\\nproto out into a standalone Rust CLI and Rust crates that moon inherits.\\n\\nFurthermore, we believe that requiring multiple ad-hoc version managers for all your languages, each\\nwith different workflows, CLI commands, and configuration files, is a poor developer experience.\\n\\nOur goal is to unify all of these into a single performant interface. A toolchain manager is the\\nnext step in the version manager evolution."},{"id":"v0.25","metadata":{"permalink":"/blog/v0.25","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-02-27_v0.25.mdx","source":"@site/blog/2023-02-27_v0.25.mdx","title":"moon v0.25 - Deno tier 2 support, CI insights, custom project languages, and more","description":"With this release, we\'re landing Deno, our first supported language besides Node.js, and improving","date":"2023-02-27T00:00:00.000Z","tags":[{"inline":true,"label":"deno","permalink":"/blog/tags/deno"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"moonbase","permalink":"/blog/tags/moonbase"},{"inline":true,"label":"offline","permalink":"/blog/tags/offline"},{"inline":true,"label":"github","permalink":"/blog/tags/github"}],"readingTime":4.91,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.25","title":"moon v0.25 - Deno tier 2 support, CI insights, custom project languages, and more","authors":["milesj"],"tags":["deno","toolchain","moonbase","offline","github"],"image":"./img/v0.25.png"},"unlisted":false,"prevItem":{"title":"Introducing proto, a next-generation toolchain manager!","permalink":"/blog/proto"},"nextItem":{"title":"moon v0.24 - Remote caching, interactive tasks, query improvements, and more","permalink":"/blog/v0.24"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport Button from \'@site/src/ui/Button\';\\nimport Image from \'@site/src/components/Image\';\\n\\nWith this release, we\'re landing Deno, our first supported language besides Node.js, and improving\\ninteroperability of languages as a whole.\\n\\n\x3c!--truncate--\x3e\\n\\n## Deno tier 2 support (experimental)\\n\\nThree months ago we announced our [new tiered support structure](./v0.21) for languages, and as of\\ntoday, we\'re happy to announce that our second language to reach tier 2 is\\n[Deno](https://deno.land)! With tier 2 support, we now analyze Deno specific configuration files\\n(like `deno.json`) to infer dependencies and relationships, as well as utilize this information for\\ninputs and hashing purposes. With that being said, we\'re marking this release as experimental until\\nwe fine tune the implementation, and iron out all the bugs.\\n\\nTo get started with using Deno, enable the new [`deno`](/docs/config/toolchain#deno) setting in\\n[`.moon/toolchain.yml`](/docs/config/toolchain). At this time, we don\'t have many settings to\\nconfigure, so simply defining an empty object is enough to enable the Deno platform! Learn more\\nabout this in our [Deno handbook](/docs/guides/javascript/deno-handbook).\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\ndeno: {}\\n```\\n\\nOnce enabled, you can start using `deno` commands in your moon tasks. moon will automatically set\\nthe [`platform`](/docs/config/project#platform-1) to \\"deno\\" when using a deno command.\\n\\n```yaml title=\\"moon.yml\\"\\ntasks:\\n  format:\\n    command: \'deno fmt\'\\n```\\n\\n:::info\\n\\nBecause this is only tier 2 support, moon _does not_ download and install Deno into its toolchain.\\nmoon expects the `deno` binary to exist in the current environment.\\n\\n:::\\n\\nFurthermore, if you\'re working a project that is composed of multiple JavaScript runtimes, like\\nDeno, Bun, or Node.js, you can set the default `platform` for all tasks at the project-level.\\n\\n```yaml title=\\"moon.yml\\"\\nplatform: \'deno\'\\nlanguage: \'typescript\'\\ntype: \'application\'\\n```\\n\\nWe\'re very excited for this release as it paves the way for future language integrations, and\\nenables additional JavaScript runtimes!\\n\\n## CI insights in moonbase\\n\\nWe\'ve spent the last few weeks implementing a new [moonbase](https://moonrepo.app) feature called CI\\ninsights, where we track all CI runs (via [`moon ci`](/docs/commands/ci)), and all actions (tasks)\\nthat have ran based on affected files. In the future these insights will help catch regressions,\\nalert on flakiness, provide granular metrics, and help monitor the health of your CI pipeline and\\nrepositories.\\n\\n<Image src={require(\'./img/v0.25/runs-list.png\')} width=\\"90%\\" />\\n\\nWith this initial release, we track touched files, which targets are affected based on those files,\\nan estimation on how much time was saved or lost, the actions that ran and their final status,\\noutlined as a timeline.\\n\\n<Image src={require(\'./img/v0.25/run-detail.png\')} width=\\"90%\\" />\\n\\nInsights are enabled by default if you\'re using moonbase in your CI pipeline, and start using moon\\nv0.25! You can disable insights gathering from your\\n[organization settings page](https://moonrepo.app).\\n\\n## Offline mode\\n\\nmoon assumes that an internet connection is always available, as we download and install tools into\\nthe toolchain, resolve versions against upstream manifests, and automatically install dependencies.\\nWhile this is useful, having a constant internet connection isn\'t always viable.\\n\\nIn this release, we now check for an active internet connection and bypass certain workflows when\\napplicable.\\n[Jump to the official guide on offline mode for more information](/docs/guides/offline-mode)!\\n\\n## Custom project `language`\\n\\nProject\'s have always been able to define a [`language`](/docs/config/project#language) in\\n[`moon.yml`](/docs/config/project) that denotes the primary programming language for the project.\\nHistorically this has been a strict enum of supported values, and could _not_ be customized for\\nother languages. With the introduction of\\n[language driven task inheritance](./v0.23#new-scoped-tasks-with-moontasksyml), we felt like\\nrevisiting this setting, and as such, you\'re now able to define _any_ language in this setting,\\nwhich also feeds into the task inheritance system.\\n\\n```yaml title=\\"moon.yml\\"\\nlanguage: \'kotlin\'\\n```\\n\\nWith this change, `.moon/tasks/kotlin-application.yml`, `.moon/tasks/dotnet.yml`, and other\\nvariations are now possible! However, besides task inheritance, other functionality like platform\\ndetection, and Dockerfile support are not enabled.\\n\\n## Project-level TypeScript settings (breaking)\\n\\nOur TypeScript integration supports many automated workflows, like syncing project references, and\\nrouting `outDir` to our shared cache. This is wonderful for the majority, but for the handful of\\nprojects where these settings were not viable, there was no simple way to disable or opt out of the\\nfunctionality.\\n\\nWell no more, projects can now override the workspace-level TypeScript settings\\n`routeOutDirToCache`, `syncProjectReferences`, and `syncProjectReferencesToPaths` through the\\n[`toolchain.typescript`](/docs/config/project#typescript) setting in\\n[`moon.yml`](/docs/config/project).\\n\\n```yaml title=\\"moon.yml\\"\\ntoolchain:\\n  typescript:\\n    routeOutDirToCache: false\\n```\\n\\nBecause this setting was changed from a boolean to an object, the old pattern of disabling\\nTypescript must now use the `disabled` setting.\\n\\n```yaml title=\\"moon.yml\\"\\n# Old\\ntoolchain:\\n  typescript: false\\n\\n# new\\ntoolchain:\\n  typescript:\\n    disabled: true\\n```\\n\\n## New `moonrepo/setup-moon-action` GitHub action\\n\\nIf you\'re using GitHub Actions as your CI pipeline, we\'ve introducing a new action called\\n[moonrepo/setup-moon-action](https://github.com/moonrepo/setup-moon-action), that will install the\\n`moon` binary globally, and will cache (and restore) the moon toolchain.\\n\\nWith this new action, let moon handle all the heavy lifting, and avoid all the unnecessary steps\\naround setting up Node.js, and install dependencies.\\n\\n```yaml\\njobs:\\n  ci:\\n    name: \'CI\'\\n    runs-on: \'ubuntu-latest\'\\n    steps:\\n      - uses: actions/checkout@v4\\n        with:\\n          fetch-depth: 0\\n      - uses: moonrepo/setup-moon-action@v1\\n      - run: moon ci\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.25.0) for a\\nfull list of changes.\\n\\n- Updated project, task, and target identifiers to support periods (`.`).\\n- Refactored glob matching to use workspace relative paths instead of absolute. Please report an\\n  issue if hashing or affected detection is now inaccurate.\\n- We now build against older operating systems in an attempt to solve GLIBC version errors.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.26 release!\\n\\n- Officially release proto!\\n- Improved Deno interoperability."},{"id":"v0.24","metadata":{"permalink":"/blog/v0.24","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-02-13_v0.24.mdx","source":"@site/blog/2023-02-13_v0.24.mdx","title":"moon v0.24 - Remote caching, interactive tasks, query improvements, and more","description":"With this release, we\'ve polished our CLI experience and improved task interoperability.","date":"2023-02-13T00:00:00.000Z","tags":[{"inline":true,"label":"project","permalink":"/blog/tags/project"},{"inline":true,"label":"platform","permalink":"/blog/tags/platform"},{"inline":true,"label":"moonbase","permalink":"/blog/tags/moonbase"},{"inline":true,"label":"remote-cache","permalink":"/blog/tags/remote-cache"}],"readingTime":4.44,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null},{"name":"James Pozdena","title":"Founder, developer","url":"https://github.com/jpoz","imageURL":"/img/authors/james.jpg","key":"jpoz","page":null}],"frontMatter":{"slug":"v0.24","title":"moon v0.24 - Remote caching, interactive tasks, query improvements, and more","authors":["milesj","jpoz"],"tags":["project","platform","moonbase","remote-cache"],"image":"./img/v0.24.png"},"unlisted":false,"prevItem":{"title":"moon v0.25 - Deno tier 2 support, CI insights, custom project languages, and more","permalink":"/blog/v0.25"},"nextItem":{"title":"Remote caching is now publicly available through moonbase","permalink":"/blog/moonbase"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport Button from \'@site/src/ui/Button\';\\n\\nWith this release, we\'ve polished our CLI experience and improved task interoperability.\\n\\n\x3c!--truncate--\x3e\\n\\n## Remote caching now available\\n\\nIf you missed our announcement earlier this week,\\n[remote caching is now publicly available through our new service moonbase](/blog/moonbase)! If\\nyou\'re looking to speed up your CI pipelines and share build artifacts between runs, moonbase can\\nhelp.\\n\\n<div class=\\"flex justify-center\\">\\n  <Button label=\\"Try moonbase for free!\\" href=\\"https://moonrepo.app\\" size=\\"lg\\" />\\n</div>\\n\\n## Project-level task platform\\n\\nIn our previous release, [v0.23](./v0.23#project-level-environment-variables), we added support for\\nproject-level environment variables. This is great as it helps to reduce duplication for projects\\nwith many tasks. On that note, we wondered which configuration field we could apply similar\\ntreatment, and as such, we\'ve added a project-level [`platform`](/docs/config/project#platform)\\nsetting.\\n\\nWhen this setting is defined, all task\'s within the current project that have _not explicitly_\\nconfigured their `platform`, will inherit the project-level platform. If neither settings are\\ndefined, we\'ll attempt to detect the correct platform based on the state of the project.\\n\\n```yaml title=\\"<project>/moon.yml\\"\\n# Will set non-explicit task\'s platform to node\\nplatform: \'node\'\\n\\ntasks:\\n  # Will be node\\n  dev: # ...\\n\\n  # Will be node\\n  build: # ...\\n\\n  # Will be system\\n  serve:\\n    # ...\\n    platform: \'system\'\\n```\\n\\n> This setting is _extremely useful_ for projects that contain multiple languages. Even more so once\\n> we land Bun and Deno support, as we\'ll need a way to differentiate JavaScript/TypeScript projects!\\n\\n## Interactive tasks\\n\\nWhen moon executes a task, it streams both stdout and stderr to the terminal _and_ captures the\\noutput for later use. We do this for 2 reasons:\\n\\n- We store stdout.log and stderr.log files in a tarball archive.\\n- We replay this captured output when executing a task that has been cached.\\n\\nWhile this works, our approach is non-standard. Streams are either piped or inherited, not both!\\nBecause of our custom abstraction around streams and output capturing, it disrupts stdin, breaking\\nall interactive commands. If you tried to run a task that prompted you with a question and were\\nunable to answer it, this is why!\\n\\nTo remedy this shortcoming, we\'re approaching this from 2 angles. The first is that all tasks marked\\nas [`local`](/docs/config/project#local) (or have caching disabled) will no longer capture streamed\\noutput, and will instead stream natively, allowing interactivity out of the box, but only when\\nthey\'re the only task being ran. This will cover the majority of use cases.\\n\\nFor the remaining use cases, we\'re introducing a new `--interactive` flag for\\n[`moon run`](/docs/commands/run). When this flag is provided, it will force the target into an\\ninteractive mode.\\n\\n```shell\\n$ moon run app:new --interactive\\n```\\n\\n## Improved `moon query` commands (breaking)\\n\\nThe [`moon query projects`](/docs/commands/query/projects) and\\n[`moon query touched-files`](/docs/commands/query/touched-files) commands are useful for building\\ncustom solutions and integrations on top of moon, but they weren\'t developer friendly as they output\\nlarge JSON blobs. To remedy this, we\'ve updated both commands to output a simple human readable\\nformat by default, and moved the JSON output behind a `--json` flag.\\n\\nFor example, `moon query touched-files` now outputs a list of absolute file paths separated by new\\nlines.\\n\\n```\\n$ moon query touched-files\\n/moon/website/docs/commands/query/projects.mdx\\n/moon/crates/cli/tests/query_test.rs\\n/moon/crates/cli/src/commands/query.rs\\n/moon/website/blog/2023-02-13_v0.24.mdx\\n```\\n\\nWhile `moon query projects` now outputs a list of project separated by new lines, where each line\\ncontains the project name, source, type, and language.\\n\\n```\\n$ moon query projects\\nreport | packages/report | library | typescript\\nruntime | packages/runtime | library | typescript\\ntypes | packages/types | library | typescript\\nvisualizer | packages/visualizer | library | typescript\\nwebsite | website | application | typescript\\n```\\n\\nWe had 2 goals in mind for this change, the first was to make it easily readable, and the second was\\nfor the default output to be easily parseable. We believe we\'ve accomplished these goals!\\n\\n## New `moon query tasks` command\\n\\nTo expand on the query improvements above, we wanted to provide a way to also query for tasks,\\nanswering the question of \\"What tasks exists and for what projects?\\". And with this, we\'re\\nintroducing a new [`moon query tasks`](/docs/commands/query/tasks) command!\\n\\n```\\n$ moon query tasks\\ntypes\\n  :build | packemon\\n  :format | prettier\\n  :lint | eslint\\n  :test | jest\\n  :typecheck | tsc\\nreport\\n  :build | packemon\\n  :format | prettier\\n  :lint | eslint\\n  :test | jest\\n  :typecheck | tsc\\n...\\n```\\n\\n## Shell completions\\n\\nAuto-completion in your terminal increases productivity, which we\'re a massive fan of. To help\\nsupport this, we\'re introducing the [`moon completions`](/docs/commands/completions) command, which\\ngenerates the appropriate command completions for your current shell.\\n\\nThis command writes to stdout, which can then be redirected to a file of your choice. Be sure to\\nconfigure your shell profile to load the completions!\\n\\n```shell\\n$ moon completions > ~/.bash_completion.d/moon.sh\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.24.0) for a\\nfull list of changes.\\n\\n- Added [TypeScript v5](https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-beta/)\\n  support.\\n- Added a `hasher.walkStrategy` setting to `.moon/workspace.yml`.\\n- Updated task `outputs` to support token functions (`@group`, `@globs`, etc).\\n- Reworked our comparison/baseline estimations calculations.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.25 release!\\n\\n- Deno tier 2 support.\\n- CI insights and metrics within moonbase.\\n- Project-level TypeScript settings."},{"id":"moonbase","metadata":{"permalink":"/blog/moonbase","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-02-08_moonbase.mdx","source":"@site/blog/2023-02-08_moonbase.mdx","title":"Remote caching is now publicly available through moonbase","description":"We are proud to announce the launch of moonbase remote caching \u2013 a new solution that","date":"2023-02-08T00:00:00.000Z","tags":[{"inline":true,"label":"moonbase","permalink":"/blog/tags/moonbase"},{"inline":true,"label":"remote-cache","permalink":"/blog/tags/remote-cache"}],"readingTime":1.91,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null},{"name":"James Pozdena","title":"Founder, developer","url":"https://github.com/jpoz","imageURL":"/img/authors/james.jpg","key":"jpoz","page":null}],"frontMatter":{"slug":"moonbase","title":"Remote caching is now publicly available through moonbase","authors":["milesj","jpoz"],"tags":["moonbase","remote-cache"]},"unlisted":false,"prevItem":{"title":"moon v0.24 - Remote caching, interactive tasks, query improvements, and more","permalink":"/blog/v0.24"},"nextItem":{"title":"moon v0.23 - Scoped task inheritance, and project config updates","permalink":"/blog/v0.23"}},"content":"import Button from \'@site/src/ui/Button\';\\nimport Image from \'@site/src/components/Image\';\\nimport Logo from \'../static/brand/moonbase/logo.svg\';\\n\\nWe are proud to announce the launch of [moonbase](/moonbase) remote caching \u2013 a new solution that\\nhelps moon developers streamline their build processes and save time.\\n\\n\x3c!--truncate--\x3e\\n\\n<div className=\\"flex justify-center mb-3\\">\\n  <Logo width=\\"65%\\" className=\\"block\\" />\\n</div>\\n\\nRemote caching allows developers to cache artifacts across builds, improving the efficiency of their\\nContinuous Integration (CI) pipelines. This is accomplished by automatically caching build artifacts\\nwhen moon is run with moonbase [remote caching enabled](/docs/guides/remote-cache). In the event\\nthat a CI run is executed with identical code, the cached artifacts are automatically pulled down,\\nreducing the time required to complete the build. In our tests, we have seen significant\\nimprovements in CI times, upwards of 90%.\\n\\n## What is moonbase?\\n\\nYou may be asking yourself, what is moonbase? [moonbase](/moonbase) is a new cloud service that\\nwe\'ve been working on to solve an array of problems in regards to repository and continuous\\nintegration health.\\n\\n<Image src={require(\'../static/img/home/org.png\')} width=\\"80%\\" />\\n\\nThe first problem on this list is [remote caching](/docs/guides/remote-cache), which has been in a\\nbeta program for the past few months. We want to thank all the beta participants for testing our\\nsystems!\\n\\nWe\'ll also be launching CI insights in the next few weeks. This is a system where we track all your\\nCI runs (via `moon ci`), and all moon tasks (actions) that ran within each job. We use this\\ninformation to track the health of your pipelines, catch regressions, alert on flakiness, and more!\\nBut don\'t worry, this feature is opt-in.\\n\\nWe\'re very excited for moonbase! We have a massive roadmap ahead of us, but we\'re sure y\'all will\\nenjoy everything that it has to offer.\\n\\n<div class=\\"flex justify-center\\">\\n  <Button label=\\"Try moonbase for free!\\" href=\\"https://moonrepo.app\\" size=\\"lg\\" />\\n</div>\\n\\n## New homepage and product pages\\n\\nAs part of this release, we\'ve updated our homepage, and added new product pages for both\\n[moon](/moon) and [moonbase](/moonbase). This includes new logos and typography, which we\'re very\\nexcited for! This is only the beginning, as we\'re also working on additional behind the scenes\\nproducts. Stay tuned!"},{"id":"v0.23","metadata":{"permalink":"/blog/v0.23","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-01-30_v0.23.mdx","source":"@site/blog/2023-01-30_v0.23.mdx","title":"moon v0.23 - Scoped task inheritance, and project config updates","description":"With this release, we\'re launching the next iteration of our task inheritance model, as well as","date":"2023-01-30T00:00:00.000Z","tags":[{"inline":true,"label":"survey","permalink":"/blog/tags/survey"},{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"},{"inline":true,"label":"projects","permalink":"/blog/tags/projects"}],"readingTime":6.17,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.23","title":"moon v0.23 - Scoped task inheritance, and project config updates","authors":["milesj"],"tags":["survey","tasks","projects"],"image":"./img/v0.23.png"},"unlisted":false,"prevItem":{"title":"Remote caching is now publicly available through moonbase","permalink":"/blog/moonbase"},"nextItem":{"title":"moon v0.22 - New pipeline, hashing, and caching, with Turborepo migration","permalink":"/blog/v0.22"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\nimport Button from \'@site/src/ui/Button\';\\n\\nWith this release, we\'re launching the next iteration of our task inheritance model, as well as\\nquality of life improvements for project configuration.\\n\\n\x3c!--truncate--\x3e\\n\\n## Developer survey\\n\\nBefore we dive into this new release, we have a quick survey for everyone. We know how everyone\\nfeels about surveys, but this one is real quick, only a few minutes, and is mostly multiple choice\\nquestions.\\n\\nWe\'re looking for feedback on moon itself, what features you\'re looking for, what you currently do\\nnot like, how you\'re currently using monorepos, your development workflows, so on and so forth. We\'d\\nvery much appreciate it if you could engage with this survey!\\n\\n<div class=\\"flex justify-center\\">\\n  <Button\\n    label=\\"Take survey!\\"\\n    href=\\"https://a.sprig.com/UE1SOG1zV3o5SzdRfnNpZDpmOTQ5MjU1Yy1jYTZlLTRmYjQtOTRjZi0wMzZlZjExN2JjZDg=\\"\\n    size=\\"lg\\"\\n  />\\n</div>\\n\\n## Improved task inheritance model\\n\\nOne of the guiding principles behind moon is to simplify repository maintenance, with task\\nmanagement being top of list. We weren\'t happy with the current state of things, as every build\\nsystem and task runner that exists always opted for per-project task management, which is a massive\\namount of overhead and tech debt in the long run. To combat this, moon was designed from the\\nground-up using a task inheritance model, where \\"global\\" tasks were defined in\\n[`.moon/project.yml`](/docs/config/tasks), with per-project tasks still being an option with\\n[`moon.yml`](/docs/config/project).\\n\\nWhile inheritance worked great, it did have some shortcomings, such as:\\n\\n- With the addition of [new programming languages](/blog/v0.21), there\'s no way to easily define\\n  tasks for specific languages, that should only be inherited by specific projects.\\n- There\'s no way to differentiate tasks between applications or libraries, as they typically have\\n  different build/compilation systems.\\n- All of the problems above can be \\"solved\\" with\\n  [`workspace.inheritedTasks`](/docs/config/project#inheritedtasks) in all projects, but it\'s a\\n  maintenance headache.\\n\\nWe\'ve been documenting a solution to these problems for many months now, and we\'re very excited to\\nfinally release our new and improved task inheritance model that solves all of the problems above,\\nand opens the doors for future enhancements! Keep reading for more information.\\n\\n### New `.moon/tasks.yml` (breaking)\\n\\nTo start, we renamed `.moon/project.yml` to `.moon/tasks.yml` as we want to emphasize that this\\nconfiguration file is for task inheritance functionality only. However, the semantics of this file\\nhas _not_ changed, and is still \\"tasks to be inherited by _all_ projects\\".\\n\\n```yaml title=\\".moon/tasks.yml\\"\\n$schema: \'https://moonrepo.dev/schemas/tasks.json\'\\n\\ntasks:\\n  # ...\\n```\\n\\n> We\'ll automatically rename this file for you when running a `moon` command!\\n\\n### New scoped tasks with `.moon/tasks/*.yml`\\n\\nThe biggest change to task inheritance is that tasks can now be scoped by a project\'s\\n[`language`](/docs/config/project#language) or [`type`](/docs/config/project#type) using the new\\n`.moon/tasks/<language>.yml` or `.moon/tasks/<language>-<type>.yml` configuration files! Jump to the\\n[official documentation on task inheritance](/docs/concepts/task-inheritance) for more information\\non how scoping works, the lookup order of files, and much more.\\n\\nAs a demonstration, you can scope tasks to Node.js projects with `.moon/tasks/node.yml`, Rust\\napplications with `.moon/tasks/rust-application.yml`, Go libraries with\\n`.moon/tasks/go-library.yml`, Ruby scripts with `.moon/tasks/ruby-tool.yml`, so on and so forth!\\n\\nWe\'re very excited for this feature, as it\'s something we personally needed, and we\'re sure you all\\ndo as well. It also future proofs moon for new programming languages, additional implicit scenarios\\nto handle, and yet to be discovered functionality.\\n\\n<Tabs\\n  groupId=\\"scoped-task\\"\\n  defaultValue=\\"node\\"\\n  values={[\\n    { label: \'Node\', value: \'node\' },\\n    { label: \'Go\', value: \'go\' },\\n    { label: \'PHP\', value: \'php\' },\\n    { label: \'Python\', value: \'python\' },\\n    { label: \'Ruby\', value: \'ruby\' },\\n    { label: \'Rust\', value: \'rust\' },\\n  ]}\\n>\\n<TabItem value=\\"node\\">\\n\\n```yaml title=\\".moon/tasks/node.yml\\"\\ntasks:\\n  format:\\n    command: \'prettier --write .\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"go\\">\\n\\n```yaml title=\\".moon/tasks/go.yml\\"\\ntasks:\\n  format:\\n    command: \'go fmt\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"php\\">\\n\\n```yaml title=\\".moon/tasks/php.yml\\"\\ntasks:\\n  format:\\n    command: \'phpcbf .\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"python\\">\\n\\n```yaml title=\\".moon/tasks/python.yml\\"\\ntasks:\\n  format:\\n    command: \'pylint .\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"ruby\\">\\n\\n```yaml title=\\".moon/tasks/ruby.yml\\"\\ntasks:\\n  format:\\n    command: \'rubocop -l\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"rust\\">\\n\\n```yaml title=\\".moon/tasks/rust.yml\\"\\ntasks:\\n  format:\\n    command: \'cargo fmt --all --check\'\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n### Moved `implicitDeps` and `implicitInputs` (breaking)\\n\\nTo standardize inheritance and expansion related functionality, we\'ve moved the\\n`runner.implicitDeps` and `runner.implicitInputs` settings from `.moon/workspace.yml` to\\n[`.moon/tasks.yml`](/docs/config/tasks#implicitdeps) and\\n[`.moon/tasks/*.yml`](/docs/config/tasks#implicitinputs) and removed the `runner` prefix.\\n\\nThis allows for implicits to also be scoped accordingly and granularly. For example, projects can\\nnow inherit dependency manager related files as implicit inputs on a per-language basis:\\n\\n<Tabs\\n  groupId=\\"scoped-task\\"\\n  defaultValue=\\"node\\"\\n  values={[\\n    { label: \'Node\', value: \'node\' },\\n    { label: \'Go\', value: \'go\' },\\n    { label: \'PHP\', value: \'php\' },\\n    { label: \'Python\', value: \'python\' },\\n    { label: \'Ruby\', value: \'ruby\' },\\n    { label: \'Rust\', value: \'rust\' },\\n  ]}\\n>\\n<TabItem value=\\"node\\">\\n\\n```yaml title=\\".moon/tasks/node.yml\\"\\nimplicitInputs:\\n  - \'package.json\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"go\\">\\n\\n```yaml title=\\".moon/tasks/go.yml\\"\\nimplicitInputs:\\n  - \'go.mod\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"php\\">\\n\\n```yaml title=\\".moon/tasks/php.yml\\"\\nimplicitInputs:\\n  - \'composer.json\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"python\\">\\n\\n```yaml title=\\".moon/tasks/python.yml\\"\\nimplicitInputs:\\n  - \'pyproject.toml\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"ruby\\">\\n\\n```yaml title=\\".moon/tasks/ruby.yml\\"\\nimplicitInputs:\\n  - \'Gemfile\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"rust\\">\\n\\n```yaml title=\\".moon/tasks/rust.yml\\"\\nimplicitInputs:\\n  - \'Cargo.toml\'\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Project-level environment variables\\n\\nSince moon\'s inception, tasks can be configured with pre-defined environment variables using the\\n[`env`](/docs/config/project#env-1) setting. These variables would then be passed to the command\\nduring execution. This works perfectly for encapsulation, but becomes tedious when the same\\nvariables are repeated for multiple tasks.\\n\\nTo remedy this, environment variables can now be defined at the top of\\n[`moon.yml`](/docs/config/project) using the top-level [`env`](/docs/config/project#env) setting.\\nVariables defined at the top-level will be inherited by all tasks in the current project, but will\\nnot override task-level variables of the same name.\\n\\nTo demonstrate this, the following config:\\n\\n```yaml title=\\"<project>/moon.yml\\"\\ntasks:\\n  dev:\\n    # ...\\n    env:\\n      TARGET_ENV: \'development\'\\n\\n  build:\\n    # ...\\n    env:\\n      TARGET_ENV: \'development\'\\n\\n  serve:\\n    # ...\\n    env:\\n      TARGET_ENV: \'development\'\\n```\\n\\nCan be rewritten as:\\n\\n```yaml title=\\"<project>/moon.yml\\"\\nenv:\\n  TARGET_ENV: \'development\'\\n\\ntasks:\\n  dev:\\n    # ...\\n\\n  build:\\n    # ...\\n\\n  serve:\\n    # ...\\n```\\n\\n## Globs in task outputs\\n\\nAnother feature that\'s been around since moon\'s inception is task\\n[`outputs`](/docs/config/project#outputs), which only supported relative files and folders. For\\nhistorical reasons, it was the easiest solution at the time, but in practice, supporting more\\ngranular control is better.\\n\\nAs such, task `outputs` now support glob patterns as well! This is perfect for restricting and\\nfiltering down which files are cached in the artifact. However, be aware that during hydration (a\\ncache hit), all files _not matching the glob_ will be deleted, so ensure that critical files _do_\\nmatch.\\n\\nTo demonstrate this, if building a JavaScript project, you may want to include `.js` and `.css`\\nfiles, but exclude everything else (`.map`, etc).\\n\\n```yaml title=\\"moon.yml\\" {4,5}\\ntasks:\\n  build:\\n    command: \'webpack\'\\n    outputs:\\n      - \'build/**/*.{js,css}\'\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.23.0) for a\\nfull list of changes.\\n\\n- Updated `moon migrate from-turborepo` to preserve globs in outputs.\\n- Updated project graph to no longer cache when there\'s no VCS root.\\n- Updated pnpm to use the new `pnpm dedupe` command when the version is >= 7.26.0.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.24 release!\\n\\n- New `moon query tasks` command.\\n- New per-project `platform` setting.\\n- Token support in task `outputs`.\\n- TypeScript v5 support."},{"id":"v0.22","metadata":{"permalink":"/blog/v0.22","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-01-16_v0.22.mdx","source":"@site/blog/2023-01-16_v0.22.mdx","title":"moon v0.22 - New pipeline, hashing, and caching, with Turborepo migration","description":"It\'s the first release of the year, and with this release, we\'re landing some quality of life","date":"2023-01-16T00:00:00.000Z","tags":[{"inline":true,"label":"graph","permalink":"/blog/tags/graph"},{"inline":true,"label":"pipeline","permalink":"/blog/tags/pipeline"},{"inline":true,"label":"hasher","permalink":"/blog/tags/hasher"},{"inline":true,"label":"migrate","permalink":"/blog/tags/migrate"}],"readingTime":2.9,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.22","title":"moon v0.22 - New pipeline, hashing, and caching, with Turborepo migration","authors":["milesj"],"tags":["graph","pipeline","hasher","migrate"],"image":"./img/v0.22.png"},"unlisted":false,"prevItem":{"title":"moon v0.23 - Scoped task inheritance, and project config updates","permalink":"/blog/v0.23"},"nextItem":{"title":"What\'s in store for 2023","permalink":"/blog/2023-roadmap"}},"content":"import Label from \'@site/src/ui/typography/Label\';\\nimport Image from \'@site/src/components/Image\';\\n\\nIt\'s the first release of the year, and with this release, we\'re landing some quality of life\\ninfrastructure and workflow improvements!\\n\\n\x3c!--truncate--\x3e\\n\\n## New action pipeline\\n\\nWhen running targets, we generate a graph of actions to execute in order within the action runner.\\nAn action is one of \\"setup toolchain\\", \\"install dependencies\\", \\"run target\\", so on and so forth. Our\\naction runner would then spawn threads for every action using the [Tokio](https://tokio.rs/)\\nruntime. While this worked great, concurrency was entirely abstracted away from us.\\n\\nTo mitigate this problem, we\'ve implemented a new system for executing actions known as the action\\npipeline (or simply pipeline), which implements a dynamically scaling thread pool on top of Tokio.\\nThis provides us with more control over concurrency, starting with the new `--concurrency` option,\\nwhich restricts the number of threads (or CPU cores).\\n\\n```shell\\n$ moon run :build --concurrency 2\\n```\\n\\n## Expanded hashing functionality\\n\\nWhen we run targets in the pipeline, we hash a collection of inputs to calculate whether to continue\\nrunning or to exit early. This functionality has been extremely beneficial for optimizing the\\npipeline, and so, we\'ve expanded the hasher for other use cases. To start, the following 2 workflows\\nnow utilize the hasher:\\n\\n- When determining to auto-install dependencies (`npm install`, etc), we now hash all production,\\n  development, and peer dependencies from applicable manifests (`package.json`). This has resulted\\n  in more accurate installs, as we\'re no longer inadvertently installing when a non-dependency field\\n  is modified in a manifest. On top of this, will still take into account lockfile modified\\n  timestamps.\\n- When generating the project graph, we now hash all sources, aliases, and configuration files, to\\n  determine whether to load the project graph from the local cache.\\n\\n## Project graph is now cached\\n\\nBecause of the hashing improvements above, we\'re now able to cache the entirety of the project graph\\ninto local cache. Depending on how many projects are in your workspace, you may see performance\\nimprovements on subsequent runs as we\'re no longer re-building the project graph over and over\\neverytime the `moon` binary is ran.\\n\\n## Migrate from Turborepo\\n\\nTurborepo is a popular task runner for Node.js based monorepos, but doesn\'t support all the\\nfunctionality that moon does. If you\'re looking to prototype moon, or migrate from Turborepo to moon\\nholistically, we now support a new command\\n[`moon migrate from-turborepo`](/docs/commands/migrate/from-turborepo).\\n\\nThis command will migrate the `turbo.json` file to moon applicable configuration files!\\n\\n```shell\\n$ moon migrate from-turborepo\\n```\\n\\n## Breaking changes\\n\\n### Renamed events\\n\\nBecause of the runner -> pipeline changes above, the `runner.*` [webhook](/docs/guides/webhooks)\\nevents were renamed to `pipeline.*`.\\n\\n### Updated CLI options\\n\\nRenamed the `--upstream` option to `--remote`, to better align with Git terminology, and removed the\\n`--report` option from `moon check` and `moon run` commands. Reports are now always created.\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.22.0) for a\\nfull list of changes.\\n\\n- Added Bun as a tier 1 language (doesn\'t do much at the moment).\\n- Added a [`versionConstraint` setting](/docs/config/workspace#versionconstraint) in\\n  `.moon/workspace.yml` that enforces a requirement on the running moon binary.\\n- Updated the [`project` fields](/docs/config/project#project) in `moon.yml` to be optional,\\n  excluding `description`.\\n- Internal improvements to remote caching and artifact uploading.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.23 release!\\n\\n- Improved task inheritance workflow.\\n- Glob support in task `outputs`.\\n- Project-level environment variables."},{"id":"2023-roadmap","metadata":{"permalink":"/blog/2023-roadmap","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-01-04_2023-roadmap.mdx","source":"@site/blog/2023-01-04_2023-roadmap.mdx","title":"What\'s in store for 2023","description":"Happy new year! Let\'s start 2023 by reflecting on last year and diving into our tentative year long","date":"2023-01-04T00:00:00.000Z","tags":[{"inline":true,"label":"roadmap","permalink":"/blog/tags/roadmap"},{"inline":true,"label":"moonbase","permalink":"/blog/tags/moonbase"},{"inline":true,"label":"proto","permalink":"/blog/tags/proto"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"}],"readingTime":5.58,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"2023-roadmap","title":"What\'s in store for 2023","authors":["milesj"],"tags":["roadmap","moonbase","proto","toolchain"]},"unlisted":false,"prevItem":{"title":"moon v0.22 - New pipeline, hashing, and caching, with Turborepo migration","permalink":"/blog/v0.22"},"nextItem":{"title":"moon v0.21 - Tiered language support with initial Go, PHP, Python, Ruby, and Rust","permalink":"/blog/v0.21"}},"content":"Happy new year! Let\'s start 2023 by reflecting on last year and diving into our tentative year long\\nroadmap.\\n\\n\x3c!--truncate--\x3e\\n\\n## Year 2022 in review\\n\\nThe original concept and\\n[first commit of moon](https://github.com/moonrepo/moon/commit/62267e3ccda7a45c2e9355fcbddba577ae54403d)\\n(codenamed monolith) landed October 23rd, 2021. Eight months later, we\\n[launched an alpha of moon](https://twitter.com/tothemoonrepo/status/1527467865200136192) to the\\npublic on May 19th, 2022. Since then, we\'ve landed 21 amazing releases based on feedback from the\\ncommunity and our long-term vision, with some such features as:\\n\\n- Linux musl, macOS silicon, and ARM support\\n- Full Node.js/JavaScript ecosystem support\\n- End-to-end caching and hashing of build artifacts\\n- Streamlined configuration\\n- Improved developer experience\\n- Massive performance improvements\\n- Automatic cache cleaning\\n- Code generation / scaffolding\\n- Dockerfile integration\\n- Remote caching\\n- New language agnostic toolchain\\n- Onboarding of 5 new languages: Rust, Go, PHP, Python, Ruby\\n- Rewritten project and dependency graphs\\n- Project-level toolchain overrides\\n- Project specific caching\\n- VSCode extension\\n- 2 GitHub actions\\n- ...and so much more!\\n\\nWe\'re very proud with the quality and amount of features we\'ve released in a 7 month timeframe. On\\ntop of this, our [GitHub stars](https://github.com/moonrepo/moon/stargazers) have steadily passed\\nthe 1k mark, [npm](https://www.npmjs.com/package/@moonrepo/cli) downloads are 500 a week and\\ngrowing, and our [Twitter](https://twitter.com/tothemoonrepo) isn\'t doing too bad. This is only the\\nstart, and we\'re not planning to go anywhere!\\n\\n## Path to an official v1 release\\n\\nA common question we receive is \\"When is v1 going to be released?\\", as some consumers are weary of\\nusing a \\"beta\\" tool. We definitely understand, and as such, have posted a\\n[high-level overview](https://github.com/moonrepo/moon/issues/491) of what we\'re hoping to land\\nbefore we tag an official v1 release. It basically boils down to landing breaking changes (mainly\\naround configuration) before v1, so that we avoid bumping to a v2 or v3 unnecessarily. We also want\\nto land our [toolchain changes](#launching-proto) and [remote caching](#launching-moonbase)\\nimprovements before then.\\n\\nOur current timeframe is by end of Q1, if not, early Q2.\\n\\n## Launching moonbase\\n\\nWe haven\'t mentioned this name publicly yet, but now seems like the perfect time! For the past 6\\nmonths we\'ve been working a new web application and service called moonbase, which pairs nicely with\\nmoon, as it provides additional functionality that can only be achieved by persisting information\\nacross runs.\\n\\nTo start, this service provides [remote caching](/docs/guides/remote-cache), which we\'re already\\nusing in production. At this point in time, objects are stored in our moonrepo S3 buckets, but one\\nof our major goals is to support storing objects in your private buckets, supporting additional\\ncloud providers like Google Cloud and Azure, and in the long-term, a self-hosted / on-premises\\nsolution.\\n\\nBut that\'s not all! moonbase will integrate deeply with [continuous integration](/docs/guides/ci)\\npipelines to generate insights, capture metrics, and provide near real-time dashboards. Our goal is\\nto provide a holistic overview of your entire repository.\\n\\nmoonbase with publicly available remote caching is slated for end of Q1. CI integration is\\ntentatively slated for Q2. We have even more features that we\'ll reveal in the future, so stay\\ntuned!\\n\\n## Launching proto\\n\\nAnother tool we haven\'t mentioned yet is proto (name still in flux). proto is a standardized version\\nmanager for programming languages and dependency managers. We\'ve basically extracted our\\n[toolchain](/docs/concepts/toolchain) into a standalone library, as it\'s super beneficial for\\nprojects and developers not using moon. It provides all the functionality you\'d expect from a\\nversion manager:\\n\\n- Downloading and installing specific versions\\n- Automatic version detection\\n- Updating PATH with the applicable version\\n- Generating shims\\n- Pinning shell, local, and global versions\\n\\nSo how\'s this different from existing version managers like nvm or volta? To start, it\'s written in\\nRust so it\'s _fast_ and doesn\'t suffer from being Bash only. Because of this, it\'s also\\nmulti-platform and will work on Windows. But the biggest different is that proto is language\\nagnostic and will support multiple languages. To start, it supports Node.js and Deno, but will be\\nexpanded to support our other toolchain languages like Bun, PHP, Ruby, and Python. Another cool\\nfeature is that it also manages versions of dependency managers like npm, yarn, and pnpm!\\n\\nWe\'re planning to launch proto at the start of Q2.\\n\\n## Expanding language support\\n\\nOur initial goal for moon was to provide a first-class build system for the frontend ecosystem that\\nfocused heavily on automation and the developer experience. We believe we\'ve accomplished this goal,\\nbut of course, nothing is ever actually complete, and so JavaScript, TypeScript, and Node.js support\\nwill continually be improved.\\n\\nHowever, that\'s not the entirety of the frontend ecosystem, as [Deno](https://deno.land/) and\\n[Bun](https://bun.sh/) have been gaining traction this past year, and of course, moon will support\\nboth of them as first-class platforms by end of year.\\n\\nFurthermore, we recently landed tier 1 support for 5 new languages: Rust, Ruby, PHP, Python, and Go.\\nOur end of year goal for these languages is to provide full tier 2 support. Tier 3 support is still\\nan unknown, as we need to investigate the best possible way to integrate these languages into the\\ntoolchain (this work is ongoing). We\'ll also add new languages based on demand.\\n\\nWith all that being said, this is our tentative timeline around\\n[language support](/docs#supported-languages) (which may shift at any time):\\n\\n- **Q1**\\n  - Tier 1 support for Bun.\\n  - Tier 2 support for Deno.\\n- **Q2**\\n  - Tier 2 support for Bun, PHP.\\n  - Tier 3 support for Deno.\\n- **Q3**\\n  - Tier 2 support for Ruby, Python.\\n  - Tier 3 support for Bun.\\n- **Q4**\\n  - Tier 2 support for Rust, Go.\\n\\n## Supporting release workflows\\n\\nmoon currently excels at organizing projects, running tasks, and building artifacts, but it has no\\nsupport for release workflows. This is everything from capturing changes, bumping versions,\\ngenerating changelogs, and publishing to upstream registries. If you use\\n[Lerna](https://github.com/lerna/lerna) or [changesets](https://github.com/changesets/changesets),\\nyou should be very familiar with this workflow.\\n\\nSince moon supports monorepos and has in-depth knowledge of the project graph, we can support\\nrelease workflows with ease. Our goal is to support this workflow (for all languages) from start to\\nfinish by end of year, ideally much sooner than that!\\n\\n## More repository management tooling\\n\\nThe other aspect of moon is that it\'s a repository management tool as well as a build system. We\\nwant to embrace this even further by providing explicit functionality or automation when applicable.\\nSome examples of this are in-repository secrets management, git hooks management, code ownership and\\nquality tooling, code review helpers, repository/configuration linting, a moon DSL, and much much\\nmore."},{"id":"v0.21","metadata":{"permalink":"/blog/v0.21","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-12-19_v0.21.mdx","source":"@site/blog/2022-12-19_v0.21.mdx","title":"moon v0.21 - Tiered language support with initial Go, PHP, Python, Ruby, and Rust","description":"Happy Holidays \ud83c\udf84\u2603\ufe0f! With our last release of the year, we\'re very excited to announce our tiered","date":"2022-12-19T00:00:00.000Z","tags":[{"inline":true,"label":"runner","permalink":"/blog/tags/runner"},{"inline":true,"label":"language","permalink":"/blog/tags/language"},{"inline":true,"label":"platform","permalink":"/blog/tags/platform"},{"inline":true,"label":"cache","permalink":"/blog/tags/cache"},{"inline":true,"label":"graph","permalink":"/blog/tags/graph"}],"readingTime":4.53,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.21","title":"moon v0.21 - Tiered language support with initial Go, PHP, Python, Ruby, and Rust","authors":["milesj"],"tags":["runner","language","platform","cache","graph"],"image":"./img/v0.21.png"},"unlisted":false,"prevItem":{"title":"What\'s in store for 2023","permalink":"/blog/2023-roadmap"},"nextItem":{"title":"moon v0.20 - Toolchain, caching, and hydration improvements","permalink":"/blog/v0.20"}},"content":"import Label from \'@site/src/ui/typography/Label\';\\nimport Image from \'@site/src/components/Image\';\\n\\nHappy Holidays \ud83c\udf84\u2603\ufe0f! With our last release of the year, we\'re very excited to announce our tiered\\nlanguage support structure, which lays the foundation for turning moon into a multi-language build\\nsystem! On top of this, we\'ve worked heavily on bug fixing, optimizations, and overall quality of\\nlife improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## New tiered language support\\n\\nThe most common question we receive is whether we plan to support additional languages besides\\nNode.js, with Rust, Deno, and Bun being top of that list. Adding new languages is non-trivial, as we\\nneed to build abstractions that support and integrate with the language\'s ecosystem, primarily\\ndependency managers and resolution algorithms.\\n\\nThis is a very large upfront cost, with a huge time and resource commitment. To reduce this burden,\\nwe\'re introducing a tiered support structure, so that languages can be incrementally integrated into\\nmoon and adopted by consumers.\\n\\nThe tiers break down as follows:\\n\\n- &nbsp;<Label text=\\"Tier 0\\" variant=\\"failure\\" /> &nbsp; **No direct integration** - Tool is not\\n  directly supported in moon, but can still be ran using the\\n  [\\"system\\" task platform](../docs/faq#can-we-run-other-languages), which expects the tool to exist\\n  in the current environment.\\n- &nbsp;<Label text=\\"Tier 1\\" variant=\\"warning\\" /> &nbsp; **Project categorization** - Projects can\\n  configure their primary [language in `moon.yml`](../docs/config/project#language), and have a\\n  dedicated Rust crate for metadata.\\n- &nbsp;<Label text=\\"Tier 2\\" variant=\\"info\\" /> &nbsp; **Ecosystem platformization** - moon deeply\\n  integrates with the language\'s ecosystem by parsing manifests, lockfiles, and other semantic files\\n  to infer dependencies, tasks, and other necessary information.\\n- &nbsp;<Label text=\\"Tier 3\\" variant=\\"success\\" /> &nbsp; **Toolchain integration** - Language is\\n  directly supported in the toolchain, configured in\\n  [`.moon/toolchain.yml`](../docs/config/toolchain), and will automatically be downloaded and\\n  installed.\\n\\nTo learn more about our currently supported languages and their tiers,\\n[jump to the official documentation](/docs#supported-languages).\\n\\n> One important facet we\'d like to express, is that _all_ languages and tools fall into tier 0. Feel\\n> free to use anything you\'d like as a task command!\\n\\n## Basic support for Go, PHP, Python, Ruby, and, Rust\\n\\nAs announced above, we now incrementally support new languages, and have integrated the following 5\\nlanguages with tier 1 support: Go, PHP, Python, Ruby, and, Rust! Start using these languages today\\nby setting the [`language`](../docs/config/project#language) field in `moon.yml`, or by letting moon\\ninfer the language based on files in the project root (for example, `Cargo.toml` is Rust).\\n\\n```yaml title=\\"<project>/moon.yml\\"\\nlanguage: \'rust\'\\n\\ntasks:\\n  build:\\n    command: \'cargo build\'\\n    inputs:\\n      - \'src/**/*\'\\n      - \'Cargo.toml\'\\n  test:\\n    command: \'cargo test\'\\n    inputs:\\n      - \'src/**/*\'\\n      - \'tests/**/*\'\\n      - \'Cargo.toml\'\\n```\\n\\n> Because these languages are tier 1, moon _does not_ install the language automatically, and will\\n> require the command to already exist in the environment. Furthermore, the project language will\\n> automatically set all task\'s `platform` to \\"system\\", at least until it\'s supported directly in the\\n> toolchain.\\n\\n## Interactive project and dependency graphs\\n\\nThanks to the amazing contribution from [Diptesh Choudhuri](https://github.com/IgnisDa), we now have\\ninteractive project and dependency graphs when running the\\n[`moon project-graph`](../docs/commands/project-graph) and\\n[`moon dep-graph`](../docs/commands/action-graph) commands respectively.\\n\\nThis is only the first iteration of these graphs. Expect more advanced features in the future, like\\nfiltering, node/edge inspection, exporting, and more!\\n\\n<Image src={require(\'./img/v0.21/graph.png\')} width=\\"80%\\" />\\n\\n## New `--updateCache` command line option\\n\\nOur caching layer is pretty powerful, as it helps to avoid tasks from running unnecessarily.\\nHowever, there are situations where you need to refresh or force update the cache outside of the\\n[`inputs`](../docs/config/project#inputs) list. This is currently achieved with the\\n[`--cache`](../docs/commands/overview#caching) option, like `moon --cache off run ...`, but this is\\nnon-ideal for a few reasons:\\n\\n1. It disables _all caching_, which means dependency installs/dedupes will continually be ran. This\\n   adds a lot of unwanted overhead.\\n2. It requires you to backspace in the terminal to add the option _before_ `run` or `check`, as it\'s\\n   a global option. A little tedious but important for experience.\\n\\nSo to work around these limitations, we\'ve added a new `--updateCache` (or `-u`) to both\\n[`moon run`](../docs/commands/run) and [`moon check`](../docs/commands/run), which will bypass\\nreading any existing cache items, but will force update the cache base on the latest run.\\n\\n```shell\\n$ moon run app:build --updateCache\\n```\\n\\n## New multi-status affected filtering\\n\\nWe support running tasks based on affected files using the\\n[`moon run --affected`](../docs/commands/run) command, which is great for reducing the amount of\\ntasks being ran, and for applying code quality tooling like Git hooks. However, you were only able\\nto apply a single status filter, like \\"deleted\\" or \\"modified\\", which was non-ideal... but no more!\\n\\nYou can now apply multiple statuses by passing the `--status` option multiple times.\\n\\n```shell\\n$ moon run :lint --affected --status modified --status added\\n```\\n\\nThis pairs nicely with the recent\\n[`affectedFiles` task option](../docs/config/project#affectedfiles) changes!\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.21.0) for a\\nfull list of changes.\\n\\n- Refactored project and dependency graphs for improved performance.\\n- Added args and env var variants to the `affectedFiles` task option.\\n- Added `--minimal` to `moon init` for quick scaffolding and prototyping.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.22 release!\\n\\n- Generalized hashing for use in any context (improved deps installation).\\n- More work on language integrations."},{"id":"v0.20","metadata":{"permalink":"/blog/v0.20","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-11-29_v0.20.mdx","source":"@site/blog/2022-11-29_v0.20.mdx","title":"moon v0.20 - Toolchain, caching, and hydration improvements","description":"With this release, we\'ve focused heavily on future proofing our toolchain and how it integrates with","date":"2022-11-29T00:00:00.000Z","tags":[{"inline":true,"label":"hydration","permalink":"/blog/tags/hydration"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"generator","permalink":"/blog/tags/generator"},{"inline":true,"label":"runner","permalink":"/blog/tags/runner"}],"readingTime":3.93,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.20","title":"moon v0.20 - Toolchain, caching, and hydration improvements","authors":["milesj"],"tags":["hydration","toolchain","generator","runner"],"image":"./img/v0.20.png"},"unlisted":false,"prevItem":{"title":"moon v0.21 - Tiered language support with initial Go, PHP, Python, Ruby, and Rust","permalink":"/blog/v0.21"},"nextItem":{"title":"Integrating TypeScript in a monorepo","permalink":"/blog/typescript-monorepo"}},"content":"With this release, we\'ve focused heavily on future proofing our toolchain and how it integrates with\\nmoon. We\'ve also landed a handful of quality of life improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Breaking changes\\n\\nTo start, we have a few breaking changes this release to be aware of!\\n\\n### Moved toolchain settings\\n\\nThe [`.moon/workspace.yml`](../docs/config/workspace) config file was getting rather bloated and\\ncomplicated, as it contained the projects list, settings for each toolchain language, and settings\\nfor each supported service (runner, generator, etc). Furthermore, this file will keep getting larger\\nwith each new language and service we support.\\n\\nTo future proof moon, and to land as many breaking changes before an official v1, we\'ve decided to\\nmove toolchain specific settings into a new file, [`.moon/toolchain.yml`](../docs/config/toolchain).\\nThis new file will house all language and dependency manager specific settings.\\n\\nTo migrate, move the `node` and `typescript` settings from `.moon/workspace.yml` to\\n`.moon/toolchain.yml`.\\n\\n```yaml title=\\".moon/toolchain.yml\\"\\nnode:\\n  # ...\\n\\ntypescript:\\n  # ...\\n```\\n\\n### Moved project-level overrides\\n\\nContinuing with the changes above, we\'ve also moved the `workspace.node` and `workspace.typescript`\\nfrom [`moon.yml`](../docs/config/project) into a new parent field, `toolchain`. We think this makes\\nmore sense.\\n\\n```yaml title=\\"moon.yml\\"\\n# Before\\nworkspace:\\n  node:\\n    version: \'...\'\\n\\n# After\\ntoolchain:\\n  node:\\n    version: \'...\'\\n```\\n\\n## Future of the toolchain\\n\\nWe\'re really proud of our toolchain, as it avoids an array problems that developers deal with on a\\nday to day basis, primarily around running tasks using the wrong version of Node.js or their chosen\\npackage manager. While we\'re in the process of supporting additional languages, starting with\\n[Deno](https://deno.land/), we had an idea... Since this is basically a better \\"version manager for\\ntools\\", why not extract this out into something else?\\n\\nAnd that\'s what we plan to do! Before we do so, we\'ve had to make some architectural changes, many\\nof which have landed in this release. During this process, we were able to implement an even better\\ntoolchain, polish many of the edge cases, and improve performance! Stay tuned for more information\\non this new tool!\\n\\n## Increased output hydration by 8-10x\\n\\nIn moon, hydration is the concept of unpacking an existing hashed artifact into a\\n[task\'s outputs](../docs/config/project#outputs) during a cache hit. In our previous implementation,\\nwe would delete all existing outputs before unpacking the archive to ensure a clean slate and to\\navoid stale files. While this worked, it wasn\'t the most performant, taking about 280ms for 1,000\\nfiles (which is still reasonably fast!).\\n\\nIn our new implementation, we now utilize a smart file tree diffing algorithm that will only unpack\\nfiles _with different content_, and will automatically remove stale files in the process. This has\\nresulted in a 10x performance increase, taking about 30ms! Multiply this by many projects, the\\nresults should be very apparent.\\n\\nWe hope you enjoy this improvement, as it\'s the first of many to come!\\n\\n## Cache any and all targets\\n\\nBy default, all [targets](../docs/concepts/target) that produce outputs are cached and archived. For\\ntargets that _do not_ produce outputs, like testing, linting, and typechecking, these are not\\ncached. This will result in slower CI times as they are continuously ran, even if nothing has\\nchanged. However with our new [remote caching](../docs/guides/remote-cache) layer, we can skip these\\nfrom running entirely!\\n\\nTo achieve this, we\'ve added a new setting to [`.moon/workspace.yml`](../docs/config/workspace)\\ncalled [`runner.archivableTargets`](../docs/config/workspace#archivabletargets). This setting\\naccepts a list of targets that should be archived, regardless of whether or not they produce\\noutputs.\\n\\nFor example, if we want to cache and archive testing, linting, and typechecking, we can define the\\nfollowing:\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nrunner:\\n  archivableTargets:\\n    - \':lint\'\\n    - \':test\'\\n    - \':typecheck\'\\n```\\n\\n## Path handling in generator templates\\n\\nOur code generation is powered by [Tera](https://tera.netlify.app/docs/#built-ins), a templating\\nengine with a ton of built-in utilities. However, it does not provide utilities for file paths, and\\nas such, we now provide `path_join` and `path_relative` filters.\\n\\n```twig\\n{{ some_path | path_relative(from = workspace_root) }}\\n```\\n\\nWe also now inject variables for the working directory, destination, and workspace root. This will\\nhelp with custom paths, especially within frontmatter!\\n[View the codegen docs for more information](../docs/guides/codegen#variables).\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.20.0) for a\\nfull list of changes.\\n\\n- Added `vcs.remoteCandidates` to `.moon/workspace.yml` to customize the remotes for Git to query\\n  against.\\n- Added support for `moduleSuffixes` and `moduleDetection` in TypeScript `tsconfig.json` compiler\\n  options.\\n- YAML files will now respect the closest `.editorconfig` file.\\n- Refactored terminal output for bette readability.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.21 release!\\n\\n- An interactive dependency and project graph visualizer.\\n- A more performant project graph.\\n- More quality of life improvements for affected files."},{"id":"typescript-monorepo","metadata":{"permalink":"/blog/typescript-monorepo","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-11-21_typescript-monorepo.mdx","source":"@site/blog/2022-11-21_typescript-monorepo.mdx","title":"Integrating TypeScript in a monorepo","description":"A common question in the JavaScript ecosystem is how to integrate TypeScript in a monorepo. This is","date":"2022-11-21T00:00:00.000Z","tags":[{"inline":true,"label":"typescript","permalink":"/blog/tags/typescript"},{"inline":true,"label":"monorepo","permalink":"/blog/tags/monorepo"}],"readingTime":0.56,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"typescript-monorepo","title":"Integrating TypeScript in a monorepo","authors":["milesj"],"tags":["typescript","monorepo"]},"unlisted":false,"prevItem":{"title":"moon v0.20 - Toolchain, caching, and hydration improvements","permalink":"/blog/v0.20"},"nextItem":{"title":"moon v0.19 - Remote caching beta, affected files, and graph optimization","permalink":"/blog/v0.19"}},"content":"A common question in the JavaScript ecosystem is how to integrate TypeScript in a monorepo. This is\\na fair question, as there\'s no in-depth source of truth, or one perfect way of doing it. However, we\\ntook it upon ourselves to answer this question!\\n\\n\x3c!--truncate--\x3e\\n\\nBased on our experience scaling and managing frontend repositories in open source and large\\ncompanies like Airbnb and Coinbase, we\'re happy to\\n[announce an in-depth guide on using TypeScript project references in a monorepo](../docs/guides/javascript/typescript-project-refs)!\\n\\nWe hope you find this guide useful, and if you have any questions, feel free to discuss them in our\\n[Discord community](https://discord.gg/qCh9MEynv2)!"},{"id":"v0.19","metadata":{"permalink":"/blog/v0.19","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-11-14_v0.19.mdx","source":"@site/blog/2022-11-14_v0.19.mdx","title":"moon v0.19 - Remote caching beta, affected files, and graph optimization","description":"With this release, we\'ve focused heavily on our remote caching architecture. Since this is a massive","date":"2022-11-14T00:00:00.000Z","tags":[{"inline":true,"label":"affected","permalink":"/blog/tags/affected"},{"inline":true,"label":"remote-cache","permalink":"/blog/tags/remote-cache"},{"inline":true,"label":"dep-graph","permalink":"/blog/tags/dep-graph"}],"readingTime":2.96,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.19","title":"moon v0.19 - Remote caching beta, affected files, and graph optimization","authors":["milesj"],"tags":["affected","remote-cache","dep-graph"],"image":"./img/v0.19.png"},"unlisted":false,"prevItem":{"title":"Integrating TypeScript in a monorepo","permalink":"/blog/typescript-monorepo"},"nextItem":{"title":"moon v0.18 - Improved configuration and initialization flow","permalink":"/blog/v0.18"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nWith this release, we\'ve focused heavily on our remote caching architecture. Since this is a massive\\ntask that requires much work behind the scenes, this overall release is rather light.\\n\\n\x3c!--truncate--\x3e\\n\\n## Remote caching beta\\n\\nA major request for moon is to support remote caching. This is a critical feature that allows\\nartifacts to be shared across machines and environments, by storing them in a cloud storage\\nprovider, like AWS S3.\\n\\nWe\'ve been working on this feature for months, primarily behind the scenes building the necessary\\nservices and tools, and we\'ve finally reached a point where we could integrate it with moon\\ndirectly! However, since this feature is very complex, it\'s not yet available to the public, but\\nwhile you wait, you can sign up for beta access! Jump over to the\\n[official remote caching documentation for more information](../docs/guides/remote-cache)!\\n\\nWe\'ll be working on remote caching through every release, continually polishing the implementation,\\nsupporting new features, enabling new regions, calculating pricing, so on and so forth. So stay\\ntuned!\\n\\n## Affected files filtering\\n\\nWe\'ve spent a good portion of this release working on affected detection for projects and tasks,\\nprimarily through `--affected`, and have uncovered and fixed a handful of edge cases. With that\\nbeing said, we asked ourselves, \\"How could we improve the developer experience even more\\"? What\\nabout passing the affected files list to the running task?\\n\\nAnd that\'s exactly what we\'ve done through the new task option\\n[`affectedFiles`](../docs/config/project#affectedfiles)! This option works in unison with the\\n`--affected` option, enabling some awesome functionality. Given the following config:\\n\\n```yaml title=\\"moon.yml\\" {6}\\ntasks:\\n  lint:\\n    command: \'eslint\'\\n    options:\\n      affectedFiles: true\\n```\\n\\nWhen we run this task _without_ `--affected`, it will append an argument for the current directory\\n(`.`). This will lint the entire project.\\n\\n```shell\\n# moon run project:lint\\neslint .\\n```\\n\\nHowever, when we run this task _with_ `--affected`, and have have touched files in the working tree,\\nit will now append an argument for each file that matches the task\'s `inputs`. This will now only\\nlint the provided files, _instead_ of the entire project.\\n\\n```shell\\n# moon run project:lint --affected\\neslint ./file.ts ./another/file.ts\\n```\\n\\nThis functionality is _perfect_ pre-commit hooks, and as such, we\'ve added a\\n[guide for utilizing this pattern with Git hooks](../docs/guides/vcs-hooks)!\\n\\n## Dependency graph optimizations\\n\\nOur dependency graph determines which targets to run, what tools to install, projects to sync, and\\nin which order. It\'s a very complex directed acyclic graph, and has only gotten more complicated\\nover the year, especially with the introduction of project-level tool overrides.\\n\\nWe decided to rewrite the dependency graph from the ground up to mitigate many of these issues,\\noptimize nodes and edges, reduce the number of data cloning, and to increase the overall\\nperformance. Everything will still work exactly the same (all of our existing tests passed with no\\nissue)!\\n\\nOn top of this, we\'ve also migrated the internals of moon to a new hashing algorithm that should see\\na 5-10% increase in performance!\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.19.0) for a\\nfull list of changes.\\n\\n- Package managers in the toolchain are now installed in isolation, instead of through Node.js.\\n- JSON files will now respect the closest `.editorconfig` file.\\n- Webhook payloads now include information about the running CI/CD environment.\\n- Generator can now merge JSON/YAML template files.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.20 release!\\n\\n- Continuation of remote caching work!\\n- Performance improvements for output hydration.\\n- Toolchain improvements."},{"id":"v0.18","metadata":{"permalink":"/blog/v0.18","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-31_v0.18.mdx","source":"@site/blog/2022-10-31_v0.18.mdx","title":"moon v0.18 - Improved configuration and initialization flow","description":"Happy Halloween \ud83c\udf83 \ud83d\udc7b! With this spooky release, we\'ve focused heavily on our internals and","date":"2022-10-31T00:00:00.000Z","tags":[{"inline":true,"label":"project","permalink":"/blog/tags/project"},{"inline":true,"label":"config","permalink":"/blog/tags/config"},{"inline":true,"label":"init","permalink":"/blog/tags/init"},{"inline":true,"label":"node","permalink":"/blog/tags/node"}],"readingTime":2.24,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.18","title":"moon v0.18 - Improved configuration and initialization flow","authors":["milesj"],"tags":["project","config","init","node"],"image":"./img/v0.18.png"},"unlisted":false,"prevItem":{"title":"moon v0.19 - Remote caching beta, affected files, and graph optimization","permalink":"/blog/v0.19"},"nextItem":{"title":"moon v0.17 - Webhooks, extended YAML, and improved runtime performance","permalink":"/blog/v0.17"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nHappy Halloween \ud83c\udf83 \ud83d\udc7b! With this spooky release, we\'ve focused heavily on our internals and\\nbenchmarking performance metrics, so it\'s rather light on new features, but we still have some to\\nshow!\\n\\n\x3c!--truncate--\x3e\\n\\n## Improved projects configuration\\n\\nWhen moon initially launched, it required defining all\\n[`projects`](../docs/config/workspace#projects) using a map. In v0.3, we added support for globs to\\nease the burden of defining many projects. At this point, you had to choose between the 2 patterns,\\nwhich wasn\'t always ideal.\\n\\nTo improve upon this, you can now define a map _and_ globs using a 3rd pattern, like so.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nprojects:\\n  globs:\\n    - \'apps/*\'\\n    - \'packages/*\'\\n  sources:\\n    www: \'www\'\\n```\\n\\n## Improved `moon init` flow\\n\\nThe `moon init` command hasn\'t changed much since our v0.1 release, and with many new features and\\nconfigurations over these last 18 releases, the initialization flow has fallen quite behind. We felt\\nit was the perfect time to modernize this command a bit.\\n\\nOn top of automatically detecting settings from the environment, the command will also now prompt\\nyou with additional questions while configuring Node.js or TypeScript. Here\'s an example of this\\nflow:\\n\\n<Image src={require(\'./img/v0.18/init-flow.png\')} width=\\"80%\\" />\\n\\nFurthermore, the command also supports enabling a new tool (appending configuration to\\n`.moon/workspace.yml`) into an _existing_ moon repository, by running `moon init --tool <name>`.\\n\\n## Customize `node` execution arguments\\n\\nmoon manages the Node.js binary in our toolchain, and runs all Node.js based tasks using this\\nbinary, instead of relying on the binary found in the developer\'s environment. Because of this, how\\n`node` is executed is abstracted away from end users.\\n\\nWhat if you wanted to use an [experimental loader](https://nodejs.org/api/esm.html#loaders) and\\nexecute TypeScript code at _runtime_? Or to preserve symlinks? Well, you couldn\'t... but no longer,\\nas we\'ve added a new setting, [`node.binExecArgs`](../docs/config/toolchain#binexecargs), that\\nallows additional `node` [CLI arguments](https://nodejs.org/api/cli.html#options) to be defined,\\nthat will be passed to _all_ executions.\\n\\n```yaml title=\\".moon/workspace.yml\\" {2-4}\\nnode:\\n  binExecArgs:\\n    - \'--loader\'\\n    - \'@boost/module/loader\'\\n```\\n\\n> Learn more about the\\n> [Boost module loader](https://boostlib.dev/docs/module#ecmascript-module-loaders)!\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.18.0) for a\\nfull list of changes.\\n\\n- Default Node.js version has been updated to v18.12 (the new LTS) from v16.17.\\n- Updated the `moon check` command to support an `--all` flag.\\n- Improvements to how we store stdout/stderr logs for ran targets.\\n- Work tree dirty checks when running migration commands.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.19 release!\\n\\n- Laying the groundwork for _remote caching_!\\n- An in-repo secrets management layer.\\n- Performance and affected improvements."},{"id":"v0.17","metadata":{"permalink":"/blog/v0.17","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-21_v0.17.mdx","source":"@site/blog/2022-10-21_v0.17.mdx","title":"moon v0.17 - Webhooks, extended YAML, and improved runtime performance","description":"With this release, we\'re landing the first iteration of our notifier service, starting with","date":"2022-10-21T00:00:00.000Z","tags":[{"inline":true,"label":"notifier","permalink":"/blog/tags/notifier"},{"inline":true,"label":"runner","permalink":"/blog/tags/runner"},{"inline":true,"label":"config","permalink":"/blog/tags/config"},{"inline":true,"label":"editors","permalink":"/blog/tags/editors"},{"inline":true,"label":"vscode","permalink":"/blog/tags/vscode"}],"readingTime":3.12,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.17","title":"moon v0.17 - Webhooks, extended YAML, and improved runtime performance","authors":["milesj"],"tags":["notifier","runner","config","editors","vscode"],"image":"./img/v0.17.png"},"unlisted":false,"prevItem":{"title":"moon v0.18 - Improved configuration and initialization flow","permalink":"/blog/v0.18"},"nextItem":{"title":"New VS Code extension!","permalink":"/blog/vscode-extension"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nWith this release, we\'re landing the first iteration of our notifier service, starting with\\nwebhooks! We\'ve also spent some time working on quality of life improvements.\\n\\n\x3c!--truncate--\x3e\\n\\n## Breaking changes\\n\\nTo start, we have a few breaking changes this release to be aware of!\\n\\n### Minor changes to ID formatting\\n\\nAn ID refers to many things \u2014 project names, task names, target segments, so on and so forth. When\\nparsing these values, we format them to remove unwanted characters, as these IDs are used in many\\ncontexts, many of which need to be strict.\\n\\nPreviously, we would remove unwanted characters entirely. Instead, we now replace them with dashes\\n(`-`) for better readability. Take the following for example:\\n\\n| ID         | Old       | New        |\\n| :--------- | :-------- | :--------- |\\n| domain.com | domaincom | domain-com |\\n| build:esm  | buildesm  | build-esm  |\\n\\n### Task `type` has been renamed to `platform`\\n\\nThis setting was renamed for a few reasons. To start, tasks actually have a\\n[type internally](../docs/concepts/task#types) that is not configured, but is inferred based on\\nwhat\'s configured. This was a bit confusing.\\n\\nAnd secondly, our toolchain refers to language integrations as platforms, and since this setting\\ndetermines which tool to run with, we wanted to align on the platform terminology.\\n\\n<Tabs\\n  groupId=\\"task-type\\"\\n  defaultValue=\\"before\\"\\n  values={[\\n    { label: \'Before\', value: \'before\' },\\n    { label: \'After\', value: \'after\' },\\n  ]}\\n>\\n<TabItem value=\\"before\\">\\n\\n```yaml\\ntasks:\\n  clean:\\n    command: \'rm -rf ./dist\'\\n    type: \'system\'\\n```\\n\\n</TabItem>\\n<TabItem value=\\"after\\">\\n\\n```yaml\\ntasks:\\n  clean:\\n    command: \'rm -rf ./dist\'\\n    platform: \'system\'\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n> Because of this change, the `$taskType` token was also renamed to `$taskPlatform`!\\n\\n## Webhook events (experimental)\\n\\nLooking to gather metrics for your pipelines? Gain insight into run durations and failures? Maybe\\nyou want to send Slack or Discord notifications? With our new notifier system, this is now possible\\nthrough webhooks!\\n\\nSimply enable the [`notifier.webhookUrl`](../docs/config/workspace#webhookurl) setting to start\\nreceiving events from your CI environments.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nnotifier:\\n  webhookUrl: \'https://api.company.com/some/endpoint\'\\n```\\n\\n> View the [official guide on webhooks](../docs/guides/webhooks) for a full list of events and an\\n> example payload structure!\\n\\n## YAML anchors and aliases\\n\\nWe\'ve updated our YAML configuration files to support extended syntax,\\n[anchors (`&`) and aliases (`*`)](https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/).\\nWith this new syntax, you\'re now able to reduce the amount of duplication required in your config\\nfiles, especially when declaring tasks, as demonstrated below!\\n\\n<Tabs\\n  groupId=\\"yaml\\"\\n  defaultValue=\\"before\\"\\n  values={[\\n    { label: \'Before\', value: \'before\' },\\n    { label: \'After\', value: \'after\' },\\n  ]}\\n>\\n<TabItem value=\\"before\\">\\n\\n```yaml\\ntasks:\\n  astro:\\n    command: \'astro\'\\n    local: true\\n\\n  dev:\\n    command: \'astro dev\'\\n    inputs:\\n      - \'@group(astro)\'\\n    local: true\\n\\n  build:\\n    command: \'astro build\'\\n    inputs:\\n      - \'@group(astro)\'\\n    outputs:\\n      - \'dist\'\\n\\n  check:\\n    command: \'astro check\'\\n    inputs:\\n      - \'@group(astro)\'\\n    deps:\\n      - \'~:typecheck\'\\n\\n  preview:\\n    command: \'astro preview\'\\n    inputs:\\n      - \'@group(astro)\'\\n    deps:\\n      - \'~:build\'\\n    local: true\\n```\\n\\n</TabItem>\\n<TabItem value=\\"after\\">\\n\\n```yaml\\n_astro: &astro\\n  command: \'astro\'\\n  inputs:\\n    - \'@group(astro)\'\\n\\ntasks:\\n  dev:\\n    <<: *astro\\n    args: \'dev\'\\n    local: true\\n\\n  build:\\n    <<: *astro\\n    args: \'build\'\\n    outputs:\\n      - \'dist\'\\n\\n  check:\\n    <<: *astro\\n    args: \'check\'\\n\\n  preview:\\n    <<: *astro\\n    args: \'preview\'\\n    deps:\\n      - \'~:build\'\\n    local: true\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## VS Code extension\\n\\nIf you missed the [announcement earlier this week](./vscode-extension), we released the initial\\nversion of our new VS Code extension! Give it a try and\\n[refer to the documentation](../docs/editors/vscode) for more information.\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.17.0) for a\\nfull list of changes.\\n\\n- Increased runtime performance and reduced memory consumption.\\n- Template enum variables can now define objects for their\\n  [`values`](../docs/config/template#values).\\n- Task `deps` can now omit the `~:` prefix for tasks within the current project.\\n- The `moon check` command can now use the `--report` option.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.18 release!\\n\\n- Workflow improvements for `moon init`.\\n- Benchmarks and performance tuning.\\n- Individual stdout/stderr log files when running tasks."},{"id":"vscode-extension","metadata":{"permalink":"/blog/vscode-extension","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-17_vscode-extension.mdx","source":"@site/blog/2022-10-17_vscode-extension.mdx","title":"New VS Code extension!","description":"We\'re very excited to announce the initial release of our Visual Studio Code extension!","date":"2022-10-17T00:00:00.000Z","tags":[{"inline":true,"label":"editors","permalink":"/blog/tags/editors"},{"inline":true,"label":"vscode","permalink":"/blog/tags/vscode"}],"readingTime":0.72,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"vscode-extension","title":"New VS Code extension!","authors":["milesj"],"tags":["editors","vscode"]},"unlisted":false,"prevItem":{"title":"moon v0.17 - Webhooks, extended YAML, and improved runtime performance","permalink":"/blog/v0.17"},"nextItem":{"title":"moon v0.16 - Per-project tool versions and TypeScript improvements","permalink":"/blog/v0.16"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nWe\'re very excited to announce the initial release of our Visual Studio Code extension!\\n\\n\x3c!--truncate--\x3e\\n\\nIf you\'re a huge VS Code fan like us, you most likely use extensions in your everyday workflow. We\\nwant to enhance this experience by providing a fully integrated and interactive moon console! Here\'s\\na preview of what it looks like:\\n\\n<Image src={require(\'../docs/editors/vscode/projects-view.png\')} width=\\"40%\\" />\\n\\nExcited?? Want to learn more? Check out the official\\n[moonrepo.moon-console](https://marketplace.visualstudio.com/items?itemName=moonrepo.moon-console)\\nmarketplace page, or read the [official documentation](../docs/editors/vscode). This is only the\\nfirst iteration of the extension. Expect more advanced features in the future, like...\\n\\n- Schema validation for configuration files\\n- Autocompletion for configuration files\\n- Automatic running/building of projects in the background\\n- File type association\\n- Integrated language server\\n- And much more!"},{"id":"v0.16","metadata":{"permalink":"/blog/v0.16","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-10-06_v0.16.mdx","source":"@site/blog/2022-10-06_v0.16.mdx","title":"moon v0.16 - Per-project tool versions and TypeScript improvements","description":"With this release, we\'ve landed a long standing request of supporting project-level overrides for","date":"2022-10-06T00:00:00.000Z","tags":[{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"},{"inline":true,"label":"runner","permalink":"/blog/tags/runner"},{"inline":true,"label":"generator","permalink":"/blog/tags/generator"},{"inline":true,"label":"typescript","permalink":"/blog/tags/typescript"},{"inline":true,"label":"node","permalink":"/blog/tags/node"}],"readingTime":3.44,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.16","title":"moon v0.16 - Per-project tool versions and TypeScript improvements","authors":["milesj"],"tags":["toolchain","runner","generator","typescript","node"],"image":"./img/v0.16.png"},"unlisted":false,"prevItem":{"title":"New VS Code extension!","permalink":"/blog/vscode-extension"},"nextItem":{"title":"moon v0.15 - Enhanced Docker support and 1,000 stars!","permalink":"/blog/v0.15"}},"content":"With this release, we\'ve landed a long standing request of supporting project-level overrides for\\ntools configured in the workspace, as well as some quality of life improvements for TypeScript.\\n\\n\x3c!--truncate--\x3e\\n\\n## Per-project tool version overrides\\n\\nSince moons inception, our [toolchain](../docs/concepts/toolchain) has only supported a single\\nversion of a tool (Node.js), as we wanted to embrace the single version policy and encourage all\\nconsumers to keep their tooling version consistent across all projects for reliability. While this\\nworks flawlessly, it\'s not entirely realistic, as many companies have legacy projects that are stuck\\non older versions for whatever reason, and integrating them into moon was rather difficult.\\n\\nWell no more! We\'ve refactored our toolchain to support tool overrides on a project-by-project\\nbasis. Since we only support Node.js at the moment, this can be achieved with the new\\n[`workspace.node.version`](../docs/config/project#node) setting in\\n[`moon.yml`](../docs/config/project).\\n\\nFor example, if your workspace Node.js version is configured as v18.\\n\\n```yaml title=\\".moon/workspace.yml\\"\\nnode:\\n  version: \'18.0.0\'\\n```\\n\\nYou can now override this version at the project-level. Let\'s go with v14.\\n\\n```yaml title=\\"<project>/moon.yml\\"\\nworkspace:\\n  node:\\n    version: \'14.0.0\'\\n```\\n\\nWhen running a task from a project with overrides, the toolchain will download, install, and\\nconfigure the new version behind the scenes. This new version will then be used to install\\ndependencies and execute the tasks commands.\\n\\n> Although we now support overriding the tool version, the workspace configured package manager\\n> (`node.packageManager`) and associated version cannot be overridden. This is unlikely to change.\\n\\n## Per-project dependency installs\\n\\nBecause of the toolchain refactor above, we now support per-project dependency installs as a welcome\\nside-effect. This is a necessary step in supporting new languages, especially for those that don\'t\\ninstall dependencies in the workspace for all projects, and must install them per project.\\n\\nThis also means that moon now supports non-`package.json` workspaces! If your repository _is not_\\nusing npm/pnpm/yarn workspaces, or a project _is not_ listed within the workspaces glob list,\\ndependencies will be installed within the project.\\n\\n## TypeScript improvements\\n\\n### Routing `outDir` to the cache\\n\\nA requirement for using project references is that each project must compile declarations (`.d.ts`)\\nso that consumers/dependents can resolve type information. While this makes sense, it becomes rather\\nunfortunate as each project folder is now littered with the declaration outputs, which are typically\\ngitignored.\\n\\nTo improve this experience, we\'re introducing a new setting\\n[`typescript.routeOutDirToCache`](../docs/config/toolchain#routeoutdirtocache), that will update the\\n`outDir` compiler option of _all_ projects to route to moon\'s cache directory (which should already\\nbe gitignored). This will standardize the use of project references for the entire repository.\\n\\nFor example, a project at \\"packages/components\\" will route to the following output directory:\\n\\n```json title=\\"<project>/tsconfig.json\\"\\n{\\n  // ...\\n  \\"compilerOptions\\": {\\n    // ...\\n    \\"outDir\\": \\"../../.moon/cache/types/packages/components\\"\\n  }\\n}\\n```\\n\\n> If you require declarations to live within the project, for example an npm package that ships\\n> types, you should introduce an additional configuration to handle this, like\\n> `tsconfig.build.json`.\\n\\n### Mapping project references as `paths`\\n\\nmoon automatically keeps TypeScript project references in sync with the\\n[`typescript.syncProjectReferences`](../docs/config/toolchain#syncprojectreferences) setting, which\\nis great, but we can take it further. With the new\\n[`typescript.syncProjectReferencesToPaths`](../docs/config/toolchain#syncprojectreferencestopaths)\\nsetting, project references (either synced or explicitly defined) will _also_ be mapped to the\\n`paths` compiler option, automating the list of import aliases.\\n\\nFor example, if a reference has the package name `@brand/components`, the `paths` will be mapped\\nwith:\\n\\n```json title=\\"<project>/tsconfig.json\\"\\n{\\n  // ...\\n  \\"compilerOptions\\": {\\n    // ...\\n    \\"paths\\": {\\n      \\"@brand/components\\": [\\"../shared/components/src/index.ts\\"],\\n      \\"@brand/components/*\\": [\\"../shared/components/src/*\\"]\\n    }\\n  },\\n  \\"references\\": [\\n    {\\n      \\"path\\": \\"../shared/components\\"\\n    }\\n  ]\\n}\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.16.0) for a\\nfull list of changes.\\n\\n- Template files can now be suffixed with `.tera` or `.twig` for\\n  [syntax highlighting](../docs/guides/codegen#file-extensions).\\n- We now display more commands and information when running tasks.\\n- Declare implicit task dependencies with a new [`runner.implicitDeps`](../docs/config/workspace)\\n  setting.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.17 release!\\n\\n- Webhooks for important pipeline events (for real this time)!\\n- YAML anchors and references in config files.\\n- And [many more](https://github.com/moonrepo/moon/issues/356)..."},{"id":"v0.15","metadata":{"permalink":"/blog/v0.15","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-09-26_v0.15.mdx","source":"@site/blog/2022-09-26_v0.15.mdx","title":"moon v0.15 - Enhanced Docker support and 1,000 stars!","description":"With this release, we\'ve focused heavily on Docker integration and enhancing the Dockerfile","date":"2022-09-26T00:00:00.000Z","tags":[{"inline":true,"label":"generator","permalink":"/blog/tags/generator"},{"inline":true,"label":"docker","permalink":"/blog/tags/docker"}],"readingTime":3.98,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.15","title":"moon v0.15 - Enhanced Docker support and 1,000 stars!","authors":["milesj"],"tags":["generator","docker"],"image":"./img/v0.15.png"},"unlisted":false,"prevItem":{"title":"moon v0.16 - Per-project tool versions and TypeScript improvements","permalink":"/blog/v0.16"},"nextItem":{"title":"moon v0.14 - Code generation and implicit dependencies","permalink":"/blog/v0.14"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nWith this release, we\'ve focused heavily on Docker integration and enhancing the `Dockerfile`\\nworkflow, as well as some minor quality of life improvements for template files and run reports.\\n\\n\x3c!--truncate--\x3e\\n\\n## 1,000 \u2b50\ufe0f\ud83c\udf1f\u2b50\ufe0f!\\n\\nBefore we dive into the release, we want to thank everyone for the initial support, as we passed\\n[1,000 stars on GitHub](https://github.com/moonrepo/moon) earlier this week! moon was announced back\\nin June, and to reach this milestone in roughly 3 months is very exciting. We greatly appreciate the\\nsupport, and to everyone that is using moon and providing feedback, we thank you from the bottom of\\nour hearts!\\n\\nWe have a very long roadmap ahead of us, but are very excited to bring all of these features to you,\\nand to improve the overall developer experience for your monorepos! Here\'s to 10,000 stars!\\n\\n## First-class Docker support\\n\\n[Docker](https://www.docker.com/) is a very popular tool that is typically a part of a developers\\nworkflow, but is also a very tedious one, as `Dockerfile`s have to be manually curated for every\\nproject. We aim to mitigate this problem by supporting Docker as a first-class feature, and by\\nintroducing 2 new commands, [`moon docker scaffold`](../docs/commands/docker/scaffold) and\\n[`moon docker prune`](../docs/commands/docker/prune).\\n\\nThese commands will automate a `Dockerfile` as much as possible to effectively take advantage of\\nDocker\'s layer caching, multi-staged builds, to reduce the amount of manual `COPY` commands, to\\nreduce the overall size of the container or image, and much more. To demonstrate this, compare the\\nbefore and after `Dockerfile`s below!\\n\\n<Tabs\\n  groupId=\\"dockerfile\\"\\n  defaultValue=\\"before\\"\\n  values={[\\n    { label: \'Before\', value: \'before\' },\\n    { label: \'After\', value: \'after\' },\\n  ]}\\n>\\n<TabItem value=\\"before\\">\\n\\n```docker\\nFROM node:latest\\n\\nWORKDIR /app\\n\\n# Install moon binary\\nRUN npm install -g @moonrepo/cli\\n\\n# Copy moon files\\nCOPY ./.moon ./.moon\\n\\n# Copy all package.json\'s and lockfiles\\nCOPY ./packages/cli/package.json ./packages/cli/package.json\\nCOPY ./packages/core-linux-arm64-gnu/package.json ./packages/core-linux-arm64-gnu/package.json\\nCOPY ./packages/core-linux-arm64-musl/package.json ./packages/core-linux-arm64-musl/package.json\\nCOPY ./packages/core-linux-x64-gnu/package.json ./packages/core-linux-x64-gnu/package.json\\nCOPY ./packages/core-linux-x64-musl/package.json ./packages/core-linux-x64-musl/package.json\\nCOPY ./packages/core-macos-arm64/package.json ./packages/core-macos-arm64/package.json\\nCOPY ./packages/core-macos-x64/package.json ./packages/core-macos-x64/package.json\\nCOPY ./packages/core-windows-x64-msvc/package.json ./packages/core-windows-x64-msvc/package.json\\nCOPY ./packages/runtime/package.json ./packages/runtime/package.json\\nCOPY ./packages/types/package.json ./packages/types/package.json\\nCOPY ./package.json ./package.json\\nCOPY ./yarn.lock ./yarn.lock\\nCOPY ./.yarn ./.yarn\\nCOPY ./.yarnrc.yml ./yarnrc.yml\\n\\n# Install toolchain and dependencies\\nRUN moon setup\\n\\n# Copy project and required files\\nCOPY ./packages/types ./packages/types\\nCOPY ./packages/runtime ./packages/runtime\\n# COPY . .\\n\\n# Build the target\\nRUN moon run runtime:build\\n```\\n\\n</TabItem>\\n<TabItem value=\\"after\\">\\n\\n```docker\\n#### BASE\\nFROM node:latest AS base\\nWORKDIR /app\\n\\n# Install moon binary\\nRUN npm install -g @moonrepo/cli\\n\\n#### WORKSPACE\\nFROM base AS workspace\\nWORKDIR /app\\n\\n# Copy entire repository and scaffold\\nCOPY . .\\nRUN moon docker scaffold runtime\\n\\n#### BUILD\\nFROM base AS build\\nWORKDIR /app\\n\\n# Copy workspace skeleton\\nCOPY --from=workspace /app/.moon/docker/workspace .\\n\\n# Install toolchain and dependencies\\nRUN moon setup\\n\\n# Copy source files\\nCOPY --from=workspace /app/.moon/docker/sources .\\n\\n# Build the target\\nRUN moon run runtime:build\\n\\n# Prune workspace\\nRUN moon docker prune\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n> View the official [Docker usage guide](../docs/guides/docker) for an in-depth walkthrough of all\\n> these new features!\\n\\n## Frontmatter for template files\\n\\nWe released [templates and the generator in v0.14](./v0.14) for quick and easy code generation.\\nSince it was the initial release, it provided the bare minimum of features for common workflows.\\nWe\'ll continually improve this system over each release, and have done just that for this release,\\nas all template files now support [frontmatter](../docs/guides/codegen#frontmatter)! Frontmatter is\\na mechanism for declaring _per-file configuration_, and is denoted by `---` delimiters at the top of\\nthe file.\\n\\nThis allows you to do some really cool stuff, like overriding the destination path of the file using\\nthe `to` field, as well as taking full advantage of Tera\'s filters and conditional rendering!\\n\\n```twig title=\\"templates/react/components/base.tsx\\"\\n{% set component_name = name | pascal_case %}\\n\\n---\\nto: components/{{ component_name }}.tsx\\n---\\n\\nexport function {{ component_name }}() {\\n\\treturn <div />;\\n}\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.15.0) for a\\nfull list of changes.\\n\\n- Run reports (via `--report`) now include additional information, like the total duration, and\\n  estimated time savings.\\n  - The [moonrepo/run-report-action](https://github.com/marketplace/actions/moon-ci-run-reports) has\\n    been updated with this information.\\n- Improved pnpm integration for Go/Rust binaries shipped in node modules.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.16 release!\\n\\n- Quality of life improvements for TypeScript.\\n- Per-project overrides for language/tool versions."},{"id":"v0.14","metadata":{"permalink":"/blog/v0.14","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-09-13_v0.14.mdx","source":"@site/blog/2022-09-13_v0.14.mdx","title":"moon v0.14 - Code generation and implicit dependencies","description":"With this release, we\'ve landed some new features that have been requested multiple times since","date":"2022-09-13T00:00:00.000Z","tags":[{"inline":true,"label":"generator","permalink":"/blog/tags/generator"},{"inline":true,"label":"project-graph","permalink":"/blog/tags/project-graph"},{"inline":true,"label":"ci","permalink":"/blog/tags/ci"}],"readingTime":2.01,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.14","title":"moon v0.14 - Code generation and implicit dependencies","authors":["milesj"],"tags":["generator","project-graph","ci"]},"unlisted":false,"prevItem":{"title":"moon v0.15 - Enhanced Docker support and 1,000 stars!","permalink":"/blog/v0.15"},"nextItem":{"title":"moon v0.13 - Hashing and toolchain improvements","permalink":"/blog/v0.13"}},"content":"import Image from \'@site/src/components/Image\';\\n\\nWith this release, we\'ve landed some new features that have been requested multiple times since\\nlaunch. A code generation and template scaffolding layer, as well as implicit dependency scanning\\nfor the project graph!\\n\\n\x3c!--truncate--\x3e\\n\\n## New `moon generate` command\\n\\nCode generation is the staple of any large company or repository. Want to spin up a new application?\\nWhat about an npm package? Or maybe third-party integrations? Avoid copy-and-pasting existing code,\\nand instead generate it with the new `moon generate` command, which is powered by our new generator\\nsystem.\\n\\nThe generator will locate a template by name on the file system (\\"npm-package\\" in the example\\nbelow), prompt and interpolate variables, render the files with [Tera](https://tera.netlify.app/) (a\\nRust based template engine), and write the files to the target destination.\\n\\n```shell\\n# Generate code from a template to a target directory\\n$ moon generate npm-package ./packages/example\\n```\\n\\nLearn more about [code generation in the official guide](../docs/guides/codegen)!\\n\\n## Implicit dependency scanning\\n\\nThis has been a request since moon\'s official release, and it\'s finally here! Up until now, if you\\nwanted project-to-project dependency relationships, you had to explicitly declare them with\\n[`dependsOn`](../docs/config/project#dependson). But thanks to a\\n[ton of](https://github.com/moonrepo/moon/pull/288)\\n[infrastructure](https://github.com/moonrepo/moon/pull/249) and\\n[platform](https://github.com/moonrepo/moon/pull/277) changes, we can now infer implicit\\ndependencies automatically!\\n\\nWe still suggest using explicit dependencies, as it provides more\\n[automation like project syncing](../docs/concepts/project#dependencies), but implicit is great for\\nadoption and migration purposes.\\n\\n## Report CI runs on pull requests\\n\\nWe\'re fans of continuous and easily accessible feedback, and as such, have released a new GitHub\\naction, [`moonrepo/run-report-action`](https://github.com/marketplace/actions/moon-ci-run-reports),\\nwhich reports the results of [`moon ci`](../docs/commands/ci) as a pull request comment. The report\\nlooks something like the following:\\n\\n<Image src={require(\'../static/img/github/run-report.png\')} width=\\"60%\\" />\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.14.0) for a\\nfull list of changes.\\n\\n- When running in a Docker container, caching is disabled in an effort to greatly reduce the size of\\n  the image.\\n- Updated `moon setup` to also install Node.js dependencies.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.15 release!\\n\\n- Major Docker workflow improvements!\\n- Frontmatter configuration within template files."},{"id":"v0.13","metadata":{"permalink":"/blog/v0.13","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2022-09-01_v0.13.mdx","source":"@site/blog/2022-09-01_v0.13.mdx","title":"moon v0.13 - Hashing and toolchain improvements","description":"With this release, we\'ve landed some improvements to our smart hashing, and paved the road for","date":"2022-09-01T00:00:00.000Z","tags":[{"inline":true,"label":"hasher","permalink":"/blog/tags/hasher"},{"inline":true,"label":"toolchain","permalink":"/blog/tags/toolchain"}],"readingTime":3.14,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"v0.13","title":"moon v0.13 - Hashing and toolchain improvements","authors":["milesj"],"tags":["hasher","toolchain"]},"unlisted":false,"prevItem":{"title":"moon v0.14 - Code generation and implicit dependencies","permalink":"/blog/v0.14"}},"content":"With this release, we\'ve landed some improvements to our smart hashing, and paved the road for\\nadditional languages and tooling.\\n\\n\x3c!--truncate--\x3e\\n\\n## Node.js is now optional\\n\\nTitle may seem confusing at first, but don\'t worry, everything is fine! For some context, moon has\\nbeen designed to be language agnostic as we plan to support more than JavaScript in the future.\\nHowever, some aspects of the codebase were hard-coded for JavaScript and made the assumption that\\nJavaScript will always be used, with one such aspect being the [`node`](../docs/config/workspace)\\nsetting in [`.moon/workspace.yml`](../docs/config/workspace).\\n\\nWe\'ve reworked this setting to be optional, which allows a repository to opt out of JavaScript.\\nRight now, this basically does nothing as we do not support other languages yet, but we felt it\\nnecessary to report it anyways! A side-effect of this change is that actions in the runner have been\\nrenamed, for example, `SetupToolchain` -> `SetupNodeToolchain`.\\n\\n## Improved hashing accuracy\\n\\nOur [smart hashing layer](../docs/concepts/cache#hashing) is pretty powerful, but was not entirely\\naccurate. Up until now, when hashing a Node.js project, we\'d include the `dependencies`,\\n`devDependencies`, and `peerDependencies` versions located within the project\'s `package.json` as\\nhash inputs. This was great, because if a dependency was explicitly upgraded in the `package.json`,\\nit would invalidate the previous hashes as the version number changed.\\n\\nHowever, what if the dependency was implicitly upgraded by another project, but the `package.json`\\nwas not modified? These kind of transitive changes were currently ignored by moon, but no longer, as\\nmoon will now resolve all `package.json` dependencies to the resolved version found in the root\\nlockfile (`package-lock.json`, `yarn.lock`, etc)!\\n\\nAt moon, we believe in providing consumers with the ability to configure to their needs, and as\\nsuch, have added a new [`hasher`](../docs/config/workspace#hasher) setting to\\n[`.moon/workspace.yml`](../docs/config/workspace). This setting will allow you to choose between the\\n2 hashing patterns above!\\n\\n## New `moon check` command\\n\\nIf you\'re like us, you\'re constantly testing, linting, typechecking, so on and so forth, a project\\nwhile developing. This was rather cumbersome, as you either had to use separate run commands\\n(`moon run project:test`, `moon run project:lint`, etc), or use the multi-run approach\\n(`moon run project:test project:lint`). Both approaches were not ideal for rapid development.\\n\\nTo simplify this process, we\'ve added a new [`moon check`](../docs/commands/check) command, that\\nwill automatically run _all_ build and test tasks for a project (or many projects)! Local and non-CI\\ntasks will _not_ be ran.\\n\\n```shell\\n# Check project at current working directory\\n$ moon check\\n\\n# Check project by name\\n$ moon check app\\n\\n# Check multiple projects by name\\n$ moon check client server\\n```\\n\\n## New `@moonrepo/types` package\\n\\nWe have many ideas for moon specific npm packages that we plan to release, but before we do that, we\\nneed to ensure all of them are built with the correct interfaces. To solve this, we are shipping a\\nnew package, [@moonrepo/types](https://www.npmjs.com/package/@moonrepo/types), that simply publishes\\nTypeScript declarations. It contains everything from project and task shapes, configuration\\nstructures, runner information, and more.\\n\\n```ts\\nimport type { ProjectConfig } from \'@moonrepo/types\';\\n```\\n\\n## Other changes\\n\\nView the\\n[official release](https://github.com/moonrepo/moon/releases/tag/%40moonrepo%2Fcli%400.13.0) for a\\nfull list of changes.\\n\\n- The runner will now fail with an error if a task has defined `outputs` but an output was not\\n  created after the task is executed. This change was made so that artifacts are deterministic.\\n- The `actionRunner` setting in [`.moon/workspace.yml`](../docs/config/workspace) was renamed to\\n  `runner`.\\n\\n## What\'s next?\\n\\nExpect the following in the v0.14 release!\\n\\n- A `moon generate` command to generate new projects, files, scaffolding, and more from pre-defined\\n  templates.\\n- Implicit dependency discovery. moon will now scan manifest files and determine project\\n  relationships."}]}}')}}]);