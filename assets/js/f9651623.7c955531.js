"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[72687],{21836:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var s=t(83242),o=t(62540),i=t(43023),a=t(44338);const r={slug:"moon-v1.6",title:"moon v1.6 - Persistent tasks and task extending RFC",authors:["milesj"],tags:["tasks","rfc","log"],image:"./img/moon/v1.6.png"},l=void 0,c={image:t(65191).A,authorsImageUrls:[void 0]},d=[{value:"RFC: Task extending/variants",id:"rfc-task-extendingvariants",level:2},{value:"Persistent tasks",id:"persistent-tasks",level:2},{value:"Logging migration",id:"logging-migration",level:2},{value:"Other changes",id:"other-changes",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In this release, we're introducing a new feature called persistent tasks, and an RFC for extending\ntasks."}),"\n",(0,o.jsx)(n.h2,{id:"rfc-task-extendingvariants",children:"RFC: Task extending/variants"}),"\n",(0,o.jsxs)(n.p,{children:["Before we dive into this release, we want to briefly talk about a new RFC that we're looking for\nfeedback on, ",(0,o.jsx)(n.a,{href:"https://github.com/moonrepo/moon/issues/849",children:"task extending/variants"}),". This is a\nfeature that has been top-of-mind since moon's inception, but we haven't had the foundation in place\nto support it, nor what the API should look like."]}),"\n",(0,o.jsx)(n.p,{children:"The gist of the RFC is that we want to support tasks that extend other tasks with additional\narguments. This is a common workflow with npm scripts:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "lint": "eslint .",\n    "lint:fix": "npm run lint --fix"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"As consumers of moon, we'd appreciate any feedback on the RFC before we move forward!"}),"\n",(0,o.jsx)("div",{class:"flex justify-center",children:(0,o.jsx)(a.A,{label:"View RFC",href:"https://github.com/moonrepo/moon/issues/849",size:"lg"})}),"\n",(0,o.jsx)(n.h2,{id:"persistent-tasks",children:"Persistent tasks"}),"\n",(0,o.jsxs)(n.p,{children:["Tasks that never complete, like servers and watchers, are known as persistent tasks. Historically we\nhad support for these kinds of tasks through the ",(0,o.jsx)(n.a,{href:"/docs/config/project#local",children:(0,o.jsx)(n.code,{children:"local"})})," setting in\n",(0,o.jsx)(n.a,{href:"/docs/config/project",children:(0,o.jsx)(n.code,{children:"moon.yml"})}),". This setting would modify the task for continuous execution by\ndisabling caching, streaming output, and not running in CI."]}),"\n",(0,o.jsxs)(n.p,{children:["While this worked for the most part, there was one scenario that was still problematic, and that was\nrunning multiple persistent tasks in parallel. Depending on the task dependency chain, sometimes\nthese tasks would ",(0,o.jsx)(n.em,{children:"not"})," run in parallel, some may never start (blocked on another tasks), or the\norder of nodes in the graph is non-ideal. A great example of this can be found in this\n",(0,o.jsx)(n.a,{href:"https://github.com/moonrepo/moon/discussions/830",children:"discussion thread"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To mitigate this problem, we're introducing a new task option,\n",(0,o.jsx)(n.a,{href:"/docs/config/project#persistent",children:(0,o.jsx)(n.code,{children:"persistent"})})," (which is also enabled by the ",(0,o.jsx)(n.code,{children:"local"})," setting). When\na task is marked as persistent, it will always ",(0,o.jsx)(n.em,{children:"run last and in parallel"})," within the dependency\ngraph, after all dependencies (from all other persistent tasks) have completed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"tasks:\n  dev:\n    command: 'next dev'\n    local: true\n    # OR\n    options:\n      persistent: true\n"})}),"\n",(0,o.jsx)(n.p,{children:"This is a perfect solution to running multiple development servers and tools in watch mode:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="moon.yml"',children:"tasks:\n  dev:\n    command: 'noop'\n    deps:\n      - 'frontend:dev'\n      - 'backend:dev'\n      - 'database:start'\n      - 'tailwind:watch'\n"})}),"\n",(0,o.jsx)(n.h2,{id:"logging-migration",children:"Logging migration"}),"\n",(0,o.jsxs)(n.p,{children:["This is more of a heads up than anything, but we've started an internal Rust migration from the old\n",(0,o.jsx)(n.a,{href:"https://crates.io/crates/log",children:"log"})," crate to the new ",(0,o.jsx)(n.a,{href:"https://crates.io/crates/tracing",children:"tracing"}),"\ncrate. Tracing provides is with far more information, metrics, and instrumentation, which we hope to\ntake advantage of in the future."]}),"\n",(0,o.jsxs)(n.p,{children:["This will be an ongoing migration that will last for many releases, and during this time while we\nsupport both ",(0,o.jsx)(n.code,{children:"log"})," and ",(0,o.jsx)(n.code,{children:"tracing"})," in unison, the logs will be a bit noisy. We'll be working to clean\nup the logs as we gradually convert the codebase."]}),"\n",(0,o.jsxs)(n.p,{children:["And lastly, the move to ",(0,o.jsx)(n.code,{children:"tracing"}),' has also caused the log output to change. For example, in the log\nexcerpt below, all messages with "log" after the date are the old ',(0,o.jsx)(n.code,{children:"log"})," crate, while the others with\ndistinct module names are the new ",(0,o.jsx)(n.code,{children:"tracing"})," crate."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-log",children:'[DEBUG 14:44:19] moon_process::command_inspector  Running command git status --porcelain --untracked-files -z  env_vars={} working_dir="~/Projects/moon"\n[DEBUG 14:44:19] log  Filtering based on touched status "all"  log.target="moon:query:touched-files" log.module_path="moon_cli::queries::touched_files" log.file="crates/cli/src/queries/touched_files.rs" log.line=85\n[DEBUG 14:44:19] log  Creating dependency graph  log.target="moon:dep-graph" log.module_path="moon_dep_graph::dep_builder" log.file="crates/core/dep-graph/src/dep_builder.rs" log.line=35\n[DEBUG 14:44:19] log  Running 32 actions across 5 batches  log.target="moon:action-pipeline" log.module_path="moon_action_pipeline::pipeline" log.file="crates/core/action-pipeline/src/pipeline.rs" log.line=93\n[DEBUG 14:44:19] log  Setting up Node.js 20.0.0 toolchain  log.target="moon:action:setup-tool" log.module_path="moon_action_pipeline::actions::setup_tool" log.file="crates/core/action-pipeline/src/actions/setup_tool.rs" log.line=26\n[DEBUG 14:44:19] proto_node::resolve  Resolving a semantic version for "20.0.0"\n[DEBUG 14:44:19] proto_core::resolver:load_versions_manifest  Loading versions manifest from local cache  cache_file=~/.proto/temp/3d16d1693e83828f98bae178f181d5a01103b7f222db27cdeaec9b4950e951d7.json\n'})}),"\n",(0,o.jsx)(n.h2,{id:"other-changes",children:"Other changes"}),"\n",(0,o.jsxs)(n.p,{children:["View the ",(0,o.jsx)(n.a,{href:"https://github.com/moonrepo/moon/releases/tag/v1.6.0",children:"official release"})," for a full list of\nchanges."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Updated long running processes to log a checkpoint indicating it's still running."}),"\n",(0,o.jsx)(n.li,{children:"Reworked file groups to use workspace relative paths, instead of project relative."}),"\n",(0,o.jsx)(n.li,{children:"Reworked processes to better handle command line arguments, shells, and piped stdin input."}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},43023:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(63696);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},65191:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/v1.6-5fc0fb4e6b0bbe85a5016ff7f3c28b89.png"},83242:e=>{e.exports=JSON.parse('{"permalink":"/blog/moon-v1.6","editUrl":"https://github.com/moonrepo/moon/tree/master/website/blog/2023-05-15_moon-v1.6.mdx","source":"@site/blog/2023-05-15_moon-v1.6.mdx","title":"moon v1.6 - Persistent tasks and task extending RFC","description":"In this release, we\'re introducing a new feature called persistent tasks, and an RFC for extending","date":"2023-05-15T00:00:00.000Z","tags":[{"inline":true,"label":"tasks","permalink":"/blog/tags/tasks"},{"inline":true,"label":"rfc","permalink":"/blog/tags/rfc"},{"inline":true,"label":"log","permalink":"/blog/tags/log"}],"readingTime":3.69,"hasTruncateMarker":true,"authors":[{"name":"Miles Johnson","title":"Founder, developer","url":"https://github.com/milesj","imageURL":"/img/authors/miles.jpg","key":"milesj","page":null}],"frontMatter":{"slug":"moon-v1.6","title":"moon v1.6 - Persistent tasks and task extending RFC","authors":["milesj"],"tags":["tasks","rfc","log"],"image":"./img/moon/v1.6.png"},"unlisted":false,"prevItem":{"title":"proto v0.9 - New GitHub action, plugin unpacking, and more","permalink":"/blog/proto-v0.9"},"nextItem":{"title":"moon v1.5 - Rust tier 2 and 3 support","permalink":"/blog/moon-v1.5"}}')}}]);