// Automatically generated by schematic. DO NOT MODIFY!

/* eslint-disable */

import type { ExtendsFrom, Id } from './common';
import type { PluginLocator } from './toolchain-config';

/** How to order ownership rules within the generated file. */
export type CodeownersOrderBy = 'file-source' | 'project-id';

/** Configures code ownership rules for generating a `CODEOWNERS` file. */
export interface CodeownersConfig {
	/**
	 * A map of global file paths and glob patterns to a list of owners.
	 * Can be relative from the workspace root, or a wildcard match for any depth.
	 */
	globalPaths: Record<string, string[]>;
	/**
	 * How to order ownership rules within the generated file.
	 *
	 * @default 'file-source'
	 * @type {'file-source' | 'project-id'}
	 */
	orderBy: CodeownersOrderBy;
	/**
	 * Bitbucket and GitLab only. The number of approvals required for the
	 * request to be satisfied. This will be applied to all paths.
	 * @since 1.28.0
	 */
	requiredApprovals: number | null;
	/**
	 * Automatically generate a `CODEOWNERS` file during a sync operation,
	 * after aggregating all ownership rules from each project in the workspace.
	 */
	sync: boolean;
}

/** Configures boundaries and constraints between projects. */
export interface ConstraintsConfig {
	/**
	 * Enforces relationships between projects based on each project's
	 * `layer` setting.
	 *
	 * @default true
	 */
	enforceLayerRelationships?: boolean;
	/**
	 * Enforces relationships between projects based on each project's
	 * `tags` setting. Requires a mapping of tags, to acceptable tags.
	 */
	tagRelationships: Record<Id, Id[]>;
}

/** Configures aspects of the Docker pruning process. */
export interface DockerPruneConfig {
	/**
	 * Automatically delete vendor directories (package manager
	 * dependencies, build targets, etc) while pruning.
	 *
	 * @default true
	 */
	deleteVendorDirectories?: boolean;
	/**
	 * Automatically install production dependencies for all required
	 * toolchain's of the focused projects within the Docker build.
	 *
	 * @default true
	 */
	installToolchainDeps?: boolean;
}

/** Configures aspects of the Docker scaffolding process. */
export interface DockerScaffoldConfig {
	/**
	 * Copy toolchain specific configs/manifests/files into
	 * the configuration skeleton.
	 *
	 * @default true
	 * @deprecated
	 */
	copyToolchainFiles?: boolean;
	/**
	 * List of glob patterns, relative from the workspace root,
	 * to include (or exclude) in the configuration skeleton.
	 */
	include: string[];
}

/** Configures our Docker integration. */
export interface DockerConfig {
	/** Configures aspects of the Docker pruning process. */
	prune: DockerPruneConfig;
	/** Configures aspects of the Docker scaffolding process. */
	scaffold: DockerScaffoldConfig;
}

/** Configures experiments across the entire moon workspace. */
export interface ExperimentsConfig {
	/**
	 * Enable faster glob file system walking.
	 *
	 * @default true
	 */
	fasterGlobWalk?: boolean;
	/**
	 * Enable a faster and more accurate Git implementation.
	 * Supports submodules, subtrees, and worktrees.
	 *
	 * @default true
	 */
	gitV2?: boolean;
}

/** Configures an individual extension. */
export interface ExtensionPluginConfig {
	/** Arbitrary configuration that'll be passed to the WASM plugin. */
	config: Record<string, unknown>;
	/** Location of the WASM plugin to use. */
	plugin: PluginLocator | null;
}

/** Configures the generator for scaffolding from templates. */
export interface GeneratorConfig {
	/**
	 * The list of file paths, relative from the workspace root,
	 * in which to locate templates.
	 */
	templates?: string[];
}

/** The optimization to use when hashing. */
export type HasherOptimization = 'accuracy' | 'performance';

/** The strategy to use when walking the file system. */
export type HasherWalkStrategy = 'glob' | 'vcs';

/** Configures aspects of the content hashing engine. */
export interface HasherConfig {
	/**
	 * When `warnOnMissingInputs` is enabled, filters missing file
	 * paths from logging a warning.
	 * @since 1.10.0
	 */
	ignoreMissingPatterns: string[];
	/**
	 * Filters file paths that match a configured glob pattern
	 * when a hash is being generated. Patterns are workspace relative,
	 * so prefixing with `**` is recommended.
	 * @since 1.10.0
	 */
	ignorePatterns: string[];
	/**
	 * The optimization to use when hashing.
	 *
	 * @default 'accuracy'
	 * @type {'accuracy' | 'performance'}
	 */
	optimization: HasherOptimization;
	/**
	 * The strategy to use when walking the file system.
	 *
	 * @default 'vcs'
	 * @type {'glob' | 'vcs'}
	 */
	walkStrategy: HasherWalkStrategy;
	/**
	 * Logs a warning when a task has configured an explicit file path
	 * input, and that file does not exist when hashing.
	 *
	 * @default true
	 */
	warnOnMissingInputs?: boolean;
}

/** The types of events in which to send notifications. */
export type NotifierEventType = 'never' | 'always' | 'failure' | 'success' | 'task-failure';

/** Configures how and where notifications are sent. */
export interface NotifierConfig {
	/**
	 * Display an OS notification for certain action pipeline events.
	 * @since 1.38.0
	 *
	 * @default 'never'
	 */
	terminalNotifications: NotifierEventType | null;
	/**
	 * Whether webhook requests require acknowledgment (2xx response).
	 * @since 1.38.0
	 */
	webhookAcknowledge: boolean;
	/** A secure URL in which to send webhooks to. */
	webhookUrl: string | null;
}

export type PipelineActionSwitch = null | boolean | Id[];

/** Configures aspects of the action pipeline. */
export interface PipelineConfig {
	/**
	 * Automatically clean the cache after every task run.
	 * @since 1.24.0
	 *
	 * @default true
	 */
	autoCleanCache?: boolean;
	/**
	 * The lifetime in which task outputs will be cached.
	 *
	 * @default '7 days'
	 */
	cacheLifetime?: string;
	/**
	 * Automatically inherit color settings for all tasks being ran.
	 *
	 * @default true
	 */
	inheritColorsForPipedTasks?: boolean;
	/**
	 * Run the `InstallDependencies` actions for each running task
	 * when changes to lockfiles and manifests are detected.
	 * @since 1.34.0
	 */
	installDependencies: PipelineActionSwitch;
	/**
	 * A threshold in milliseconds in which to force kill running child
	 * processes after the pipeline receives an external signal. A value
	 * of 0 will not kill the process and let them run to completion.
	 *
	 * @default 2000
	 */
	killProcessThreshold?: number;
	/** Logs the task's command and arguments when running the task. */
	logRunningCommand: boolean;
	/**
	 * When creating `SyncProject` actions, recursively create a `SyncProject`
	 * action for each project dependency, and link them as a relationship.
	 * @since 1.34.0
	 *
	 * @default true
	 */
	syncProjectDependencies?: boolean;
	/**
	 * Run the `SyncProject` actions in the pipeline for each owning project
	 * of a running task.
	 * @since 1.34.0
	 */
	syncProjects: PipelineActionSwitch;
	/**
	 * Run the `SyncWorkspace` action before all actions in the pipeline.
	 * @since 1.34.0
	 *
	 * @default true
	 */
	syncWorkspace?: boolean;
}

/** Configures projects in the workspace, using both globs and explicit source paths. */
export interface WorkspaceProjectsConfig {
	/**
	 * A list of globs in which to locate project directories.
	 * Can be suffixed with `moon.yml` or `moon.pkl` to only find distinct projects.
	 */
	globs: string[];
	/** A mapping of project IDs to relative file paths to each project directory. */
	sources: Record<Id, string>;
}

export type WorkspaceProjects = WorkspaceProjectsConfig | string[] | Record<Id, string>;

/**
 * The API format of the remote service.
 * @since 1.32.0
 */
export type RemoteApi = 'grpc' | 'http';

/**
 * Configures basic HTTP authentication.
 * @since 1.32.0
 */
export interface RemoteAuthConfig {
	/** A map of HTTP headers to inject into every request. */
	headers: Record<string, string>;
	/**
	 * The name of an environment variable to use as a bearer token.
	 *
	 * @envvar MOON_REMOTE_AUTH_TOKEN
	 */
	token: string | null;
}

/**
 * Supported blob compression levels for gRPC APIs.
 * @since 1.31.0
 */
export type RemoteCompression = 'none' | 'zstd';

/**
 * Configures the action cache (AC) and content addressable cache (CAS).
 * @since 1.30.0
 */
export interface RemoteCacheConfig {
	/**
	 * The compression format to use when uploading/downloading blobs.
	 * @since 1.31.0
	 *
	 * @default 'none'
	 * @envvar MOON_REMOTE_CACHE_COMPRESSION
	 * @type {'none' | 'zstd'}
	 */
	compression: RemoteCompression;
	/**
	 * Unique instance name for blobs. Will be used as a folder name.
	 *
	 * @default 'moon-outputs'
	 * @envvar MOON_REMOTE_CACHE_INSTANCE_NAME
	 */
	instanceName?: string;
	/**
	 * When local, only download matching blobs and do not upload new
	 * blobs. Blobs will only be uploaded in CI environments.
	 * @since 1.40.0
	 *
	 * @envvar MOON_REMOTE_CACHE_LOCAL_READ_ONLY
	 */
	localReadOnly: boolean;
	/**
	 * When downloading blobs, verify the digests/hashes in the response
	 * match the associated blob contents. This will reduce performance
	 * but ensure partial or corrupted blobs won't cause failures.
	 * @since 1.36.0
	 *
	 * @envvar MOON_REMOTE_CACHE_VERIFY_INTEGRITY
	 */
	verifyIntegrity: boolean;
}

/**
 * Configures for both server and client authentication with mTLS.
 * @since 1.30.0
 */
export interface RemoteMtlsConfig {
	/**
	 * If true, assume that the server supports HTTP/2,
	 * even if it doesn't provide protocol negotiation via ALPN.
	 *
	 * @envvar MOON_REMOTE_MTLS_HTTP
	 */
	assumeHttp2: boolean;
	/**
	 * A file path, relative from the workspace root, to the
	 * certificate authority PEM encoded X509 certificate.
	 *
	 * @envvar MOON_REMOTE_MTLS_CA_CERT
	 */
	caCert: string;
	/**
	 * A file path, relative from the workspace root, to the
	 * client's PEM encoded X509 certificate.
	 *
	 * @envvar MOON_REMOTE_MTLS_CLIENT_CERT
	 */
	clientCert: string;
	/**
	 * A file path, relative from the workspace root, to the
	 * client's PEM encoded X509 private key.
	 *
	 * @envvar MOON_REMOTE_MTLS_CLIENT_KEY
	 */
	clientKey: string;
	/**
	 * The domain name in which to verify the TLS certificate.
	 *
	 * @envvar MOON_REMOTE_MTLS_DOMAIN
	 */
	domain: string | null;
}

/**
 * Configures for server-only authentication with TLS.
 * @since 1.30.0
 */
export interface RemoteTlsConfig {
	/**
	 * If true, assume that the server supports HTTP/2,
	 * even if it doesn't provide protocol negotiation via ALPN.
	 *
	 * @envvar MOON_REMOTE_TLS_HTTP2
	 */
	assumeHttp2: boolean;
	/**
	 * A file path, relative from the workspace root, to the
	 * certificate authority PEM encoded X509 certificate.
	 *
	 * @envvar MOON_REMOTE_TLS_CERT
	 */
	cert: string;
	/**
	 * The domain name in which to verify the TLS certificate.
	 *
	 * @envvar MOON_REMOTE_TLS_DOMAIN
	 */
	domain: string | null;
}

/**
 * Configures the remote service, powered by the Bazel Remote Execution API.
 * @since 1.30.0
 */
export interface RemoteConfig {
	/**
	 * The API format of the remote service.
	 * @since 1.32.0
	 *
	 * @default 'grpc'
	 * @envvar MOON_REMOTE_API
	 * @type {'grpc' | 'http'}
	 */
	api: RemoteApi;
	/**
	 * Connect to the host using basic HTTP authentication.
	 * @since 1.32.0
	 */
	auth: RemoteAuthConfig | null;
	/** Configures the action cache (AC) and content addressable cache (CAS). */
	cache: RemoteCacheConfig;
	/**
	 * The remote host to connect and send requests to.
	 * Supports gRPC protocols.
	 *
	 * @envvar MOON_REMOTE_HOST
	 */
	host: string | null;
	/**
	 * Connect to the host using server and client authentication with mTLS.
	 * This takes precedence over normal TLS.
	 */
	mtls: RemoteMtlsConfig | null;
	/** Connect to the host using server-only authentication with TLS. */
	tls: RemoteTlsConfig | null;
}

/** The VCS being utilized by the repository. */
export type VcsClient = 'git';

/**
 * The format to use for generated VCS hook files.
 * @since 1.29.0
 */
export type VcsHookFormat = 'bash' | 'native';

/**
 * The upstream version control provider, where the repository
 * source code is stored.
 */
export type VcsProvider = 'bitbucket' | 'github' | 'gitlab' | 'other';

/** Configures the version control system (VCS). */
export interface VcsConfig {
	/**
	 * The VCS client being utilized by the repository.
	 *
	 * @default 'git'
	 * @type {'git'}
	 */
	client: VcsClient;
	/**
	 * The default branch / base.
	 *
	 * @default 'master'
	 */
	defaultBranch?: string;
	/**
	 * The format to use for generated VCS hook files.
	 * @since 1.29.0
	 *
	 * @default 'native'
	 * @type {'bash' | 'native'}
	 */
	hookFormat: VcsHookFormat;
	/**
	 * A map of hooks to a list of commands to run when the hook is triggered.
	 * @since 1.9.0
	 */
	hooks: Record<string, string[]>;
	/**
	 * The upstream version control provider, where the repository
	 * source code is stored.
	 * @since 1.8.0
	 *
	 * @default 'github'
	 * @type {'bitbucket' | 'github' | 'gitlab' | 'other'}
	 */
	provider: VcsProvider;
	/** List of remote's in which to compare branches against. */
	remoteCandidates?: string[];
	/**
	 * Automatically generate hooks and scripts during a sync operation,
	 * based on the `hooks` setting.
	 * @since 1.9.0
	 */
	sync: boolean;
}

/**
 * Configures all aspects of the moon workspace.
 * Docs: https://moonrepo.dev/docs/config/workspace
 */
export interface WorkspaceConfig {
	/** @default 'https://moonrepo.dev/schemas/workspace.json' */
	$schema?: string;
	/**
	 * Configures code ownership rules for generating a `CODEOWNERS` file.
	 * @since 1.8.0
	 */
	codeowners: CodeownersConfig;
	/** Configures boundaries and constraints between projects. */
	constraints: ConstraintsConfig;
	/**
	 * Configures Docker integration for the workspace.
	 * @since 1.27.0
	 */
	docker: DockerConfig;
	/** Configures experiments across the entire moon workspace. */
	experiments: ExperimentsConfig;
	/**
	 * Extends one or many workspace configuration file. Supports a relative
	 * file path or a secure URL.
	 * @since 1.12.0
	 */
	extends: ExtendsFrom | null;
	/** Configures extensions that can be executed with `moon ext`. */
	extensions: Record<Id, ExtensionPluginConfig>;
	/** Configures the generator for scaffolding from templates. */
	generator: GeneratorConfig;
	/** Configures aspects of the content hashing engine. */
	hasher: HasherConfig;
	/** Configures how and where notifications are sent. */
	notifier: NotifierConfig;
	/** Configures aspects of the action pipeline. */
	runner?: PipelineConfig;
	/** Configures aspects of the action pipeline. */
	pipeline: PipelineConfig;
	/**
	 * Configures all projects within the workspace to create a project graph.
	 * Accepts a list of globs, a mapping of projects to relative file paths,
	 * or both values.
	 */
	projects: WorkspaceProjects;
	/**
	 * Collects anonymous usage information, and checks for new moon versions.
	 *
	 * @default true
	 */
	telemetry?: boolean;
	/** Configures aspects of the remote service. */
	unstable_remote: RemoteConfig;
	/** Configures the version control system (VCS). */
	vcs: VcsConfig;
	/** Requires a specific version of the `moon` binary. */
	versionConstraint: string | null;
}

/** Configures code ownership rules for generating a `CODEOWNERS` file. */
export interface PartialCodeownersConfig {
	/**
	 * A map of global file paths and glob patterns to a list of owners.
	 * Can be relative from the workspace root, or a wildcard match for any depth.
	 */
	globalPaths?: Record<string, string[]> | null;
	/**
	 * How to order ownership rules within the generated file.
	 *
	 * @default 'file-source'
	 */
	orderBy?: CodeownersOrderBy | null;
	/**
	 * Bitbucket and GitLab only. The number of approvals required for the
	 * request to be satisfied. This will be applied to all paths.
	 * @since 1.28.0
	 */
	requiredApprovals?: number | null;
	/**
	 * Automatically generate a `CODEOWNERS` file during a sync operation,
	 * after aggregating all ownership rules from each project in the workspace.
	 */
	sync?: boolean | null;
}

/** Configures boundaries and constraints between projects. */
export interface PartialConstraintsConfig {
	/**
	 * Enforces relationships between projects based on each project's
	 * `layer` setting.
	 *
	 * @default true
	 */
	enforceLayerRelationships?: boolean | null;
	/**
	 * Enforces relationships between projects based on each project's
	 * `tags` setting. Requires a mapping of tags, to acceptable tags.
	 */
	tagRelationships?: Record<Id, Id[]> | null;
}

/** Configures aspects of the Docker pruning process. */
export interface PartialDockerPruneConfig {
	/**
	 * Automatically delete vendor directories (package manager
	 * dependencies, build targets, etc) while pruning.
	 *
	 * @default true
	 */
	deleteVendorDirectories?: boolean | null;
	/**
	 * Automatically install production dependencies for all required
	 * toolchain's of the focused projects within the Docker build.
	 *
	 * @default true
	 */
	installToolchainDeps?: boolean | null;
}

/** Configures aspects of the Docker scaffolding process. */
export interface PartialDockerScaffoldConfig {
	/**
	 * Copy toolchain specific configs/manifests/files into
	 * the configuration skeleton.
	 *
	 * @default true
	 * @deprecated
	 */
	copyToolchainFiles?: boolean | null;
	/**
	 * List of glob patterns, relative from the workspace root,
	 * to include (or exclude) in the configuration skeleton.
	 */
	include?: string[] | null;
}

/** Configures our Docker integration. */
export interface PartialDockerConfig {
	/** Configures aspects of the Docker pruning process. */
	prune?: PartialDockerPruneConfig | null;
	/** Configures aspects of the Docker scaffolding process. */
	scaffold?: PartialDockerScaffoldConfig | null;
}

/** Configures experiments across the entire moon workspace. */
export interface PartialExperimentsConfig {
	/**
	 * Enable faster glob file system walking.
	 *
	 * @default true
	 */
	fasterGlobWalk?: boolean | null;
	/**
	 * Enable a faster and more accurate Git implementation.
	 * Supports submodules, subtrees, and worktrees.
	 *
	 * @default true
	 */
	gitV2?: boolean | null;
}

/** Configures an individual extension. */
export interface PartialExtensionPluginConfig {
	/** Arbitrary configuration that'll be passed to the WASM plugin. */
	config?: Record<string, unknown> | null;
	/** Location of the WASM plugin to use. */
	plugin?: PluginLocator | null;
}

/** Configures the generator for scaffolding from templates. */
export interface PartialGeneratorConfig {
	/**
	 * The list of file paths, relative from the workspace root,
	 * in which to locate templates.
	 */
	templates?: string[] | null;
}

/** Configures aspects of the content hashing engine. */
export interface PartialHasherConfig {
	/**
	 * When `warnOnMissingInputs` is enabled, filters missing file
	 * paths from logging a warning.
	 * @since 1.10.0
	 */
	ignoreMissingPatterns?: string[] | null;
	/**
	 * Filters file paths that match a configured glob pattern
	 * when a hash is being generated. Patterns are workspace relative,
	 * so prefixing with `**` is recommended.
	 * @since 1.10.0
	 */
	ignorePatterns?: string[] | null;
	/**
	 * The optimization to use when hashing.
	 *
	 * @default 'accuracy'
	 */
	optimization?: HasherOptimization | null;
	/**
	 * The strategy to use when walking the file system.
	 *
	 * @default 'vcs'
	 */
	walkStrategy?: HasherWalkStrategy | null;
	/**
	 * Logs a warning when a task has configured an explicit file path
	 * input, and that file does not exist when hashing.
	 *
	 * @default true
	 */
	warnOnMissingInputs?: boolean | null;
}

/** Configures how and where notifications are sent. */
export interface PartialNotifierConfig {
	/**
	 * Display an OS notification for certain action pipeline events.
	 * @since 1.38.0
	 *
	 * @default 'never'
	 */
	terminalNotifications?: NotifierEventType | null;
	/**
	 * Whether webhook requests require acknowledgment (2xx response).
	 * @since 1.38.0
	 */
	webhookAcknowledge?: boolean | null;
	/** A secure URL in which to send webhooks to. */
	webhookUrl?: string | null;
}

export type PartialPipelineActionSwitch = null | boolean | Id[];

/** Configures aspects of the action pipeline. */
export interface PartialPipelineConfig {
	/**
	 * Automatically clean the cache after every task run.
	 * @since 1.24.0
	 *
	 * @default true
	 */
	autoCleanCache?: boolean | null;
	/**
	 * The lifetime in which task outputs will be cached.
	 *
	 * @default '7 days'
	 */
	cacheLifetime?: string | null;
	/**
	 * Automatically inherit color settings for all tasks being ran.
	 *
	 * @default true
	 */
	inheritColorsForPipedTasks?: boolean | null;
	/**
	 * Run the `InstallDependencies` actions for each running task
	 * when changes to lockfiles and manifests are detected.
	 * @since 1.34.0
	 */
	installDependencies?: PartialPipelineActionSwitch | null;
	/**
	 * A threshold in milliseconds in which to force kill running child
	 * processes after the pipeline receives an external signal. A value
	 * of 0 will not kill the process and let them run to completion.
	 *
	 * @default 2000
	 */
	killProcessThreshold?: number | null;
	/** Logs the task's command and arguments when running the task. */
	logRunningCommand?: boolean | null;
	/**
	 * When creating `SyncProject` actions, recursively create a `SyncProject`
	 * action for each project dependency, and link them as a relationship.
	 * @since 1.34.0
	 *
	 * @default true
	 */
	syncProjectDependencies?: boolean | null;
	/**
	 * Run the `SyncProject` actions in the pipeline for each owning project
	 * of a running task.
	 * @since 1.34.0
	 */
	syncProjects?: PartialPipelineActionSwitch | null;
	/**
	 * Run the `SyncWorkspace` action before all actions in the pipeline.
	 * @since 1.34.0
	 *
	 * @default true
	 */
	syncWorkspace?: boolean | null;
}

/** Configures projects in the workspace, using both globs and explicit source paths. */
export interface PartialWorkspaceProjectsConfig {
	/**
	 * A list of globs in which to locate project directories.
	 * Can be suffixed with `moon.yml` or `moon.pkl` to only find distinct projects.
	 */
	globs?: string[] | null;
	/** A mapping of project IDs to relative file paths to each project directory. */
	sources?: Record<Id, string> | null;
}

export type PartialWorkspaceProjects =
	| PartialWorkspaceProjectsConfig
	| string[]
	| Record<Id, string>;

/**
 * Configures basic HTTP authentication.
 * @since 1.32.0
 */
export interface PartialRemoteAuthConfig {
	/** A map of HTTP headers to inject into every request. */
	headers?: Record<string, string> | null;
	/**
	 * The name of an environment variable to use as a bearer token.
	 *
	 * @envvar MOON_REMOTE_AUTH_TOKEN
	 */
	token?: string | null;
}

/**
 * Configures the action cache (AC) and content addressable cache (CAS).
 * @since 1.30.0
 */
export interface PartialRemoteCacheConfig {
	/**
	 * The compression format to use when uploading/downloading blobs.
	 * @since 1.31.0
	 *
	 * @default 'none'
	 * @envvar MOON_REMOTE_CACHE_COMPRESSION
	 */
	compression?: RemoteCompression | null;
	/**
	 * Unique instance name for blobs. Will be used as a folder name.
	 *
	 * @default 'moon-outputs'
	 * @envvar MOON_REMOTE_CACHE_INSTANCE_NAME
	 */
	instanceName?: string | null;
	/**
	 * When local, only download matching blobs and do not upload new
	 * blobs. Blobs will only be uploaded in CI environments.
	 * @since 1.40.0
	 *
	 * @envvar MOON_REMOTE_CACHE_LOCAL_READ_ONLY
	 */
	localReadOnly?: boolean | null;
	/**
	 * When downloading blobs, verify the digests/hashes in the response
	 * match the associated blob contents. This will reduce performance
	 * but ensure partial or corrupted blobs won't cause failures.
	 * @since 1.36.0
	 *
	 * @envvar MOON_REMOTE_CACHE_VERIFY_INTEGRITY
	 */
	verifyIntegrity?: boolean | null;
}

/**
 * Configures for both server and client authentication with mTLS.
 * @since 1.30.0
 */
export interface PartialRemoteMtlsConfig {
	/**
	 * If true, assume that the server supports HTTP/2,
	 * even if it doesn't provide protocol negotiation via ALPN.
	 *
	 * @envvar MOON_REMOTE_MTLS_HTTP
	 */
	assumeHttp2?: boolean | null;
	/**
	 * A file path, relative from the workspace root, to the
	 * certificate authority PEM encoded X509 certificate.
	 *
	 * @envvar MOON_REMOTE_MTLS_CA_CERT
	 */
	caCert?: string | null;
	/**
	 * A file path, relative from the workspace root, to the
	 * client's PEM encoded X509 certificate.
	 *
	 * @envvar MOON_REMOTE_MTLS_CLIENT_CERT
	 */
	clientCert?: string | null;
	/**
	 * A file path, relative from the workspace root, to the
	 * client's PEM encoded X509 private key.
	 *
	 * @envvar MOON_REMOTE_MTLS_CLIENT_KEY
	 */
	clientKey?: string | null;
	/**
	 * The domain name in which to verify the TLS certificate.
	 *
	 * @envvar MOON_REMOTE_MTLS_DOMAIN
	 */
	domain?: string | null;
}

/**
 * Configures for server-only authentication with TLS.
 * @since 1.30.0
 */
export interface PartialRemoteTlsConfig {
	/**
	 * If true, assume that the server supports HTTP/2,
	 * even if it doesn't provide protocol negotiation via ALPN.
	 *
	 * @envvar MOON_REMOTE_TLS_HTTP2
	 */
	assumeHttp2?: boolean | null;
	/**
	 * A file path, relative from the workspace root, to the
	 * certificate authority PEM encoded X509 certificate.
	 *
	 * @envvar MOON_REMOTE_TLS_CERT
	 */
	cert?: string | null;
	/**
	 * The domain name in which to verify the TLS certificate.
	 *
	 * @envvar MOON_REMOTE_TLS_DOMAIN
	 */
	domain?: string | null;
}

/**
 * Configures the remote service, powered by the Bazel Remote Execution API.
 * @since 1.30.0
 */
export interface PartialRemoteConfig {
	/**
	 * The API format of the remote service.
	 * @since 1.32.0
	 *
	 * @default 'grpc'
	 * @envvar MOON_REMOTE_API
	 */
	api?: RemoteApi | null;
	/**
	 * Connect to the host using basic HTTP authentication.
	 * @since 1.32.0
	 */
	auth?: PartialRemoteAuthConfig | null;
	/** Configures the action cache (AC) and content addressable cache (CAS). */
	cache?: PartialRemoteCacheConfig | null;
	/**
	 * The remote host to connect and send requests to.
	 * Supports gRPC protocols.
	 *
	 * @envvar MOON_REMOTE_HOST
	 */
	host?: string | null;
	/**
	 * Connect to the host using server and client authentication with mTLS.
	 * This takes precedence over normal TLS.
	 */
	mtls?: PartialRemoteMtlsConfig | null;
	/** Connect to the host using server-only authentication with TLS. */
	tls?: PartialRemoteTlsConfig | null;
}

/** Configures the version control system (VCS). */
export interface PartialVcsConfig {
	/**
	 * The VCS client being utilized by the repository.
	 *
	 * @default 'git'
	 */
	client?: VcsClient | null;
	/**
	 * The default branch / base.
	 *
	 * @default 'master'
	 */
	defaultBranch?: string | null;
	/**
	 * The format to use for generated VCS hook files.
	 * @since 1.29.0
	 *
	 * @default 'native'
	 */
	hookFormat?: VcsHookFormat | null;
	/**
	 * A map of hooks to a list of commands to run when the hook is triggered.
	 * @since 1.9.0
	 */
	hooks?: Record<string, string[]> | null;
	/**
	 * The upstream version control provider, where the repository
	 * source code is stored.
	 * @since 1.8.0
	 *
	 * @default 'github'
	 */
	provider?: VcsProvider | null;
	/** List of remote's in which to compare branches against. */
	remoteCandidates?: string[] | null;
	/**
	 * Automatically generate hooks and scripts during a sync operation,
	 * based on the `hooks` setting.
	 * @since 1.9.0
	 */
	sync?: boolean | null;
}

/**
 * Configures all aspects of the moon workspace.
 * Docs: https://moonrepo.dev/docs/config/workspace
 */
export interface PartialWorkspaceConfig {
	/** @default 'https://moonrepo.dev/schemas/workspace.json' */
	$schema?: string | null;
	/**
	 * Configures code ownership rules for generating a `CODEOWNERS` file.
	 * @since 1.8.0
	 */
	codeowners?: PartialCodeownersConfig | null;
	/** Configures boundaries and constraints between projects. */
	constraints?: PartialConstraintsConfig | null;
	/**
	 * Configures Docker integration for the workspace.
	 * @since 1.27.0
	 */
	docker?: PartialDockerConfig | null;
	/** Configures experiments across the entire moon workspace. */
	experiments?: PartialExperimentsConfig | null;
	/**
	 * Extends one or many workspace configuration file. Supports a relative
	 * file path or a secure URL.
	 * @since 1.12.0
	 */
	extends?: ExtendsFrom | null;
	/** Configures extensions that can be executed with `moon ext`. */
	extensions?: Record<Id, PartialExtensionPluginConfig> | null;
	/** Configures the generator for scaffolding from templates. */
	generator?: PartialGeneratorConfig | null;
	/** Configures aspects of the content hashing engine. */
	hasher?: PartialHasherConfig | null;
	/** Configures how and where notifications are sent. */
	notifier?: PartialNotifierConfig | null;
	/** Configures aspects of the action pipeline. */
	runner?: PartialPipelineConfig | null;
	/** Configures aspects of the action pipeline. */
	pipeline?: PartialPipelineConfig | null;
	/**
	 * Configures all projects within the workspace to create a project graph.
	 * Accepts a list of globs, a mapping of projects to relative file paths,
	 * or both values.
	 */
	projects?: PartialWorkspaceProjects | null;
	/**
	 * Collects anonymous usage information, and checks for new moon versions.
	 *
	 * @default true
	 */
	telemetry?: boolean | null;
	/** Configures aspects of the remote service. */
	unstable_remote?: PartialRemoteConfig | null;
	/** Configures the version control system (VCS). */
	vcs?: PartialVcsConfig | null;
	/** Requires a specific version of the `moon` binary. */
	versionConstraint?: string | null;
}
