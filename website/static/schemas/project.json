{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Configures information and tasks for a project. Docs: https://moonrepo.dev/docs/config/project",
  "type": "object",
  "properties": {
    "$schema": {
      "title": "$schema",
      "default": "https://moonrepo.dev/schemas/project.json",
      "type": "string"
    },
    "dependsOn": {
      "title": "dependsOn",
      "description": "Other projects that this project depends on.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProjectDependsOn"
      }
    },
    "docker": {
      "title": "docker",
      "description": "Configures Docker integration for this project. @since 1.27.0",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectDockerConfig"
        }
      ]
    },
    "env": {
      "title": "env",
      "description": "A mapping of environment variables that will be set for all tasks within the project.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "propertyNames": {
        "type": "string"
      }
    },
    "fileGroups": {
      "title": "fileGroups",
      "description": "A mapping of group IDs to a list of file paths, globs, and environment variables, that can be referenced from tasks.",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Input"
        }
      },
      "propertyNames": {
        "$ref": "#/definitions/Id"
      }
    },
    "id": {
      "title": "id",
      "description": "Overrides the identifier within the project graph, as defined in the workspace projects setting. @since 1.18.0",
      "anyOf": [
        {
          "$ref": "#/definitions/Id"
        },
        {
          "type": "null"
        }
      ],
      "markdownDescription": "Overrides the identifier within the project graph, as defined in the workspace `projects` setting. @since 1.18.0"
    },
    "language": {
      "title": "language",
      "description": "The primary programming language of the project.",
      "default": "unknown",
      "allOf": [
        {
          "$ref": "#/definitions/LanguageType"
        }
      ]
    },
    "layer": {
      "title": "layer",
      "description": "The layer within the project stack, for categorizing.",
      "default": "unknown",
      "allOf": [
        {
          "$ref": "#/definitions/LayerType"
        }
      ]
    },
    "owners": {
      "title": "owners",
      "description": "Defines ownership of source code within the current project, by mapping file paths and globs to owners. An owner is either a user, team, or group. @since 1.8.0",
      "allOf": [
        {
          "$ref": "#/definitions/OwnersConfig"
        }
      ]
    },
    "project": {
      "title": "project",
      "description": "Expanded information about the project.",
      "anyOf": [
        {
          "$ref": "#/definitions/ProjectMetadataConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "stack": {
      "title": "stack",
      "description": "The technology stack of the project, for categorizing. @since 1.22.0",
      "default": "unknown",
      "allOf": [
        {
          "$ref": "#/definitions/StackType"
        }
      ]
    },
    "tags": {
      "title": "tags",
      "description": "A list of tags that this project belongs to, for categorizing, boundary enforcement, and task inheritance.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Id"
      }
    },
    "tasks": {
      "title": "tasks",
      "description": "A mapping of tasks by ID to parameters required for running the task.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/TaskConfig"
      },
      "propertyNames": {
        "$ref": "#/definitions/Id"
      }
    },
    "toolchain": {
      "title": "toolchain",
      "description": "Overrides top-level toolchain settings, scoped to this project.",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectToolchainConfig"
        }
      ],
      "markdownDescription": "Overrides top-level toolchain settings, scoped to this project."
    },
    "workspace": {
      "title": "workspace",
      "description": "Overrides top-level workspace settings, scoped to this project.",
      "allOf": [
        {
          "$ref": "#/definitions/ProjectWorkspaceConfig"
        }
      ],
      "markdownDescription": "Overrides top-level workspace settings, scoped to this project."
    }
  },
  "additionalProperties": false,
  "definitions": {
    "DependencyScope": {
      "description": "The relationship scope of a dependency.",
      "type": "string",
      "enum": [
        "build",
        "development",
        "peer",
        "production",
        "root"
      ]
    },
    "DependencySource": {
      "description": "The source where the dependency comes from. Either explicitly defined in configuration, or implicitly derived from source files.",
      "type": "string",
      "enum": [
        "explicit",
        "implicit"
      ]
    },
    "FileGroupInput": {
      "description": "A file group input.",
      "type": "object",
      "properties": {
        "as": {
          "title": "as",
          "description": "Format to resolve the file group into.",
          "default": "static",
          "allOf": [
            {
              "$ref": "#/definitions/FileGroupInputFormat"
            }
          ]
        },
        "format": {
          "title": "format",
          "description": "Format to resolve the file group into.",
          "default": "static",
          "allOf": [
            {
              "$ref": "#/definitions/FileGroupInputFormat"
            }
          ]
        },
        "group": {
          "title": "group",
          "description": "The file group identifier.",
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FileGroupInputFormat": {
      "description": "Available formats to resolve the file group into.",
      "type": "string",
      "enum": [
        "static",
        "dirs",
        "envs",
        "files",
        "globs",
        "root"
      ]
    },
    "FileInput": {
      "description": "A file path input.",
      "type": "object",
      "properties": {
        "content": {
          "title": "content",
          "description": "Regex pattern to match the file's contents against when determining affected status.",
          "anyOf": [
            {
              "type": "string",
              "format": "regex"
            },
            {
              "type": "null"
            }
          ]
        },
        "file": {
          "title": "file",
          "description": "The literal file path.",
          "type": "string"
        },
        "optional": {
          "title": "optional",
          "description": "Mark the file as optional instead of logging a warning when hashing a task.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "FileOutput": {
      "description": "A file path output.",
      "type": "object",
      "properties": {
        "file": {
          "title": "file",
          "description": "The literal file path.",
          "type": "string"
        },
        "optional": {
          "title": "optional",
          "description": "Mark the file as optional instead of failing with an error after running a task and the output doesn't exist.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "GlobInput": {
      "description": "A glob pattern input.",
      "type": "object",
      "properties": {
        "cache": {
          "title": "cache",
          "description": "Cache the glob walking result for increased performance.",
          "default": true,
          "type": "boolean"
        },
        "glob": {
          "title": "glob",
          "description": "The glob pattern.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "GlobOutput": {
      "description": "A glob pattern output.",
      "type": "object",
      "properties": {
        "glob": {
          "title": "glob",
          "description": "The glob pattern.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Id": {
      "type": "string"
    },
    "Input": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/FileInput"
        },
        {
          "$ref": "#/definitions/FileGroupInput"
        },
        {
          "$ref": "#/definitions/GlobInput"
        },
        {
          "$ref": "#/definitions/ProjectInput"
        }
      ]
    },
    "LanguageType": {
      "description": "Supported programming languages that each project can be written in.",
      "anyOf": [
        {
          "title": "Bash",
          "const": "bash"
        },
        {
          "title": "Batch",
          "const": "batch"
        },
        {
          "title": "CPlusPlus",
          "const": "cplusplus"
        },
        {
          "title": "CSharp",
          "const": "csharp"
        },
        {
          "title": "DotNet",
          "const": "dotnet"
        },
        {
          "title": "Go",
          "const": "go"
        },
        {
          "title": "Java",
          "const": "java"
        },
        {
          "title": "JavaScript",
          "const": "javascript"
        },
        {
          "title": "Kotlin",
          "const": "kotlin"
        },
        {
          "title": "Php",
          "const": "php"
        },
        {
          "title": "Python",
          "const": "python"
        },
        {
          "title": "Ruby",
          "const": "ruby"
        },
        {
          "title": "Rust",
          "const": "rust"
        },
        {
          "title": "Swift",
          "const": "swift"
        },
        {
          "title": "TypeScript",
          "const": "typescript"
        },
        {
          "title": "Unknown",
          "description": "Not explicitly set or detected.",
          "const": "unknown"
        },
        {
          "title": "Other",
          "description": "A custom language.",
          "type": "string"
        }
      ]
    },
    "LayerType": {
      "description": "The layer within the project stack, for categorizing.",
      "type": "string",
      "enum": [
        "application",
        "automation",
        "configuration",
        "library",
        "scaffolding",
        "tool",
        "unknown"
      ]
    },
    "Output": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/FileOutput"
        },
        {
          "$ref": "#/definitions/GlobOutput"
        }
      ]
    },
    "OwnersConfig": {
      "description": "Defines ownership of source code within the current project, by mapping file paths and glob patterns to owners. An owner is either a user, team, or group.",
      "type": "object",
      "properties": {
        "customGroups": {
          "title": "customGroups",
          "description": "Bitbucket only. A map of custom groups (prefixed with @@@), to a list of user and normal groups.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyNames": {
            "type": "string"
          },
          "markdownDescription": "Bitbucket only. A map of custom groups (prefixed with `@@@`), to a list of user and normal groups."
        },
        "defaultOwner": {
          "title": "defaultOwner",
          "description": "The default owner for paths.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The default owner for `paths`."
        },
        "optional": {
          "title": "optional",
          "description": "GitLab only. Marks the code owners section as optional.",
          "type": "boolean"
        },
        "paths": {
          "title": "paths",
          "description": "A list or map of file paths and glob patterns to owners. When a list, the defaultOwner is the owner, and each item is a path. When a map, the key is a path, and the value is a list of owners.",
          "allOf": [
            {
              "$ref": "#/definitions/OwnersPaths"
            }
          ],
          "markdownDescription": "A list or map of file paths and glob patterns to owners. When a list, the `defaultOwner` is the owner, and each item is a path. When a map, the key is a path, and the value is a list of owners."
        },
        "requiredApprovals": {
          "title": "requiredApprovals",
          "description": "Bitbucket and GitLab only. The number of approvals required for the request to be satisfied. For Bitbucket, utilizes the Check() condition. For GitLab, marks the code owners section as required.",
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Bitbucket and GitLab only. The number of approvals required for the request to be satisfied. For Bitbucket, utilizes the `Check()` condition. For GitLab, marks the code owners section as required."
        }
      },
      "additionalProperties": false
    },
    "OwnersPaths": {
      "description": "A mapping of file paths and file globs to owners.",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "propertyNames": {
            "type": "string"
          }
        }
      ]
    },
    "PluginLocator": {
      "description": "Strategies and protocols for locating plugins.",
      "type": "string"
    },
    "ProjectDependencyConfig": {
      "description": "Expanded information about a project dependency.",
      "type": "object",
      "properties": {
        "id": {
          "title": "id",
          "description": "Identifier of the depended on project.",
          "allOf": [
            {
              "$ref": "#/definitions/Id"
            }
          ]
        },
        "scope": {
          "title": "scope",
          "description": "Scope of the dependency relationship.",
          "default": "production",
          "allOf": [
            {
              "$ref": "#/definitions/DependencyScope"
            }
          ]
        },
        "source": {
          "title": "source",
          "description": "Source of where the dependency came from.",
          "default": "explicit",
          "allOf": [
            {
              "$ref": "#/definitions/DependencySource"
            }
          ]
        },
        "via": {
          "title": "via",
          "description": "Metadata about the source.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectDependsOn": {
      "description": "Expanded information about a project dependency.",
      "anyOf": [
        {
          "$ref": "#/definitions/Id"
        },
        {
          "$ref": "#/definitions/ProjectDependencyConfig"
        }
      ]
    },
    "ProjectDockerConfig": {
      "description": "Configures our Docker integration. @since 1.27.0",
      "type": "object",
      "properties": {
        "file": {
          "title": "file",
          "description": "Configures aspects of the Dockerfile generation process.",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectDockerFileConfig"
            }
          ],
          "markdownDescription": "Configures aspects of the `Dockerfile` generation process."
        },
        "scaffold": {
          "title": "scaffold",
          "description": "Configures aspects of the Docker scaffolding process.",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectDockerScaffoldConfig"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectDockerFileConfig": {
      "description": "Configures Dockerfile generation. @since 1.27.0",
      "type": "object",
      "properties": {
        "buildTask": {
          "title": "buildTask",
          "description": "A task identifier within the current project for building the project.",
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "null"
            }
          ]
        },
        "image": {
          "title": "image",
          "description": "The base Docker image name.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "startTask": {
          "title": "startTask",
          "description": "A task identifier within the current project for starting the project.",
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "markdownDescription": "Configures `Dockerfile` generation. @since 1.27.0"
    },
    "ProjectDockerScaffoldConfig": {
      "description": "Configures aspects of the Docker scaffolding process. @since 1.27.0",
      "type": "object",
      "properties": {
        "include": {
          "title": "include",
          "description": "A list of glob patterns, relative from the project root, to include (or exclude) in the sources skeleton.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ProjectInput": {
      "description": "An external project input.",
      "type": "object",
      "properties": {
        "fileGroup": {
          "title": "fileGroup",
          "description": "A file group identifier within the project in which to determine affected status.",
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "null"
            }
          ]
        },
        "filter": {
          "title": "filter",
          "description": "A list of globs, relative from the project's root, in which to determine affected status.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "group": {
          "title": "group",
          "description": "A file group identifier within the project in which to determine affected status.",
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "null"
            }
          ]
        },
        "project": {
          "title": "project",
          "description": "The external project identifier.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ProjectMetadataConfig": {
      "description": "Expanded information about the project.",
      "type": "object",
      "properties": {
        "channel": {
          "title": "channel",
          "description": "The Slack, Discord, etc, channel to discuss the project. Must start with a #.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The Slack, Discord, etc, channel to discuss the project. Must start with a `#`."
        },
        "description": {
          "title": "description",
          "description": "A description on what the project does, and why it exists.",
          "type": "string"
        },
        "maintainers": {
          "title": "maintainers",
          "description": "The individual maintainers of the project. The format is unspecified.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "title": "metadata",
          "description": "Custom metadata fields.",
          "type": "object",
          "additionalProperties": {
            "type": [
              "boolean",
              "object",
              "array",
              "number",
              "string",
              "integer"
            ]
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "name": {
          "title": "name",
          "description": "A human-readable name of the project.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "A human-readable name of the project."
        },
        "owner": {
          "title": "owner",
          "description": "The owner of the project. Can be an individual, team, or organization. The format is unspecified.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectToolchainConfig": {
      "description": "Overrides workspace-level toolchain settings, scoped to this project.",
      "type": "object",
      "properties": {
        "default": {
          "title": "default",
          "description": "A single toolchain, or list of toolchains, to inherit for this project and all of its tasks. @since 1.31.0",
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/Id"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Id"
                  }
                }
              ]
            },
            {
              "type": "null"
            }
          ]
        },
        "defaults": {
          "title": "defaults",
          "description": "A single toolchain, or list of toolchains, to inherit for this project and all of its tasks. @since 1.31.0",
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/Id"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Id"
                  }
                }
              ]
            },
            {
              "type": "null"
            }
          ]
        },
        "plugins": {
          "title": "plugins",
          "description": "Overrides workspace-level toolchains by their identifier.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ProjectToolchainEntry"
          },
          "propertyNames": {
            "$ref": "#/definitions/Id"
          },
          "markdownDescription": "Overrides workspace-level toolchains by their identifier."
        }
      },
      "additionalProperties": false,
      "markdownDescription": "Overrides workspace-level toolchain settings, scoped to this project."
    },
    "ProjectToolchainEntry": {
      "description": "Variants a project-level toolchain can be configured.",
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/ToolchainPluginConfig"
        }
      ],
      "markdownDescription": "Variants a project-level toolchain can be configured."
    },
    "ProjectWorkspaceConfig": {
      "description": "Overrides workspace settings, scoped to this project.",
      "type": "object",
      "properties": {
        "inheritedTasks": {
          "title": "inheritedTasks",
          "description": "Controls how tasks are inherited.",
          "allOf": [
            {
              "$ref": "#/definitions/ProjectWorkspaceInheritedTasksConfig"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProjectWorkspaceInheritedTasksConfig": {
      "description": "Controls how workspace-level tasks are inherited.",
      "type": "object",
      "properties": {
        "exclude": {
          "title": "exclude",
          "description": "Excludes inheriting tasks by their identifier.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Id"
          }
        },
        "include": {
          "title": "include",
          "description": "Only inherits tasks with the provided identifiers, and ignores the rest. When not defined, inherits all matching tasks. When an empty list, inherits no tasks.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Id"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "rename": {
          "title": "rename",
          "description": "Renames inherited tasks by mapping their existing identifier to a new identifier, scoped to this project.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Id"
          },
          "propertyNames": {
            "$ref": "#/definitions/Id"
          }
        }
      },
      "additionalProperties": false,
      "markdownDescription": "Controls how workspace-level tasks are inherited."
    },
    "StackType": {
      "description": "The technology stack of the project, for categorizing.",
      "type": "string",
      "enum": [
        "backend",
        "frontend",
        "infrastructure",
        "systems",
        "unknown"
      ]
    },
    "TaskArgs": {
      "description": "Configures a command and its arguments to execute.",
      "anyOf": [
        {
          "type": "null"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "TaskConfig": {
      "description": "Configures a task to be ran within the action pipeline.",
      "type": "object",
      "properties": {
        "args": {
          "title": "args",
          "description": "Arguments to pass to the command when it's ran. Can be defined as a string, or a list of individual arguments.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "command": {
          "title": "command",
          "description": "The command line to execute when the task is ran. Supports the command (executable) with or without arguments. Can be defined as a string, or a list of individual arguments.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "dependsOn": {
          "title": "dependsOn",
          "description": "Other tasks that this task depends on, and must run to completion before this task is ran. Can depend on sibling tasks, or tasks in other projects, using targets.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskDependency"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "deps": {
          "title": "deps",
          "description": "Other tasks that this task depends on, and must run to completion before this task is ran. Can depend on sibling tasks, or tasks in other projects, using targets.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskDependency"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "title": "description",
          "description": "A human-readable description about the task. @since 1.22.0",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "env": {
          "title": "env",
          "description": "A map of environment variables that will be set in the child process when the task is ran.",
          "anyOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "propertyNames": {
                "type": "string"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "extends": {
          "title": "extends",
          "description": "Extends settings from a sibling task by identifier.",
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "null"
            }
          ]
        },
        "inputs": {
          "title": "inputs",
          "description": "A list of inputs that will be hashing and compared against changed files to determine affected status. If affected, the task will run, otherwise it will exit early. An input can be a literal file path, a glob pattern, environment variable, and more.  When not provided, all files within the project are considered inputs (**/*). When an empty list, no files are considered. Otherwise, an explicit list of inputs are considered.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Input"
              }
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "A list of inputs that will be hashing and compared against changed files to determine affected status. If affected, the task will run, otherwise it will exit early. An input can be a literal file path, a glob pattern, environment variable, and more.  When not provided, all files within the project are considered inputs (`**/*`). When an empty list, no files are considered. Otherwise, an explicit list of inputs are considered."
        },
        "options": {
          "title": "options",
          "description": "Options to control task inheritance, execution, and more.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskOptionsConfig"
            }
          ]
        },
        "outputs": {
          "title": "outputs",
          "description": "A list of outputs that will be created when the task has successfully ran. An output can be a literal file path, or a glob pattern.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Output"
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "preset": {
          "title": "preset",
          "description": "The preset to apply for the task. Will inherit default options.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskPreset"
            },
            {
              "type": "null"
            }
          ]
        },
        "script": {
          "title": "script",
          "description": "A script to run within a shell. A script is anything from a single command, to multiple commands, or shell specific syntax. Does not support arguments, merging, or inheritance. This overrides command and args. @since 1.27.0",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "A script to run within a shell. A script is anything from a single command, to multiple commands, or shell specific syntax. Does not support arguments, merging, or inheritance. This overrides `command` and `args`. @since 1.27.0"
        },
        "toolchain": {
          "title": "toolchain",
          "description": "A toolchain, or list of toolchains, in which the task will inherit functionality from.",
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Id"
              }
            }
          ]
        },
        "toolchains": {
          "title": "toolchains",
          "description": "A toolchain, or list of toolchains, in which the task will inherit functionality from.",
          "anyOf": [
            {
              "$ref": "#/definitions/Id"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Id"
              }
            }
          ]
        },
        "type": {
          "title": "type",
          "description": "The type of task, primarily used for categorical reasons. When not provided, will be automatically determined based on configured outputs.",
          "default": "test",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskType"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TaskDependency": {
      "description": "Configures another task that this task depends on.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/TaskDependencyConfig"
        }
      ]
    },
    "TaskDependencyConfig": {
      "description": "Expanded information about a task dependency.",
      "type": "object",
      "properties": {
        "args": {
          "title": "args",
          "description": "Additional arguments to pass to this dependency when it's ran.",
          "allOf": [
            {
              "$ref": "#/definitions/TaskArgs"
            }
          ]
        },
        "env": {
          "title": "env",
          "description": "A map of environment variables specific to this dependency.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "optional": {
          "title": "optional",
          "description": "Marks the dependency as optional when being inherited from the top-level. @since 1.20.0",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Marks the dependency as optional when being inherited from the top-level. @since 1.20.0"
        },
        "target": {
          "title": "target",
          "description": "The target of the depended on task.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "TaskMergeStrategy": {
      "description": "The strategy in which to merge a specific task option.",
      "type": "string",
      "enum": [
        "append",
        "prepend",
        "preserve",
        "replace"
      ]
    },
    "TaskOperatingSystem": {
      "description": "The operating system in which to only run this task on.",
      "type": "string",
      "enum": [
        "linux",
        "macos",
        "windows"
      ]
    },
    "TaskOptionEnvFile": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "TaskOptionsConfig": {
      "description": "Options to control task inheritance, execution, and more.",
      "type": "object",
      "properties": {
        "affectedFiles": {
          "title": "affectedFiles",
          "description": "The pattern in which affected files will be passed to the task.",
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "args",
                    "env"
                  ]
                }
              ]
            },
            {
              "type": "null"
            }
          ]
        },
        "affectedPassInputs": {
          "title": "affectedPassInputs",
          "description": "When affected and no files are matching, pass the task's inputs as arguments to the command, instead of ..",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "When affected and no files are matching, pass the task's inputs as arguments to the command, instead of `.`."
        },
        "allowFailure": {
          "title": "allowFailure",
          "description": "Allow the task to fail without failing the entire action pipeline. @since 1.13.0",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "cache": {
          "title": "cache",
          "description": "Cache the outputs of the task for incremental builds. Defaults to true if outputs are configured for the task.",
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "local",
                    "remote"
                  ]
                }
              ]
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Cache the `outputs` of the task for incremental builds. Defaults to `true` if outputs are configured for the task."
        },
        "cacheKey": {
          "title": "cacheKey",
          "description": "A custom key to include in the cache hashing process. Can be used to invalidate local and remote caches.",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "cacheLifetime": {
          "title": "cacheLifetime",
          "description": "Lifetime to cache the task itself, in the format of \"1h\", \"30m\", etc. If not defined, caches live forever, or until inputs change. @since 1.29.0",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "envFile": {
          "title": "envFile",
          "description": "Loads and sets environment variables from the .env file(s) when running the task.",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskOptionEnvFile"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Loads and sets environment variables from the `.env` file(s) when running the task."
        },
        "inferInputs": {
          "title": "inferInputs",
          "description": "Automatically infer inputs from file groups or environment variables that were utilized within command, script, args, and env. @since 1.31.0",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Automatically infer inputs from file groups or environment variables that were utilized within `command`, `script`, `args`, and `env`. @since 1.31.0"
        },
        "interactive": {
          "title": "interactive",
          "description": "Marks the task as interactive, so that it will run in isolation, and have direct access to stdin. @since 1.12.0",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "internal": {
          "title": "internal",
          "description": "Marks the task as internal, which disables it from being ran from the command line, but can still be depended on by other tasks. @since 1.23.0",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "merge": {
          "title": "merge",
          "description": "The default strategy to use when merging args, deps, env, inputs, or outputs with an inherited task. Can be overridden with the other field-specific merge options.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The default strategy to use when merging `args`, `deps`, `env`, `inputs`, or `outputs` with an inherited task. Can be overridden with the other field-specific merge options."
        },
        "mergeArgs": {
          "title": "mergeArgs",
          "description": "The strategy to use when merging args with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `args` with an inherited task."
        },
        "mergeDeps": {
          "title": "mergeDeps",
          "description": "The strategy to use when merging deps with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `deps` with an inherited task."
        },
        "mergeEnv": {
          "title": "mergeEnv",
          "description": "The strategy to use when merging env with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `env` with an inherited task."
        },
        "mergeInputs": {
          "title": "mergeInputs",
          "description": "The strategy to use when merging inputs with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `inputs` with an inherited task."
        },
        "mergeOutputs": {
          "title": "mergeOutputs",
          "description": "The strategy to use when merging outputs with an inherited task.",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `outputs` with an inherited task."
        },
        "mergeToolchains": {
          "title": "mergeToolchains",
          "description": "The strategy to use when merging toolchains with an inherited task. @since 2.0.0",
          "default": "append",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskMergeStrategy"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The strategy to use when merging `toolchains` with an inherited task. @since 2.0.0"
        },
        "mutex": {
          "title": "mutex",
          "description": "Creates an exclusive lock on a virtual resource, preventing other tasks using the same resource from running concurrently. @since 1.24.0",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ]
        },
        "os": {
          "title": "os",
          "description": "The operating system in which to only run this task on.",
          "anyOf": [
            {
              "anyOf": [
                {
                  "$ref": "#/definitions/TaskOperatingSystem"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskOperatingSystem"
                  }
                }
              ]
            },
            {
              "type": "null"
            }
          ]
        },
        "outputStyle": {
          "title": "outputStyle",
          "description": "The style in which task output will be printed to the console.",
          "default": "buffer",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskOutputStyle"
            },
            {
              "type": "null"
            }
          ]
        },
        "persistent": {
          "title": "persistent",
          "description": "Marks the task as persistent (continuously running). This is ideal for watchers, servers, or never-ending processes. @since 1.6.0",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Marks the task as persistent (continuously running). This is ideal for watchers, servers, or never-ending processes. @since 1.6.0"
        },
        "priority": {
          "title": "priority",
          "description": "Marks the task with a certain priority, which determines the order in which it is ran within the action pipeline.",
          "default": "normal",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskPriority"
            },
            {
              "type": "null"
            }
          ]
        },
        "retryCount": {
          "title": "retryCount",
          "description": "The number of times a failing task will be retried to succeed.",
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "runDepsInParallel": {
          "title": "runDepsInParallel",
          "description": "Runs direct task dependencies (via deps) in sequential order. This does not apply to indirect or transient dependencies.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Runs direct task dependencies (via `deps`) in sequential order. This _does not_ apply to indirect or transient dependencies."
        },
        "runFromWorkspaceRoot": {
          "title": "runFromWorkspaceRoot",
          "description": "Runs the task from the workspace root, instead of the project root.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ]
        },
        "runInCI": {
          "title": "runInCI",
          "description": "Whether to run the task in CI or not, when executing moon ci, moon check, or moon run.",
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "affected",
                    "only",
                    "skip"
                  ]
                }
              ]
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Whether to run the task in CI or not, when executing `moon ci`, `moon check`, or `moon run`."
        },
        "shell": {
          "title": "shell",
          "description": "Runs the task within a shell. When not defined, runs the task directly while relying on native PATH resolution.",
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "Runs the task within a shell. When not defined, runs the task directly while relying on native `PATH` resolution."
        },
        "timeout": {
          "title": "timeout",
          "description": "The maximum time in seconds that a task can run before being cancelled.",
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ]
        },
        "unixShell": {
          "title": "unixShell",
          "description": "The shell to run the task in when on a Unix-based machine. @since 1.21.0",
          "default": "bash",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskUnixShell"
            },
            {
              "type": "null"
            }
          ],
          "markdownDescription": "The shell to run the task in when on a Unix-based machine. @since 1.21.0"
        },
        "windowsShell": {
          "title": "windowsShell",
          "description": "The shell to run the task in when on a Windows machine. @since 1.21.0",
          "default": "pwsh",
          "anyOf": [
            {
              "$ref": "#/definitions/TaskWindowsShell"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TaskOutputStyle": {
      "description": "The style in which task output will be printed to the console.",
      "type": "string",
      "enum": [
        "buffer",
        "buffer-only-failure",
        "hash",
        "none",
        "stream"
      ]
    },
    "TaskPreset": {
      "description": "Preset options to inherit.",
      "type": "string",
      "enum": [
        "server",
        "watcher"
      ]
    },
    "TaskPriority": {
      "description": "The priority levels a task can be bucketed into when running in the action pipeline.",
      "type": "string",
      "enum": [
        "critical",
        "high",
        "normal",
        "low"
      ]
    },
    "TaskType": {
      "description": "The type of task.",
      "type": "string",
      "enum": [
        "build",
        "run",
        "test"
      ]
    },
    "TaskUnixShell": {
      "description": "A list of available shells on Unix.",
      "type": "string",
      "enum": [
        "bash",
        "elvish",
        "fish",
        "ion",
        "murex",
        "nu",
        "pwsh",
        "xonsh",
        "zsh"
      ]
    },
    "TaskWindowsShell": {
      "description": "A list of available shells on Windows.",
      "type": "string",
      "enum": [
        "bash",
        "elvish",
        "fish",
        "murex",
        "nu",
        "pwsh",
        "xonsh"
      ]
    },
    "ToolchainPluginConfig": {
      "description": "Configures an individual toolchain.",
      "type": "object",
      "properties": {
        "config": {
          "title": "config",
          "description": "Arbitrary configuration that'll be passed to the WASM plugin.",
          "type": "object",
          "additionalProperties": {
            "type": [
              "boolean",
              "object",
              "array",
              "number",
              "string",
              "integer"
            ]
          },
          "propertyNames": {
            "type": "string"
          }
        },
        "plugin": {
          "title": "plugin",
          "description": "Location of the WASM plugin to use.",
          "anyOf": [
            {
              "$ref": "#/definitions/PluginLocator"
            },
            {
              "type": "null"
            }
          ]
        },
        "version": {
          "title": "version",
          "description": "The version of the toolchain to download and install.",
          "anyOf": [
            {
              "$ref": "#/definitions/UnresolvedVersionSpec"
            },
            {
              "type": "null"
            }
          ]
        },
        "versionFromPrototools": {
          "title": "versionFromPrototools",
          "description": "Inherit the version from the root .prototools. When true, matches using the same ID, otherwise a string can be provided for a custom ID.",
          "allOf": [
            {
              "$ref": "#/definitions/ToolchainPluginVersionFrom"
            }
          ],
          "markdownDescription": "Inherit the version from the root `.prototools`. When true, matches using the same ID, otherwise a string can be provided for a custom ID."
        }
      },
      "additionalProperties": false
    },
    "ToolchainPluginVersionFrom": {
      "description": "Strategy in which to inherit a version from .prototools.",
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string"
        }
      ],
      "markdownDescription": "Strategy in which to inherit a version from `.prototools`."
    },
    "UnresolvedVersionSpec": {
      "description": "Represents an unresolved version or alias that must be resolved to a fully-qualified version.",
      "type": "string",
      "markdownDescription": "Represents an unresolved version or alias that must be resolved to a fully-qualified version."
    }
  }
}
